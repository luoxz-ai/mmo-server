syntax = "proto3";
import "msg/ts_cmd.proto";
import "common/Common.proto";
//通知前端读取地图
message SC_LOADMAP
{
	option (cmd).sc_cmd = CMD_SC_LOADMAP;
	uint32 mapid = 1;
	float  posx	 = 3;
	float  posy	 = 4;
	float  face	 = 5;
};

//前端通知服务器读取地图完成,可以准备进入地图了
message CS_LOADMAP_SUCC 
{
	option (cmd).cs_cmd = CMD_CS_LOADMAP_SUCC;
};

//玩家基础数据
message SC_PLAYERINFO
{
	option (cmd).sc_cmd = CMD_SC_PLAYERINFO;
	uint64 playerid = 1;
	uint32 worldid	= 2;
	string name		= 3;
	uint32 prof		= 4;
	uint32 baselook = 5;
	uint32 exp		= 6;
	uint32 level	= 7;
	uint32 viplev	= 8;
	uint32 pkval	= 9;
	uint32 honor	= 10;
	uint32 campid	= 11;

	uint32 money	  = 12;
	uint32 money_bind = 13;
	uint32 gold		  = 14;
	uint32 gold_bind  = 15;

	uint32 bag_size	   = 16;
	uint32 stroge_size = 17;
	uint32 achi_point  = 18;

	uint32 hp = 30;
	uint32 mp = 31;
	uint32 fp = 32;
	uint32 np = 33;
};

message SC_ACTORATTRIB
{
	option (cmd).sc_cmd = CMD_SC_ACTORATTRIB;
	repeated uint32 attrib_list = 1;
}

//其他的数据
message SC_COMMONDATA
{
	option (cmd).sc_cmd = CMD_SC_COMMONDATA;
	message Data
	{
		uint32 keyidx = 1;
		uint64 data0  = 2;
		uint64 data1  = 3;
		uint64 data2  = 4;
		uint64 data3  = 5;
	};
	repeated Data datalist = 1;
}

message SC_DATACOUNT
{
	option (cmd).sc_cmd = CMD_SC_DATACOUNT;
	message Data
	{
		uint32 type			   = 1;
		uint32 idx			   = 2;
		uint64 data			   = 3;
		uint32 next_reset_time = 4;
	};
	repeated Data datalist = 1;
}

message SC_COOLDOWN
{
	option (cmd).sc_cmd = CMD_SC_COOLDOWN;
	message Data
	{
		uint32 type		  = 1;
		uint32 idx		  = 2;
		uint32 expiretime = 3;
	};
	repeated Data datalist = 1;
}

message SC_SYSVAR
{
	option (cmd).sc_cmd = CMD_SC_SYSVAR;
	message Data
	{
		uint32 keyidx = 1;
		uint64 data0  = 2;
		uint64 data1  = 3;
		uint64 data2  = 4;
		uint64 data3  = 5;
		string str0	  = 6;
		string str1	  = 7;
		string str2	  = 8;
		string str3	  = 9;
	};
	repeated Data datalist = 1;
}

//组队信息

//公会信息

//正式进入地图
message SC_ENTERMAP
{
	option (cmd).sc_cmd = CMD_SC_ENTERMAP;
	float x	   = 1;
	float y	   = 2;
	float face = 3;
};

//角色进入视野
message SC_AOI_NEW
{
	option (cmd).sc_cmd = CMD_SC_AOI_NEW;
	uint32 mapid = 1;

	//其他用于显示的数据
	uint64 actor_id	 = 2;
	string name		 = 3;
	uint32 actortype = 4; // 1=怪,2=npc,3=pet,4=player
	uint32 baselook	 = 5; //基本外观数据
	uint32 prof		 = 6; //玩家代表职业, 怪物/宠物/NPC代表类型ID
	uint32 lev		 = 7;
	uint32 campid	 = 8;
	uint32 hp		 = 9;
	uint32 hpmax	 = 10;
	uint32 movespd	 = 11;
	uint64 ownerid	 = 12;
	float  posx		 = 13;
	float  posy		 = 14;
	float  face		 = 15;

	//装备信息
	uint32 weaponid = 20;
	uint32 armorid	= 21;

	//公会信息
	uint32 guildid	 = 30;
	string guildname = 31;
}
//角色离开视野
message SC_AOI_REMOVE
{
	option (cmd).sc_cmd = CMD_SC_AOI_REMOVE;
	uint32			mapid  = 1;
	repeated uint64 idlist = 2;
}
//角色移动
message SC_AOI_UPDATE
{
	option (cmd).sc_cmd = CMD_SC_AOI_UPDATE;
	uint32 mapid	= 1;
	uint64 actor_id = 2;
	float  posx		= 3;
	float  posy		= 4;
}

//sync mapval
message SC_MAPVAL
{
	option (cmd).sc_cmd = CMD_SC_MAPVAL;
	message MapVal
	{
		uint32 key = 1;
		int64 value = 2;
	}

	enum State
	{
		SYNC_MAPVAL_ALL = 0;
		SYNC_MAPVAL_ONE = 1;
	}

	State state = 1;

	repeated MapVal map_val_set = 2;
	repeated MapVal user_map_val_set = 3;
	
};

//属性变化通知
message SC_ATTRIB_CHANGE
{
	option (cmd).sc_cmd = CMD_SC_ATTRIB_CHANGE;
	message Data
	{
		uint32 actype = 1;
		uint32 val	  = 2;
		string valstr = 3;
	}
	uint64		  actor_id = 1;
	repeated Data datalist = 2;
}

//当前身上的状态列表
message SC_STATUS_LIST
{
	option (cmd).sc_cmd = CMD_SC_STATUS_LIST;
	uint64			actor_id		   = 1;
	message Data
	{
		uint32 statusid  = 1;
		uint32 statustype= 2;
		uint32 statuslev = 3;
		int32  power	 = 4;
		uint64 idcaster	 = 8;
	};
	repeated Data status_list = 2;
}

//状态详细信息
message SC_STATUS_INFO
{
	option (cmd).sc_cmd = CMD_SC_STATUS_INFO;
	uint64	actor_id = 1;
	message Data
	{
		uint32 statusid  = 1;
		uint32 statustype= 2;
		uint32 statuslev = 3;
		int32  power	 = 4;
		int32  sec		 = 5;
		int32  times	 = 6;
		uint32 laststamp = 7;
		uint64 idcaster	 = 8;
		bool   ispause	 = 9;
	}
	repeated Data statuslist = 2;
}

message SC_STATUS_ACTION
{
	option (cmd).sc_cmd = CMD_SC_STATUS_ACTION;
	enum ACTION
	{
		STATUS_ATTACH = 0; //挂上了一个新状态
		STATUS_DETACH = 1; //移除了
		STATUS_EFFECT = 2; //状态被作用了1次
	};

	uint64 actor_id	 = 1;
	ACTION action	 = 2;
	uint32 statusid	 = 3;
	uint32 statustype= 4;
	uint32 statuslev = 5;
}

message CS_MOVE
{
	option (cmd).cs_cmd = CMD_CS_MOVE;
	uint64 mapid = 1;
	float  x	 = 2;
	float  y	 = 3;
	float  face	 = 4;
}

message CS_CHANGEMAP
{
	option (cmd).cs_cmd = CMD_CS_CHANGEMAP;
	uint64 mapid		  = 1;
	uint32 leavepoint_idx = 2;
}

message CS_CASTSKILL
{
	option (cmd).cs_cmd = CMD_CS_CASTSKILL;
	uint64 mapid	 = 1;
	uint32 skill_id	 = 2;
	uint64 target_id = 3;
	float  x		 = 4;
	float  y		 = 5;
}

message SC_CASTSKILL
{
	option (cmd).sc_cmd = CMD_SC_CASTSKILL;
	uint64 mapid	 = 1;
	uint64 actor_id	 = 2;
	uint32 skill_id	 = 3;
	uint64 target_id = 4;
	float  x		 = 5;
	float  y		 = 6;
}

message SC_SKILL_DAMAGE
{
	option (cmd).sc_cmd = CMD_SC_SKILL_DAMAGE;
	uint64	mapid	 = 1;
	uint64	actor_id = 2;
	uint32	skill_id = 3;
	message DamageInfo
	{
		uint64 target_id = 1;
		int32  damage	 = 2;
	};
	repeated DamageInfo damagelist = 5;
}

message CS_SKILL_BREAK
{
	option (cmd).cs_cmd = CMD_CS_SKILL_BREAK;
	uint64 mapid = 1;
};

message SC_SKILL_BREAK
{
	option (cmd).sc_cmd = CMD_SC_SKILL_BREAK;
	uint64 mapid	= 1;
	uint64 actor_id = 2;
};

message CS_SKILL_CHGTARGETPOS
{
	option (cmd).cs_cmd = CMD_CS_SKILL_CHGTARGETPOS;
	float x = 1;
	float y = 2;
};

message SC_SKILL_STUN
{
	option (cmd).sc_cmd = CMD_SC_SKILL_STUN;
	uint64 mapid	= 1;
	uint64 actor_id = 2;
	uint32 skill_id = 3;
	uint32 stun_ms	= 4;
};

message SC_SKILL_EFFACT
{
	option (cmd).sc_cmd = CMD_SC_SKILL_EFFACT;
	uint64 mapid	= 1;
	uint64 actor_id = 2;
	uint32 skill_id = 3;
};

message SC_DAMAGE
{
	option (cmd).sc_cmd = CMD_SC_DAMAGE;
	uint64 actor_id	   = 1;
	uint64 attacker_id = 2; //攻击者
	uint32 damage	   = 3; //伤害
	uint32 hittype	   = 4; //伤害类型
	bool   crtical	   = 5; //是否暴击
}

message SC_DEAD
{
	option (cmd).sc_cmd = CMD_SC_DEAD;
	uint64 actor_id	   = 1;
	uint64 attacker_id = 2; //攻击者
}

message CS_CHANGE_PKMODE
{
	option (cmd).cs_cmd = CMD_CS_CHANGE_PKMODE;
	uint32 pkmode = 1;
};

message SC_CHANGE_PKMODE
{
	option (cmd).sc_cmd = CMD_SC_CHANGE_PKMODE;
	uint32 pkmode = 1;
};

message CS_REBORN
{
	option (cmd).cs_cmd = CMD_CS_REBORN;
	uint32 reborn_type = 1;
};

message SC_ITEM_INFO
{
	option (cmd).sc_cmd = CMD_SC_ITEM_INFO;
	uint64 actor_id		= 1; //有可能，是其他人的物品，通过这个消息传输给前端，用来显示
	uint64 item_id		= 2;
	uint32 position		= 3;
	uint32 grid			= 4;
	uint32 pile_num		= 5;
	uint32 dura			= 6;
	uint32 dura_limit	= 7;
	uint32 expire_time	= 8;
	uint32 addition_lev = 9;
	uint32 flag			= 10;
};

message SC_ITEM_CHANGE
{
	option (cmd).sc_cmd = CMD_SC_ITEM_CHANGE;
	enum ChangeType
	{
		ChangeGrid		 = 0;
		ChangePileNum	 = 1;
		ChangeExpireData = 2;
		ChangeDura		 = 3;
		ChangeDuraLimit	 = 4;
	};
	message ChangeData
	{
		ChangeType change_type = 1;
		uint32	   value	   = 2;
	}

	uint64				item_id		= 1;
	uint32				position	= 2;
	repeated ChangeData change_list = 3;
};

message SC_ITEM_DELETE
{
	option (cmd).sc_cmd = CMD_SC_ITEM_DELETE;
	uint64 item_id	= 1;
	uint32 position = 2;
	uint32 grid		= 3;
}

message CS_ITEM_SWAP
{
	option (cmd).cs_cmd = CMD_CS_ITEM_SWAP;
	uint32 position = 1;
	uint32 grid1	= 2;
	uint32 grid2	= 3;
};

message CS_ITEM_SPLIT
{
	option (cmd).cs_cmd = CMD_CS_ITEM_SPLIT;
	uint32 position	 = 1;
	uint32 grid1	 = 2;
	uint32 grid2	 = 3;
	uint32 split_num = 4;
};

message CS_ITEM_COMBINE
{
	option (cmd).cs_cmd = CMD_CS_ITEM_COMBINE;
	uint32 position = 1;
	uint32 grid1	= 2;
	uint32 grid2	= 3;
};

message CS_ITEM_TIDY
{
	option (cmd).cs_cmd = CMD_CS_ITEM_TIDY;
	uint32 position = 1;
}

message CS_ITEM_USE
{
	option (cmd).cs_cmd = CMD_CS_ITEM_USE;
	uint32 grid	 = 1;
	uint32 count = 2;
}

message CS_ITEM_STORAGE_OPEN 
{
	option (cmd).cs_cmd = CMD_CS_ITEM_STORAGE_OPEN;
}


message CS_ITEM_STORAGE_CHECKOUT
{
	option (cmd).cs_cmd = CMD_CS_ITEM_STORAGE_CHECKOUT;
	uint32 grid_in_storage = 1;
}

message CS_ITEM_STORAGE_CHECKIN
{
	option (cmd).cs_cmd = CMD_CS_ITEM_STORAGE_CHECKIN;
	uint32 grid_in_package = 1;
}

message CS_EQUIP
{
	option (cmd).cs_cmd = CMD_CS_EQUIP;
	uint32 grid_in_package = 1;
	uint32 grid_in_equip   = 2;
}

message CS_UNEQUIP
{
	option (cmd).cs_cmd = CMD_CS_UNEQUIP;
	uint32 grid_in_equip = 1;
}

enum TalkChannel
{
	CHANNEL_NORMAL	= 0; //周围聊天
	CHANNEL_SCENE	= 1; //场景内聊天
	CHANNEL_PHASE	= 2; //位面内聊天
	
	CHANNEL_TEAM	= 3; //组队
	CHANNEL_GUILD	= 4; //公会
	CHANNEL_WORLD	= 5; //世界
	CHANNEL_TRUMPET = 6; //世界-小喇叭
	CHANNEL_GLOBAL	= 7; //全游戏
	CHANNEL_SYSTEM	= 8; //系统
	CHANNEL_RUMOR	= 9; //广播

	CHANNEL_PRIVATE = 10; //私聊
}

message CS_TALK
{
	option (cmd).cs_cmd = CMD_CS_TALK;
	TalkChannel channel	   = 1;
	string		words	   = 2;
	uint64		reciver_id = 3;
}

message SC_TALK
{
	option (cmd).sc_cmd = CMD_SC_TALK;
	TalkChannel			  channel		= 1; //频道
	string				  words			= 2; //内容
	uint64				  sender_id		= 4; //发送者id
	string				  sender_name	= 5; //发送者名字
	uint32				  sender_sign	= 6; //发送者标志（是否新手辅导员，或者其他的特殊标志)
	uint32				  sender_viplev = 7; //发送者VIP等级
	uint32				  send_time		= 8; //发送时间戳
	uint64				  reciver_id	= 9;
	repeated SC_ITEM_INFO item_list		= 20;
}

message SC_TASK_INFO
{
	option (cmd).sc_cmd = CMD_SC_TASK_INFO;
	message Info
	{
		uint64 task_id		= 1;
		uint32 accept_time	= 2;
		uint32 finish_time	= 3;
		uint32 expire_time	= 4;
		uint32 daycount		= 5;
		uint32 daycount_max = 6;
		uint32 state		= 7;
		uint32 num1			= 10;
		uint32 num2			= 11;
		uint32 num3			= 12;
		uint32 num4			= 13;
	};
	repeated Info task_info_list = 1;
}

message SC_TASK_DATA
{
	option (cmd).sc_cmd = CMD_SC_TASK_DATA;
	uint64 task_id = 1;
	uint32 idx	   = 2;
	uint32 num	   = 3;
}

message CS_TASK_SUBMIT
{
	option (cmd).cs_cmd = CMD_CS_TASK_SUBMIT;
	uint64 task_id		   = 1;
	uint32 submit_multiple = 2;
}

message CS_ACTIVE_NPC
{
	option (cmd).cs_cmd = CMD_CS_ACTIVE_NPC;
	uint64 npc_id = 1;
}

message SC_DIALOG
{
	option (cmd).sc_cmd = CMD_SC_DIALOG;
	uint64			dialog_id	 = 1;
	uint32			dialog_type	 = 2;
	string			dialog_title = 3;
	repeated string dialog_txt	 = 4;
	message			dialog_link
	{
		uint32 style = 1;
		string txt	 = 2;
	}
	repeated dialog_link dialog_link_list = 5;
}

message CS_DIALOG_CLICK
{
	option (cmd).cs_cmd = CMD_CS_DIALOG_CLICK;
	uint64 dialog_id		 = 1;
	uint32 dialog_button_idx = 2;
}

message SC_ACHI_INFO
{
	option (cmd).sc_cmd = CMD_SC_ACHI_INFO;
	message Info
	{
		uint32 achi_id = 1;
		uint32 take	   = 2;
	}
	repeated Info finish_list = 1;
}

message CS_ACHI_TAKE
{
	option (cmd).cs_cmd = CMD_CS_ACHI_TAKE;
	uint32 achi_id = 1;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
message CS_TEAMCREATE 
{
	option (cmd).cs_cmd = CMD_CS_TEAMCREATE;
}

message CS_TEAMQUIT 
{
	option (cmd).cs_cmd = CMD_CS_TEAMQUIT;
}

message CS_TEAMKICKMEMBER
{
	option (cmd).cs_cmd = CMD_CS_TEAMKICKMEMBER;
	uint64 member_id = 1;
}

message CS_TEAMINVITEMEMBER
{
	option (cmd).cs_cmd = CMD_CS_TEAMINVITEMEMBER;
	uint64 invitee_id = 1; //被邀请者id
}

message SC_TEAMINVITEMEMBER
{
	option (cmd).sc_cmd = CMD_SC_TEAMINVITEMEMBER;
	uint64 team_id		= 1; //队伍id
	uint64 inviter_id	= 2; //邀请者
	string inviter_name = 3; //邀请者名字
}

message CS_TEAMACCEPTINVITE
{
	option (cmd).cs_cmd = CMD_CS_TEAMACCEPTINVITE;
	uint64 team_id	  = 1; //队伍id
	uint64 inviter_id = 2; //邀请者
	bool   result	  = 3; //是否同意
}

message CS_TEAMNEWLEADER
{
	option (cmd).cs_cmd = CMD_CS_TEAMNEWLEADER;
	uint64 new_leader_id = 2; //邀请者
}

message SC_TEAMMEMBER_INFO
{
	option (cmd).sc_cmd = CMD_SC_TEAMMEMBER_INFO;
	repeated TeamMemberInfo member_list = 1;
}

message SC_TEAMMEMBER_ACTION
{
	option (cmd).sc_cmd = CMD_SC_TEAMMEMBER_ACTION;
	enum Action
	{
		TEAM_CREATE			   = 0; // member_id=team_id;
		TEAM_DESTORY		   = 1;
		TEAM_ADDMEBER		   = 2;
		TEAM_CHANGE_LEADER	   = 3; // member_id=new_leader_id;
		TEAM_QUIT			   = 4;
		TEAM_KICKMEMBER		   = 5;
		TEAM_MEMBER_LEV_CHG	   = 6;
		TEAM_MEMBER_NAME_CHG   = 7;
		TEAM_MEMBER_ONLINE_CHG = 8;
	}
	Action action		 = 1;
	uint64 operator_id	 = 2;
	uint64 member_id	 = 3;
	uint32 member_lev	 = 4;
	string member_name	 = 5;
	bool   member_online = 6;
}

message CS_TEAMAPPLYMEMBER
{
	option (cmd).cs_cmd = CMD_CS_TEAMAPPLYMEMBER;
	uint64 respondent_id = 1; //被申请人id
}

message SC_TEAMAPPLYMEMBER
{
	option (cmd).sc_cmd = CMD_SC_TEAMAPPLYMEMBER;
	uint64 applicant_id	  = 1; //申请者id
	string applicant_name = 2; //申请者名字
}

message CS_TEAMACCEPTAPPLY
{
	option (cmd).cs_cmd = CMD_CS_TEAMACCEPTAPPLY;
	uint64 applicant_id = 1; //申请者id
	bool   result		= 2; //是否同意
}


///////////////////////////////////////////////////////////////////////////////////////////////////////

message CS_GUILDCREATE 
{
	option (cmd).cs_cmd = CMD_CS_GUILDCREATE;
}

message CS_GUILDQUIT 
{
	option (cmd).cs_cmd = CMD_CS_GUILDQUIT;
}

message CS_GUILDKICKMEMBER
{
	option (cmd).cs_cmd = CMD_CS_GUILDKICKMEMBER;
	uint64 member_id = 1;
}

message CS_GUILDINVITEMEMBER
{
	option (cmd).cs_cmd = CMD_CS_GUILDINVITEMEMBER;
	uint64 invitee_id = 1; //被邀请者id
}

message SC_GUILDINVITEMEMBER
{
	option (cmd).sc_cmd = CMD_SC_GUILDINVITEMEMBER;
	uint64 guild_id		= 1; //队伍id
	uint64 inviter_id	= 2; //邀请者
	string inviter_name = 3; //邀请者名字
}

message CS_GUILDACCEPTINVITE
{
	option (cmd).cs_cmd = CMD_CS_GUILDACCEPTINVITE;
	uint64 guild_id	  = 1; //队伍id
	uint64 inviter_id = 2; //邀请者
	bool   result	  = 3; //是否同意
}

message CS_GUILDNEWLEADER
{
	option (cmd).cs_cmd = CMD_CS_GUILDNEWLEADER;
	uint64 new_leader_id = 2; //邀请者
}

message SC_GUILDMEMBER_INFO
{
	option (cmd).sc_cmd = CMD_SC_GUILDMEMBER_INFO;
	repeated GuildMemberInfo member_list = 1;
}

message SC_GUILDMEMBER_ACTION
{
	option (cmd).sc_cmd = CMD_SC_GUILDMEMBER_ACTION;
	enum Action
	{
        GUILD_CREATE            = 0; // member_id=guild_id;
        GUILD_DESTORY           = 1;
        GUILD_ADDMEBER          = 2;
        GUILD_CHANGE_LEADER     = 3; // member_id=new_leader_id;
        GUILD_QUIT              = 4;
        GUILD_KICKMEMBER        = 5;
		GUILD_ACCEPTAPPLY		= 6;

        GUILD_MEMBER_LEV_CHG    = 10;
        GUILD_MEMBER_NAME_CHG   = 11;
		GUILD_MEMBER_ONLINE_CHG = 12;
		GUILD_MEMBER_RANK_CHG   = 13;
		GUILD_MEMBER_SCORE_CHG  = 14;
    }
	Action action		 = 1;
	uint64 operator_id	 = 2;
	uint64 member_id	 = 3;
	uint32 member_lev	 = 4;
	string member_name	 = 5;
	bool   member_online = 6;
	uint32 member_rank   = 7;
	uint32 member_score  = 8;
	uint32 member_last_logout  = 9;
}

message CS_GUILDAPPLYMEMBER
{
	option (cmd).cs_cmd = CMD_CS_GUILDAPPLYMEMBER;
	uint64 respondent_id = 1; //被申请人id
}

message SC_GUILDAPPLYMEMBER
{
	option (cmd).sc_cmd = CMD_SC_GUILDAPPLYMEMBER;
	uint64 applicant_id	  = 1; //申请者id
	string applicant_name = 2; //申请者名字
}

message CS_GUILDACCEPTAPPLY
{
	option (cmd).cs_cmd = CMD_CS_GUILDACCEPTAPPLY;
	uint64 applicant_id = 1; //申请者id
	bool   result		= 2; //是否同意
}
