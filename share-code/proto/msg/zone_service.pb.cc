// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/zone_service.proto

#include "msg/zone_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildMemberInfo_common_2fCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ACHI_INFO_Info_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ATTRIB_CHANGE_Data_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_COMMONDATA_Data_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_COOLDOWN_Data_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_DATACOUNT_Data_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_DIALOG_dialog_link_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ITEM_CHANGE_ChangeData_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ITEM_INFO_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_MAPVAL_MapVal_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SKILL_DAMAGE_DamageInfo_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_STATUS_INFO_Data_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_STATUS_LIST_Data_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SYSVAR_Data_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2fzone_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_TASK_INFO_Info_msg_2fzone_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamMemberInfo_common_2fCommon_2eproto;
class SC_LOADMAPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_LOADMAP> _instance;
} _SC_LOADMAP_default_instance_;
class CS_LOADMAP_SUCCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_LOADMAP_SUCC> _instance;
} _CS_LOADMAP_SUCC_default_instance_;
class SC_PLAYERINFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_PLAYERINFO> _instance;
} _SC_PLAYERINFO_default_instance_;
class SC_ACTORATTRIBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ACTORATTRIB> _instance;
} _SC_ACTORATTRIB_default_instance_;
class SC_COMMONDATA_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_COMMONDATA_Data> _instance;
} _SC_COMMONDATA_Data_default_instance_;
class SC_COMMONDATADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_COMMONDATA> _instance;
} _SC_COMMONDATA_default_instance_;
class SC_DATACOUNT_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_DATACOUNT_Data> _instance;
} _SC_DATACOUNT_Data_default_instance_;
class SC_DATACOUNTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_DATACOUNT> _instance;
} _SC_DATACOUNT_default_instance_;
class SC_COOLDOWN_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_COOLDOWN_Data> _instance;
} _SC_COOLDOWN_Data_default_instance_;
class SC_COOLDOWNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_COOLDOWN> _instance;
} _SC_COOLDOWN_default_instance_;
class SC_SYSVAR_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SYSVAR_Data> _instance;
} _SC_SYSVAR_Data_default_instance_;
class SC_SYSVARDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SYSVAR> _instance;
} _SC_SYSVAR_default_instance_;
class SC_ENTERMAPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ENTERMAP> _instance;
} _SC_ENTERMAP_default_instance_;
class SC_AOI_NEWDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_AOI_NEW> _instance;
} _SC_AOI_NEW_default_instance_;
class SC_AOI_REMOVEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_AOI_REMOVE> _instance;
} _SC_AOI_REMOVE_default_instance_;
class SC_AOI_UPDATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_AOI_UPDATE> _instance;
} _SC_AOI_UPDATE_default_instance_;
class SC_MAPVAL_MapValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_MAPVAL_MapVal> _instance;
} _SC_MAPVAL_MapVal_default_instance_;
class SC_MAPVALDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_MAPVAL> _instance;
} _SC_MAPVAL_default_instance_;
class SC_ATTRIB_CHANGE_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ATTRIB_CHANGE_Data> _instance;
} _SC_ATTRIB_CHANGE_Data_default_instance_;
class SC_ATTRIB_CHANGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ATTRIB_CHANGE> _instance;
} _SC_ATTRIB_CHANGE_default_instance_;
class SC_STATUS_LIST_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_STATUS_LIST_Data> _instance;
} _SC_STATUS_LIST_Data_default_instance_;
class SC_STATUS_LISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_STATUS_LIST> _instance;
} _SC_STATUS_LIST_default_instance_;
class SC_STATUS_INFO_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_STATUS_INFO_Data> _instance;
} _SC_STATUS_INFO_Data_default_instance_;
class SC_STATUS_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_STATUS_INFO> _instance;
} _SC_STATUS_INFO_default_instance_;
class SC_STATUS_ACTIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_STATUS_ACTION> _instance;
} _SC_STATUS_ACTION_default_instance_;
class CS_MOVEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_MOVE> _instance;
} _CS_MOVE_default_instance_;
class CS_CHANGEMAPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_CHANGEMAP> _instance;
} _CS_CHANGEMAP_default_instance_;
class CS_CASTSKILLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_CASTSKILL> _instance;
} _CS_CASTSKILL_default_instance_;
class SC_CASTSKILLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_CASTSKILL> _instance;
} _SC_CASTSKILL_default_instance_;
class SC_SKILL_DAMAGE_DamageInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SKILL_DAMAGE_DamageInfo> _instance;
} _SC_SKILL_DAMAGE_DamageInfo_default_instance_;
class SC_SKILL_DAMAGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SKILL_DAMAGE> _instance;
} _SC_SKILL_DAMAGE_default_instance_;
class CS_SKILL_BREAKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_SKILL_BREAK> _instance;
} _CS_SKILL_BREAK_default_instance_;
class SC_SKILL_BREAKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SKILL_BREAK> _instance;
} _SC_SKILL_BREAK_default_instance_;
class CS_SKILL_CHGTARGETPOSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_SKILL_CHGTARGETPOS> _instance;
} _CS_SKILL_CHGTARGETPOS_default_instance_;
class SC_SKILL_STUNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SKILL_STUN> _instance;
} _SC_SKILL_STUN_default_instance_;
class SC_SKILL_EFFACTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SKILL_EFFACT> _instance;
} _SC_SKILL_EFFACT_default_instance_;
class SC_DAMAGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_DAMAGE> _instance;
} _SC_DAMAGE_default_instance_;
class SC_DEADDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_DEAD> _instance;
} _SC_DEAD_default_instance_;
class CS_CHANGE_PKMODEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_CHANGE_PKMODE> _instance;
} _CS_CHANGE_PKMODE_default_instance_;
class SC_CHANGE_PKMODEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_CHANGE_PKMODE> _instance;
} _SC_CHANGE_PKMODE_default_instance_;
class CS_REBORNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_REBORN> _instance;
} _CS_REBORN_default_instance_;
class SC_ITEM_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ITEM_INFO> _instance;
} _SC_ITEM_INFO_default_instance_;
class SC_ITEM_CHANGE_ChangeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ITEM_CHANGE_ChangeData> _instance;
} _SC_ITEM_CHANGE_ChangeData_default_instance_;
class SC_ITEM_CHANGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ITEM_CHANGE> _instance;
} _SC_ITEM_CHANGE_default_instance_;
class SC_ITEM_DELETEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ITEM_DELETE> _instance;
} _SC_ITEM_DELETE_default_instance_;
class CS_ITEM_SWAPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ITEM_SWAP> _instance;
} _CS_ITEM_SWAP_default_instance_;
class CS_ITEM_SPLITDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ITEM_SPLIT> _instance;
} _CS_ITEM_SPLIT_default_instance_;
class CS_ITEM_COMBINEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ITEM_COMBINE> _instance;
} _CS_ITEM_COMBINE_default_instance_;
class CS_ITEM_TIDYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ITEM_TIDY> _instance;
} _CS_ITEM_TIDY_default_instance_;
class CS_ITEM_USEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ITEM_USE> _instance;
} _CS_ITEM_USE_default_instance_;
class CS_ITEM_STORAGE_OPENDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ITEM_STORAGE_OPEN> _instance;
} _CS_ITEM_STORAGE_OPEN_default_instance_;
class CS_ITEM_STORAGE_CHECKOUTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ITEM_STORAGE_CHECKOUT> _instance;
} _CS_ITEM_STORAGE_CHECKOUT_default_instance_;
class CS_ITEM_STORAGE_CHECKINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ITEM_STORAGE_CHECKIN> _instance;
} _CS_ITEM_STORAGE_CHECKIN_default_instance_;
class CS_EQUIPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_EQUIP> _instance;
} _CS_EQUIP_default_instance_;
class CS_UNEQUIPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_UNEQUIP> _instance;
} _CS_UNEQUIP_default_instance_;
class CS_TALKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TALK> _instance;
} _CS_TALK_default_instance_;
class SC_TALKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_TALK> _instance;
} _SC_TALK_default_instance_;
class SC_TASK_INFO_InfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_TASK_INFO_Info> _instance;
} _SC_TASK_INFO_Info_default_instance_;
class SC_TASK_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_TASK_INFO> _instance;
} _SC_TASK_INFO_default_instance_;
class SC_TASK_DATADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_TASK_DATA> _instance;
} _SC_TASK_DATA_default_instance_;
class CS_TASK_SUBMITDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TASK_SUBMIT> _instance;
} _CS_TASK_SUBMIT_default_instance_;
class CS_ACTIVE_NPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ACTIVE_NPC> _instance;
} _CS_ACTIVE_NPC_default_instance_;
class SC_DIALOG_dialog_linkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_DIALOG_dialog_link> _instance;
} _SC_DIALOG_dialog_link_default_instance_;
class SC_DIALOGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_DIALOG> _instance;
} _SC_DIALOG_default_instance_;
class CS_DIALOG_CLICKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_DIALOG_CLICK> _instance;
} _CS_DIALOG_CLICK_default_instance_;
class SC_ACHI_INFO_InfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ACHI_INFO_Info> _instance;
} _SC_ACHI_INFO_Info_default_instance_;
class SC_ACHI_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ACHI_INFO> _instance;
} _SC_ACHI_INFO_default_instance_;
class CS_ACHI_TAKEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ACHI_TAKE> _instance;
} _CS_ACHI_TAKE_default_instance_;
class CS_TEAMCREATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TEAMCREATE> _instance;
} _CS_TEAMCREATE_default_instance_;
class CS_TEAMQUITDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TEAMQUIT> _instance;
} _CS_TEAMQUIT_default_instance_;
class CS_TEAMKICKMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TEAMKICKMEMBER> _instance;
} _CS_TEAMKICKMEMBER_default_instance_;
class CS_TEAMINVITEMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TEAMINVITEMEMBER> _instance;
} _CS_TEAMINVITEMEMBER_default_instance_;
class SC_TEAMINVITEMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_TEAMINVITEMEMBER> _instance;
} _SC_TEAMINVITEMEMBER_default_instance_;
class CS_TEAMACCEPTINVITEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TEAMACCEPTINVITE> _instance;
} _CS_TEAMACCEPTINVITE_default_instance_;
class CS_TEAMNEWLEADERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TEAMNEWLEADER> _instance;
} _CS_TEAMNEWLEADER_default_instance_;
class SC_TEAMMEMBER_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_TEAMMEMBER_INFO> _instance;
} _SC_TEAMMEMBER_INFO_default_instance_;
class SC_TEAMMEMBER_ACTIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_TEAMMEMBER_ACTION> _instance;
} _SC_TEAMMEMBER_ACTION_default_instance_;
class CS_TEAMAPPLYMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TEAMAPPLYMEMBER> _instance;
} _CS_TEAMAPPLYMEMBER_default_instance_;
class SC_TEAMAPPLYMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_TEAMAPPLYMEMBER> _instance;
} _SC_TEAMAPPLYMEMBER_default_instance_;
class CS_TEAMACCEPTAPPLYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_TEAMACCEPTAPPLY> _instance;
} _CS_TEAMACCEPTAPPLY_default_instance_;
class CS_GUILDCREATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_GUILDCREATE> _instance;
} _CS_GUILDCREATE_default_instance_;
class CS_GUILDQUITDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_GUILDQUIT> _instance;
} _CS_GUILDQUIT_default_instance_;
class CS_GUILDKICKMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_GUILDKICKMEMBER> _instance;
} _CS_GUILDKICKMEMBER_default_instance_;
class CS_GUILDINVITEMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_GUILDINVITEMEMBER> _instance;
} _CS_GUILDINVITEMEMBER_default_instance_;
class SC_GUILDINVITEMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_GUILDINVITEMEMBER> _instance;
} _SC_GUILDINVITEMEMBER_default_instance_;
class CS_GUILDACCEPTINVITEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_GUILDACCEPTINVITE> _instance;
} _CS_GUILDACCEPTINVITE_default_instance_;
class CS_GUILDNEWLEADERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_GUILDNEWLEADER> _instance;
} _CS_GUILDNEWLEADER_default_instance_;
class SC_GUILDMEMBER_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_GUILDMEMBER_INFO> _instance;
} _SC_GUILDMEMBER_INFO_default_instance_;
class SC_GUILDMEMBER_ACTIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_GUILDMEMBER_ACTION> _instance;
} _SC_GUILDMEMBER_ACTION_default_instance_;
class CS_GUILDAPPLYMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_GUILDAPPLYMEMBER> _instance;
} _CS_GUILDAPPLYMEMBER_default_instance_;
class SC_GUILDAPPLYMEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_GUILDAPPLYMEMBER> _instance;
} _SC_GUILDAPPLYMEMBER_default_instance_;
class CS_GUILDACCEPTAPPLYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_GUILDACCEPTAPPLY> _instance;
} _CS_GUILDACCEPTAPPLY_default_instance_;
static void InitDefaultsscc_info_CS_ACHI_TAKE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ACHI_TAKE_default_instance_;
    new (ptr) ::CS_ACHI_TAKE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ACHI_TAKE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ACHI_TAKE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ACHI_TAKE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ACTIVE_NPC_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ACTIVE_NPC_default_instance_;
    new (ptr) ::CS_ACTIVE_NPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ACTIVE_NPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ACTIVE_NPC_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ACTIVE_NPC_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_CASTSKILL_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_CASTSKILL_default_instance_;
    new (ptr) ::CS_CASTSKILL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_CASTSKILL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_CASTSKILL_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_CASTSKILL_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_CHANGEMAP_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_CHANGEMAP_default_instance_;
    new (ptr) ::CS_CHANGEMAP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_CHANGEMAP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_CHANGEMAP_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_CHANGEMAP_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_CHANGE_PKMODE_default_instance_;
    new (ptr) ::CS_CHANGE_PKMODE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_CHANGE_PKMODE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_DIALOG_CLICK_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_DIALOG_CLICK_default_instance_;
    new (ptr) ::CS_DIALOG_CLICK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_DIALOG_CLICK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_DIALOG_CLICK_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_DIALOG_CLICK_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_EQUIP_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_EQUIP_default_instance_;
    new (ptr) ::CS_EQUIP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_EQUIP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_EQUIP_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_EQUIP_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_GUILDACCEPTAPPLY_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_GUILDACCEPTAPPLY_default_instance_;
    new (ptr) ::CS_GUILDACCEPTAPPLY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_GUILDACCEPTAPPLY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_GUILDACCEPTAPPLY_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_GUILDACCEPTAPPLY_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_GUILDACCEPTINVITE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_GUILDACCEPTINVITE_default_instance_;
    new (ptr) ::CS_GUILDACCEPTINVITE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_GUILDACCEPTINVITE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_GUILDACCEPTINVITE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_GUILDACCEPTINVITE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_GUILDAPPLYMEMBER_default_instance_;
    new (ptr) ::CS_GUILDAPPLYMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_GUILDAPPLYMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_GUILDCREATE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_GUILDCREATE_default_instance_;
    new (ptr) ::CS_GUILDCREATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_GUILDCREATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_GUILDCREATE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_GUILDCREATE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_GUILDINVITEMEMBER_default_instance_;
    new (ptr) ::CS_GUILDINVITEMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_GUILDINVITEMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_GUILDKICKMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_GUILDKICKMEMBER_default_instance_;
    new (ptr) ::CS_GUILDKICKMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_GUILDKICKMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_GUILDKICKMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_GUILDKICKMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_GUILDNEWLEADER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_GUILDNEWLEADER_default_instance_;
    new (ptr) ::CS_GUILDNEWLEADER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_GUILDNEWLEADER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_GUILDNEWLEADER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_GUILDNEWLEADER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_GUILDQUIT_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_GUILDQUIT_default_instance_;
    new (ptr) ::CS_GUILDQUIT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_GUILDQUIT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_GUILDQUIT_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_GUILDQUIT_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ITEM_COMBINE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ITEM_COMBINE_default_instance_;
    new (ptr) ::CS_ITEM_COMBINE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ITEM_COMBINE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ITEM_COMBINE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ITEM_COMBINE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ITEM_SPLIT_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ITEM_SPLIT_default_instance_;
    new (ptr) ::CS_ITEM_SPLIT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ITEM_SPLIT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ITEM_SPLIT_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ITEM_SPLIT_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ITEM_STORAGE_CHECKIN_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ITEM_STORAGE_CHECKIN_default_instance_;
    new (ptr) ::CS_ITEM_STORAGE_CHECKIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ITEM_STORAGE_CHECKIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ITEM_STORAGE_CHECKIN_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ITEM_STORAGE_CHECKIN_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ITEM_STORAGE_CHECKOUT_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ITEM_STORAGE_CHECKOUT_default_instance_;
    new (ptr) ::CS_ITEM_STORAGE_CHECKOUT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ITEM_STORAGE_CHECKOUT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ITEM_STORAGE_CHECKOUT_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ITEM_STORAGE_CHECKOUT_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ITEM_STORAGE_OPEN_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ITEM_STORAGE_OPEN_default_instance_;
    new (ptr) ::CS_ITEM_STORAGE_OPEN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ITEM_STORAGE_OPEN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ITEM_STORAGE_OPEN_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ITEM_STORAGE_OPEN_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ITEM_SWAP_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ITEM_SWAP_default_instance_;
    new (ptr) ::CS_ITEM_SWAP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ITEM_SWAP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ITEM_SWAP_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ITEM_SWAP_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ITEM_TIDY_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ITEM_TIDY_default_instance_;
    new (ptr) ::CS_ITEM_TIDY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ITEM_TIDY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ITEM_TIDY_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ITEM_TIDY_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_ITEM_USE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_ITEM_USE_default_instance_;
    new (ptr) ::CS_ITEM_USE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_ITEM_USE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ITEM_USE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ITEM_USE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_LOADMAP_SUCC_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_LOADMAP_SUCC_default_instance_;
    new (ptr) ::CS_LOADMAP_SUCC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_LOADMAP_SUCC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_LOADMAP_SUCC_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_LOADMAP_SUCC_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_MOVE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_MOVE_default_instance_;
    new (ptr) ::CS_MOVE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_MOVE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_MOVE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_MOVE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_REBORN_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_REBORN_default_instance_;
    new (ptr) ::CS_REBORN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_REBORN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_REBORN_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_REBORN_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_SKILL_BREAK_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_SKILL_BREAK_default_instance_;
    new (ptr) ::CS_SKILL_BREAK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_SKILL_BREAK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_SKILL_BREAK_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_SKILL_BREAK_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_SKILL_CHGTARGETPOS_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_SKILL_CHGTARGETPOS_default_instance_;
    new (ptr) ::CS_SKILL_CHGTARGETPOS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_SKILL_CHGTARGETPOS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_SKILL_CHGTARGETPOS_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_SKILL_CHGTARGETPOS_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TALK_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TALK_default_instance_;
    new (ptr) ::CS_TALK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TALK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TALK_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TALK_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TASK_SUBMIT_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TASK_SUBMIT_default_instance_;
    new (ptr) ::CS_TASK_SUBMIT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TASK_SUBMIT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TASK_SUBMIT_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TASK_SUBMIT_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TEAMACCEPTAPPLY_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TEAMACCEPTAPPLY_default_instance_;
    new (ptr) ::CS_TEAMACCEPTAPPLY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TEAMACCEPTAPPLY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TEAMACCEPTAPPLY_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TEAMACCEPTAPPLY_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TEAMACCEPTINVITE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TEAMACCEPTINVITE_default_instance_;
    new (ptr) ::CS_TEAMACCEPTINVITE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TEAMACCEPTINVITE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TEAMACCEPTINVITE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TEAMACCEPTINVITE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TEAMAPPLYMEMBER_default_instance_;
    new (ptr) ::CS_TEAMAPPLYMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TEAMAPPLYMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TEAMCREATE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TEAMCREATE_default_instance_;
    new (ptr) ::CS_TEAMCREATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TEAMCREATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TEAMCREATE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TEAMCREATE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TEAMINVITEMEMBER_default_instance_;
    new (ptr) ::CS_TEAMINVITEMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TEAMINVITEMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TEAMKICKMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TEAMKICKMEMBER_default_instance_;
    new (ptr) ::CS_TEAMKICKMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TEAMKICKMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TEAMKICKMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TEAMKICKMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TEAMNEWLEADER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TEAMNEWLEADER_default_instance_;
    new (ptr) ::CS_TEAMNEWLEADER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TEAMNEWLEADER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TEAMNEWLEADER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TEAMNEWLEADER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_TEAMQUIT_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_TEAMQUIT_default_instance_;
    new (ptr) ::CS_TEAMQUIT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_TEAMQUIT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_TEAMQUIT_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_TEAMQUIT_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_UNEQUIP_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_UNEQUIP_default_instance_;
    new (ptr) ::CS_UNEQUIP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_UNEQUIP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_UNEQUIP_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_UNEQUIP_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_ACHI_INFO_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ACHI_INFO_default_instance_;
    new (ptr) ::SC_ACHI_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ACHI_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_ACHI_INFO_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_ACHI_INFO_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_ACHI_INFO_Info_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_ACHI_INFO_Info_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ACHI_INFO_Info_default_instance_;
    new (ptr) ::SC_ACHI_INFO_Info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ACHI_INFO_Info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ACHI_INFO_Info_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ACHI_INFO_Info_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_ACTORATTRIB_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ACTORATTRIB_default_instance_;
    new (ptr) ::SC_ACTORATTRIB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ACTORATTRIB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ACTORATTRIB_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ACTORATTRIB_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_AOI_NEW_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_AOI_NEW_default_instance_;
    new (ptr) ::SC_AOI_NEW();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_AOI_NEW::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_AOI_NEW_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_AOI_NEW_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_AOI_REMOVE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_AOI_REMOVE_default_instance_;
    new (ptr) ::SC_AOI_REMOVE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_AOI_REMOVE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_AOI_REMOVE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_AOI_REMOVE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_AOI_UPDATE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_AOI_UPDATE_default_instance_;
    new (ptr) ::SC_AOI_UPDATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_AOI_UPDATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_AOI_UPDATE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_AOI_UPDATE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_ATTRIB_CHANGE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ATTRIB_CHANGE_default_instance_;
    new (ptr) ::SC_ATTRIB_CHANGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ATTRIB_CHANGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_ATTRIB_CHANGE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_ATTRIB_CHANGE_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_ATTRIB_CHANGE_Data_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_ATTRIB_CHANGE_Data_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ATTRIB_CHANGE_Data_default_instance_;
    new (ptr) ::SC_ATTRIB_CHANGE_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ATTRIB_CHANGE_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ATTRIB_CHANGE_Data_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ATTRIB_CHANGE_Data_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_CASTSKILL_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_CASTSKILL_default_instance_;
    new (ptr) ::SC_CASTSKILL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_CASTSKILL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_CASTSKILL_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_CASTSKILL_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_CHANGE_PKMODE_default_instance_;
    new (ptr) ::SC_CHANGE_PKMODE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_CHANGE_PKMODE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_COMMONDATA_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_COMMONDATA_default_instance_;
    new (ptr) ::SC_COMMONDATA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_COMMONDATA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_COMMONDATA_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_COMMONDATA_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_COMMONDATA_Data_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_COMMONDATA_Data_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_COMMONDATA_Data_default_instance_;
    new (ptr) ::SC_COMMONDATA_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_COMMONDATA_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_COMMONDATA_Data_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_COMMONDATA_Data_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_COOLDOWN_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_COOLDOWN_default_instance_;
    new (ptr) ::SC_COOLDOWN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_COOLDOWN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_COOLDOWN_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_COOLDOWN_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_COOLDOWN_Data_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_COOLDOWN_Data_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_COOLDOWN_Data_default_instance_;
    new (ptr) ::SC_COOLDOWN_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_COOLDOWN_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_COOLDOWN_Data_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_COOLDOWN_Data_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_DAMAGE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_DAMAGE_default_instance_;
    new (ptr) ::SC_DAMAGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_DAMAGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_DAMAGE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_DAMAGE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_DATACOUNT_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_DATACOUNT_default_instance_;
    new (ptr) ::SC_DATACOUNT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_DATACOUNT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_DATACOUNT_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_DATACOUNT_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_DATACOUNT_Data_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_DATACOUNT_Data_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_DATACOUNT_Data_default_instance_;
    new (ptr) ::SC_DATACOUNT_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_DATACOUNT_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_DATACOUNT_Data_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_DATACOUNT_Data_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_DEAD_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_DEAD_default_instance_;
    new (ptr) ::SC_DEAD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_DEAD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_DEAD_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_DEAD_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_DIALOG_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_DIALOG_default_instance_;
    new (ptr) ::SC_DIALOG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_DIALOG::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_DIALOG_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_DIALOG_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_DIALOG_dialog_link_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_DIALOG_dialog_link_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_DIALOG_dialog_link_default_instance_;
    new (ptr) ::SC_DIALOG_dialog_link();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_DIALOG_dialog_link::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_DIALOG_dialog_link_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_DIALOG_dialog_link_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_ENTERMAP_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ENTERMAP_default_instance_;
    new (ptr) ::SC_ENTERMAP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ENTERMAP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ENTERMAP_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ENTERMAP_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_GUILDAPPLYMEMBER_default_instance_;
    new (ptr) ::SC_GUILDAPPLYMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_GUILDAPPLYMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_GUILDINVITEMEMBER_default_instance_;
    new (ptr) ::SC_GUILDINVITEMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_GUILDINVITEMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_GUILDMEMBER_ACTION_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_GUILDMEMBER_ACTION_default_instance_;
    new (ptr) ::SC_GUILDMEMBER_ACTION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_GUILDMEMBER_ACTION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_GUILDMEMBER_ACTION_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_GUILDMEMBER_ACTION_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_GUILDMEMBER_INFO_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_GUILDMEMBER_INFO_default_instance_;
    new (ptr) ::SC_GUILDMEMBER_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_GUILDMEMBER_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_GUILDMEMBER_INFO_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_GUILDMEMBER_INFO_msg_2fzone_5fservice_2eproto}, {
      &scc_info_GuildMemberInfo_common_2fCommon_2eproto.base,}};

static void InitDefaultsscc_info_SC_ITEM_CHANGE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ITEM_CHANGE_default_instance_;
    new (ptr) ::SC_ITEM_CHANGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ITEM_CHANGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_ITEM_CHANGE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_ITEM_CHANGE_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_ITEM_CHANGE_ChangeData_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_ITEM_CHANGE_ChangeData_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ITEM_CHANGE_ChangeData_default_instance_;
    new (ptr) ::SC_ITEM_CHANGE_ChangeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ITEM_CHANGE_ChangeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ITEM_CHANGE_ChangeData_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ITEM_CHANGE_ChangeData_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_ITEM_DELETE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ITEM_DELETE_default_instance_;
    new (ptr) ::SC_ITEM_DELETE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ITEM_DELETE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ITEM_DELETE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ITEM_DELETE_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_ITEM_INFO_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ITEM_INFO_default_instance_;
    new (ptr) ::SC_ITEM_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ITEM_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ITEM_INFO_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ITEM_INFO_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_LOADMAP_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_LOADMAP_default_instance_;
    new (ptr) ::SC_LOADMAP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_LOADMAP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_LOADMAP_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_LOADMAP_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_MAPVAL_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_MAPVAL_default_instance_;
    new (ptr) ::SC_MAPVAL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_MAPVAL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_MAPVAL_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_MAPVAL_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_MAPVAL_MapVal_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_MAPVAL_MapVal_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_MAPVAL_MapVal_default_instance_;
    new (ptr) ::SC_MAPVAL_MapVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_MAPVAL_MapVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_MAPVAL_MapVal_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_MAPVAL_MapVal_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_PLAYERINFO_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_PLAYERINFO_default_instance_;
    new (ptr) ::SC_PLAYERINFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_PLAYERINFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_PLAYERINFO_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_PLAYERINFO_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_SKILL_BREAK_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_SKILL_BREAK_default_instance_;
    new (ptr) ::SC_SKILL_BREAK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_SKILL_BREAK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SKILL_BREAK_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SKILL_BREAK_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_SKILL_DAMAGE_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_SKILL_DAMAGE_default_instance_;
    new (ptr) ::SC_SKILL_DAMAGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_SKILL_DAMAGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_SKILL_DAMAGE_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_SKILL_DAMAGE_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_SKILL_DAMAGE_DamageInfo_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_SKILL_DAMAGE_DamageInfo_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_SKILL_DAMAGE_DamageInfo_default_instance_;
    new (ptr) ::SC_SKILL_DAMAGE_DamageInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_SKILL_DAMAGE_DamageInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SKILL_DAMAGE_DamageInfo_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SKILL_DAMAGE_DamageInfo_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_SKILL_EFFACT_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_SKILL_EFFACT_default_instance_;
    new (ptr) ::SC_SKILL_EFFACT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_SKILL_EFFACT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SKILL_EFFACT_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SKILL_EFFACT_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_SKILL_STUN_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_SKILL_STUN_default_instance_;
    new (ptr) ::SC_SKILL_STUN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_SKILL_STUN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SKILL_STUN_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SKILL_STUN_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_STATUS_ACTION_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_STATUS_ACTION_default_instance_;
    new (ptr) ::SC_STATUS_ACTION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_STATUS_ACTION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_STATUS_ACTION_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_STATUS_ACTION_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_STATUS_INFO_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_STATUS_INFO_default_instance_;
    new (ptr) ::SC_STATUS_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_STATUS_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_STATUS_INFO_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_STATUS_INFO_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_STATUS_INFO_Data_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_STATUS_INFO_Data_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_STATUS_INFO_Data_default_instance_;
    new (ptr) ::SC_STATUS_INFO_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_STATUS_INFO_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_STATUS_INFO_Data_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_STATUS_INFO_Data_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_STATUS_LIST_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_STATUS_LIST_default_instance_;
    new (ptr) ::SC_STATUS_LIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_STATUS_LIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_STATUS_LIST_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_STATUS_LIST_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_STATUS_LIST_Data_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_STATUS_LIST_Data_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_STATUS_LIST_Data_default_instance_;
    new (ptr) ::SC_STATUS_LIST_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_STATUS_LIST_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_STATUS_LIST_Data_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_STATUS_LIST_Data_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_SYSVAR_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_SYSVAR_default_instance_;
    new (ptr) ::SC_SYSVAR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_SYSVAR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_SYSVAR_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_SYSVAR_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_SYSVAR_Data_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_SYSVAR_Data_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_SYSVAR_Data_default_instance_;
    new (ptr) ::SC_SYSVAR_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_SYSVAR_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SYSVAR_Data_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SYSVAR_Data_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_TALK_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_TALK_default_instance_;
    new (ptr) ::SC_TALK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_TALK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_TALK_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_TALK_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_ITEM_INFO_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_TASK_DATA_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_TASK_DATA_default_instance_;
    new (ptr) ::SC_TASK_DATA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_TASK_DATA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_TASK_DATA_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_TASK_DATA_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_TASK_INFO_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_TASK_INFO_default_instance_;
    new (ptr) ::SC_TASK_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_TASK_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_TASK_INFO_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_TASK_INFO_msg_2fzone_5fservice_2eproto}, {
      &scc_info_SC_TASK_INFO_Info_msg_2fzone_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_TASK_INFO_Info_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_TASK_INFO_Info_default_instance_;
    new (ptr) ::SC_TASK_INFO_Info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_TASK_INFO_Info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_TASK_INFO_Info_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_TASK_INFO_Info_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_TEAMAPPLYMEMBER_default_instance_;
    new (ptr) ::SC_TEAMAPPLYMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_TEAMAPPLYMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_TEAMINVITEMEMBER_default_instance_;
    new (ptr) ::SC_TEAMINVITEMEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_TEAMINVITEMEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_TEAMMEMBER_ACTION_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_TEAMMEMBER_ACTION_default_instance_;
    new (ptr) ::SC_TEAMMEMBER_ACTION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_TEAMMEMBER_ACTION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_TEAMMEMBER_ACTION_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_TEAMMEMBER_ACTION_msg_2fzone_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_TEAMMEMBER_INFO_msg_2fzone_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_TEAMMEMBER_INFO_default_instance_;
    new (ptr) ::SC_TEAMMEMBER_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_TEAMMEMBER_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_TEAMMEMBER_INFO_msg_2fzone_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_TEAMMEMBER_INFO_msg_2fzone_5fservice_2eproto}, {
      &scc_info_TeamMemberInfo_common_2fCommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2fzone_5fservice_2eproto[92];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2fzone_5fservice_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2fzone_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_2fzone_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_LOADMAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_LOADMAP, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_LOADMAP, posx_),
  PROTOBUF_FIELD_OFFSET(::SC_LOADMAP, posy_),
  PROTOBUF_FIELD_OFFSET(::SC_LOADMAP, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_LOADMAP_SUCC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, playerid_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, worldid_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, name_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, prof_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, baselook_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, exp_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, level_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, viplev_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, pkval_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, honor_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, campid_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, money_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, money_bind_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, gold_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, gold_bind_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, bag_size_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, stroge_size_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, achi_point_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, hp_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, mp_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, fp_),
  PROTOBUF_FIELD_OFFSET(::SC_PLAYERINFO, np_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ACTORATTRIB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ACTORATTRIB, attrib_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_COMMONDATA_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_COMMONDATA_Data, keyidx_),
  PROTOBUF_FIELD_OFFSET(::SC_COMMONDATA_Data, data0_),
  PROTOBUF_FIELD_OFFSET(::SC_COMMONDATA_Data, data1_),
  PROTOBUF_FIELD_OFFSET(::SC_COMMONDATA_Data, data2_),
  PROTOBUF_FIELD_OFFSET(::SC_COMMONDATA_Data, data3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_COMMONDATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_COMMONDATA, datalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_DATACOUNT_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_DATACOUNT_Data, type_),
  PROTOBUF_FIELD_OFFSET(::SC_DATACOUNT_Data, idx_),
  PROTOBUF_FIELD_OFFSET(::SC_DATACOUNT_Data, data_),
  PROTOBUF_FIELD_OFFSET(::SC_DATACOUNT_Data, next_reset_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_DATACOUNT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_DATACOUNT, datalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_COOLDOWN_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_COOLDOWN_Data, type_),
  PROTOBUF_FIELD_OFFSET(::SC_COOLDOWN_Data, idx_),
  PROTOBUF_FIELD_OFFSET(::SC_COOLDOWN_Data, expiretime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_COOLDOWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_COOLDOWN, datalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, keyidx_),
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, data0_),
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, data1_),
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, data2_),
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, data3_),
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, str0_),
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, str1_),
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, str2_),
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR_Data, str3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_SYSVAR, datalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ENTERMAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ENTERMAP, x_),
  PROTOBUF_FIELD_OFFSET(::SC_ENTERMAP, y_),
  PROTOBUF_FIELD_OFFSET(::SC_ENTERMAP, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, name_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, actortype_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, baselook_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, prof_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, lev_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, campid_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, hp_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, hpmax_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, movespd_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, ownerid_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, posx_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, posy_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, face_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, weaponid_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, armorid_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, guildid_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_NEW, guildname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_AOI_REMOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_AOI_REMOVE, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_REMOVE, idlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_AOI_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_AOI_UPDATE, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_UPDATE, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_UPDATE, posx_),
  PROTOBUF_FIELD_OFFSET(::SC_AOI_UPDATE, posy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_MAPVAL_MapVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_MAPVAL_MapVal, key_),
  PROTOBUF_FIELD_OFFSET(::SC_MAPVAL_MapVal, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_MAPVAL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_MAPVAL, state_),
  PROTOBUF_FIELD_OFFSET(::SC_MAPVAL, map_val_set_),
  PROTOBUF_FIELD_OFFSET(::SC_MAPVAL, user_map_val_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ATTRIB_CHANGE_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ATTRIB_CHANGE_Data, actype_),
  PROTOBUF_FIELD_OFFSET(::SC_ATTRIB_CHANGE_Data, val_),
  PROTOBUF_FIELD_OFFSET(::SC_ATTRIB_CHANGE_Data, valstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ATTRIB_CHANGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ATTRIB_CHANGE, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_ATTRIB_CHANGE, datalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST_Data, statusid_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST_Data, statustype_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST_Data, statuslev_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST_Data, power_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST_Data, idcaster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_LIST, status_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, statusid_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, statustype_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, statuslev_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, power_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, sec_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, times_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, laststamp_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, idcaster_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO_Data, ispause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_INFO, statuslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_ACTION, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_ACTION, action_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_ACTION, statusid_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_ACTION, statustype_),
  PROTOBUF_FIELD_OFFSET(::SC_STATUS_ACTION, statuslev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_MOVE, mapid_),
  PROTOBUF_FIELD_OFFSET(::CS_MOVE, x_),
  PROTOBUF_FIELD_OFFSET(::CS_MOVE, y_),
  PROTOBUF_FIELD_OFFSET(::CS_MOVE, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_CHANGEMAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_CHANGEMAP, mapid_),
  PROTOBUF_FIELD_OFFSET(::CS_CHANGEMAP, leavepoint_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_CASTSKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_CASTSKILL, mapid_),
  PROTOBUF_FIELD_OFFSET(::CS_CASTSKILL, skill_id_),
  PROTOBUF_FIELD_OFFSET(::CS_CASTSKILL, target_id_),
  PROTOBUF_FIELD_OFFSET(::CS_CASTSKILL, x_),
  PROTOBUF_FIELD_OFFSET(::CS_CASTSKILL, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_CASTSKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_CASTSKILL, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_CASTSKILL, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_CASTSKILL, skill_id_),
  PROTOBUF_FIELD_OFFSET(::SC_CASTSKILL, target_id_),
  PROTOBUF_FIELD_OFFSET(::SC_CASTSKILL, x_),
  PROTOBUF_FIELD_OFFSET(::SC_CASTSKILL, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_DAMAGE_DamageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_DAMAGE_DamageInfo, target_id_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_DAMAGE_DamageInfo, damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_DAMAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_DAMAGE, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_DAMAGE, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_DAMAGE, skill_id_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_DAMAGE, damagelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_SKILL_BREAK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_SKILL_BREAK, mapid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_BREAK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_BREAK, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_BREAK, actor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_SKILL_CHGTARGETPOS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_SKILL_CHGTARGETPOS, x_),
  PROTOBUF_FIELD_OFFSET(::CS_SKILL_CHGTARGETPOS, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_STUN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_STUN, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_STUN, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_STUN, skill_id_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_STUN, stun_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_EFFACT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_EFFACT, mapid_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_EFFACT, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_SKILL_EFFACT, skill_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_DAMAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_DAMAGE, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_DAMAGE, attacker_id_),
  PROTOBUF_FIELD_OFFSET(::SC_DAMAGE, damage_),
  PROTOBUF_FIELD_OFFSET(::SC_DAMAGE, hittype_),
  PROTOBUF_FIELD_OFFSET(::SC_DAMAGE, crtical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_DEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_DEAD, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_DEAD, attacker_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_CHANGE_PKMODE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_CHANGE_PKMODE, pkmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_CHANGE_PKMODE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_CHANGE_PKMODE, pkmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_REBORN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_REBORN, reborn_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, actor_id_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, item_id_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, position_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, grid_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, pile_num_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, dura_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, dura_limit_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, expire_time_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, addition_lev_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_INFO, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_CHANGE_ChangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_CHANGE_ChangeData, change_type_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_CHANGE_ChangeData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_CHANGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_CHANGE, item_id_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_CHANGE, position_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_CHANGE, change_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_DELETE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_DELETE, item_id_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_DELETE, position_),
  PROTOBUF_FIELD_OFFSET(::SC_ITEM_DELETE, grid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SWAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SWAP, position_),
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SWAP, grid1_),
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SWAP, grid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SPLIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SPLIT, position_),
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SPLIT, grid1_),
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SPLIT, grid2_),
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_SPLIT, split_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_COMBINE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_COMBINE, position_),
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_COMBINE, grid1_),
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_COMBINE, grid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_TIDY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_TIDY, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_USE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_USE, grid_),
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_USE, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_STORAGE_OPEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_STORAGE_CHECKOUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_STORAGE_CHECKOUT, grid_in_storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_STORAGE_CHECKIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ITEM_STORAGE_CHECKIN, grid_in_package_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_EQUIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_EQUIP, grid_in_package_),
  PROTOBUF_FIELD_OFFSET(::CS_EQUIP, grid_in_equip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_UNEQUIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_UNEQUIP, grid_in_equip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TALK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_TALK, channel_),
  PROTOBUF_FIELD_OFFSET(::CS_TALK, words_),
  PROTOBUF_FIELD_OFFSET(::CS_TALK, reciver_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_TALK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_TALK, channel_),
  PROTOBUF_FIELD_OFFSET(::SC_TALK, words_),
  PROTOBUF_FIELD_OFFSET(::SC_TALK, sender_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TALK, sender_name_),
  PROTOBUF_FIELD_OFFSET(::SC_TALK, sender_sign_),
  PROTOBUF_FIELD_OFFSET(::SC_TALK, sender_viplev_),
  PROTOBUF_FIELD_OFFSET(::SC_TALK, send_time_),
  PROTOBUF_FIELD_OFFSET(::SC_TALK, reciver_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TALK, item_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, task_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, accept_time_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, finish_time_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, expire_time_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, daycount_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, daycount_max_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, state_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, num1_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, num2_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, num3_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO_Info, num4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_TASK_INFO, task_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_TASK_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_TASK_DATA, task_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_DATA, idx_),
  PROTOBUF_FIELD_OFFSET(::SC_TASK_DATA, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TASK_SUBMIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_TASK_SUBMIT, task_id_),
  PROTOBUF_FIELD_OFFSET(::CS_TASK_SUBMIT, submit_multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ACTIVE_NPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ACTIVE_NPC, npc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG_dialog_link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG_dialog_link, style_),
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG_dialog_link, txt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG, dialog_id_),
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG, dialog_type_),
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG, dialog_title_),
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG, dialog_txt_),
  PROTOBUF_FIELD_OFFSET(::SC_DIALOG, dialog_link_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_DIALOG_CLICK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_DIALOG_CLICK, dialog_id_),
  PROTOBUF_FIELD_OFFSET(::CS_DIALOG_CLICK, dialog_button_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ACHI_INFO_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ACHI_INFO_Info, achi_id_),
  PROTOBUF_FIELD_OFFSET(::SC_ACHI_INFO_Info, take_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ACHI_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ACHI_INFO, finish_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_ACHI_TAKE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_ACHI_TAKE, achi_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMCREATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMQUIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMKICKMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMKICKMEMBER, member_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMINVITEMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMINVITEMEMBER, invitee_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_TEAMINVITEMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_TEAMINVITEMEMBER, team_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TEAMINVITEMEMBER, inviter_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TEAMINVITEMEMBER, inviter_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMACCEPTINVITE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMACCEPTINVITE, team_id_),
  PROTOBUF_FIELD_OFFSET(::CS_TEAMACCEPTINVITE, inviter_id_),
  PROTOBUF_FIELD_OFFSET(::CS_TEAMACCEPTINVITE, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMNEWLEADER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMNEWLEADER, new_leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_INFO, member_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_ACTION, action_),
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_ACTION, operator_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_ACTION, member_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_ACTION, member_lev_),
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_ACTION, member_name_),
  PROTOBUF_FIELD_OFFSET(::SC_TEAMMEMBER_ACTION, member_online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMAPPLYMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMAPPLYMEMBER, respondent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_TEAMAPPLYMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_TEAMAPPLYMEMBER, applicant_id_),
  PROTOBUF_FIELD_OFFSET(::SC_TEAMAPPLYMEMBER, applicant_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMACCEPTAPPLY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_TEAMACCEPTAPPLY, applicant_id_),
  PROTOBUF_FIELD_OFFSET(::CS_TEAMACCEPTAPPLY, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDCREATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDQUIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDKICKMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDKICKMEMBER, member_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDINVITEMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDINVITEMEMBER, invitee_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_GUILDINVITEMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_GUILDINVITEMEMBER, guild_id_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDINVITEMEMBER, inviter_id_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDINVITEMEMBER, inviter_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDACCEPTINVITE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDACCEPTINVITE, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CS_GUILDACCEPTINVITE, inviter_id_),
  PROTOBUF_FIELD_OFFSET(::CS_GUILDACCEPTINVITE, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDNEWLEADER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDNEWLEADER, new_leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_INFO, member_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, action_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, operator_id_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, member_id_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, member_lev_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, member_name_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, member_online_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, member_rank_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, member_score_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDMEMBER_ACTION, member_last_logout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDAPPLYMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDAPPLYMEMBER, respondent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_GUILDAPPLYMEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_GUILDAPPLYMEMBER, applicant_id_),
  PROTOBUF_FIELD_OFFSET(::SC_GUILDAPPLYMEMBER, applicant_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDACCEPTAPPLY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_GUILDACCEPTAPPLY, applicant_id_),
  PROTOBUF_FIELD_OFFSET(::CS_GUILDACCEPTAPPLY, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SC_LOADMAP)},
  { 9, -1, sizeof(::CS_LOADMAP_SUCC)},
  { 14, -1, sizeof(::SC_PLAYERINFO)},
  { 41, -1, sizeof(::SC_ACTORATTRIB)},
  { 47, -1, sizeof(::SC_COMMONDATA_Data)},
  { 57, -1, sizeof(::SC_COMMONDATA)},
  { 63, -1, sizeof(::SC_DATACOUNT_Data)},
  { 72, -1, sizeof(::SC_DATACOUNT)},
  { 78, -1, sizeof(::SC_COOLDOWN_Data)},
  { 86, -1, sizeof(::SC_COOLDOWN)},
  { 92, -1, sizeof(::SC_SYSVAR_Data)},
  { 106, -1, sizeof(::SC_SYSVAR)},
  { 112, -1, sizeof(::SC_ENTERMAP)},
  { 120, -1, sizeof(::SC_AOI_NEW)},
  { 144, -1, sizeof(::SC_AOI_REMOVE)},
  { 151, -1, sizeof(::SC_AOI_UPDATE)},
  { 160, -1, sizeof(::SC_MAPVAL_MapVal)},
  { 167, -1, sizeof(::SC_MAPVAL)},
  { 175, -1, sizeof(::SC_ATTRIB_CHANGE_Data)},
  { 183, -1, sizeof(::SC_ATTRIB_CHANGE)},
  { 190, -1, sizeof(::SC_STATUS_LIST_Data)},
  { 200, -1, sizeof(::SC_STATUS_LIST)},
  { 207, -1, sizeof(::SC_STATUS_INFO_Data)},
  { 221, -1, sizeof(::SC_STATUS_INFO)},
  { 228, -1, sizeof(::SC_STATUS_ACTION)},
  { 238, -1, sizeof(::CS_MOVE)},
  { 247, -1, sizeof(::CS_CHANGEMAP)},
  { 254, -1, sizeof(::CS_CASTSKILL)},
  { 264, -1, sizeof(::SC_CASTSKILL)},
  { 275, -1, sizeof(::SC_SKILL_DAMAGE_DamageInfo)},
  { 282, -1, sizeof(::SC_SKILL_DAMAGE)},
  { 291, -1, sizeof(::CS_SKILL_BREAK)},
  { 297, -1, sizeof(::SC_SKILL_BREAK)},
  { 304, -1, sizeof(::CS_SKILL_CHGTARGETPOS)},
  { 311, -1, sizeof(::SC_SKILL_STUN)},
  { 320, -1, sizeof(::SC_SKILL_EFFACT)},
  { 328, -1, sizeof(::SC_DAMAGE)},
  { 338, -1, sizeof(::SC_DEAD)},
  { 345, -1, sizeof(::CS_CHANGE_PKMODE)},
  { 351, -1, sizeof(::SC_CHANGE_PKMODE)},
  { 357, -1, sizeof(::CS_REBORN)},
  { 363, -1, sizeof(::SC_ITEM_INFO)},
  { 378, -1, sizeof(::SC_ITEM_CHANGE_ChangeData)},
  { 385, -1, sizeof(::SC_ITEM_CHANGE)},
  { 393, -1, sizeof(::SC_ITEM_DELETE)},
  { 401, -1, sizeof(::CS_ITEM_SWAP)},
  { 409, -1, sizeof(::CS_ITEM_SPLIT)},
  { 418, -1, sizeof(::CS_ITEM_COMBINE)},
  { 426, -1, sizeof(::CS_ITEM_TIDY)},
  { 432, -1, sizeof(::CS_ITEM_USE)},
  { 439, -1, sizeof(::CS_ITEM_STORAGE_OPEN)},
  { 444, -1, sizeof(::CS_ITEM_STORAGE_CHECKOUT)},
  { 450, -1, sizeof(::CS_ITEM_STORAGE_CHECKIN)},
  { 456, -1, sizeof(::CS_EQUIP)},
  { 463, -1, sizeof(::CS_UNEQUIP)},
  { 469, -1, sizeof(::CS_TALK)},
  { 477, -1, sizeof(::SC_TALK)},
  { 491, -1, sizeof(::SC_TASK_INFO_Info)},
  { 507, -1, sizeof(::SC_TASK_INFO)},
  { 513, -1, sizeof(::SC_TASK_DATA)},
  { 521, -1, sizeof(::CS_TASK_SUBMIT)},
  { 528, -1, sizeof(::CS_ACTIVE_NPC)},
  { 534, -1, sizeof(::SC_DIALOG_dialog_link)},
  { 541, -1, sizeof(::SC_DIALOG)},
  { 551, -1, sizeof(::CS_DIALOG_CLICK)},
  { 558, -1, sizeof(::SC_ACHI_INFO_Info)},
  { 565, -1, sizeof(::SC_ACHI_INFO)},
  { 571, -1, sizeof(::CS_ACHI_TAKE)},
  { 577, -1, sizeof(::CS_TEAMCREATE)},
  { 582, -1, sizeof(::CS_TEAMQUIT)},
  { 587, -1, sizeof(::CS_TEAMKICKMEMBER)},
  { 593, -1, sizeof(::CS_TEAMINVITEMEMBER)},
  { 599, -1, sizeof(::SC_TEAMINVITEMEMBER)},
  { 607, -1, sizeof(::CS_TEAMACCEPTINVITE)},
  { 615, -1, sizeof(::CS_TEAMNEWLEADER)},
  { 621, -1, sizeof(::SC_TEAMMEMBER_INFO)},
  { 627, -1, sizeof(::SC_TEAMMEMBER_ACTION)},
  { 638, -1, sizeof(::CS_TEAMAPPLYMEMBER)},
  { 644, -1, sizeof(::SC_TEAMAPPLYMEMBER)},
  { 651, -1, sizeof(::CS_TEAMACCEPTAPPLY)},
  { 658, -1, sizeof(::CS_GUILDCREATE)},
  { 663, -1, sizeof(::CS_GUILDQUIT)},
  { 668, -1, sizeof(::CS_GUILDKICKMEMBER)},
  { 674, -1, sizeof(::CS_GUILDINVITEMEMBER)},
  { 680, -1, sizeof(::SC_GUILDINVITEMEMBER)},
  { 688, -1, sizeof(::CS_GUILDACCEPTINVITE)},
  { 696, -1, sizeof(::CS_GUILDNEWLEADER)},
  { 702, -1, sizeof(::SC_GUILDMEMBER_INFO)},
  { 708, -1, sizeof(::SC_GUILDMEMBER_ACTION)},
  { 722, -1, sizeof(::CS_GUILDAPPLYMEMBER)},
  { 728, -1, sizeof(::SC_GUILDAPPLYMEMBER)},
  { 735, -1, sizeof(::CS_GUILDACCEPTAPPLY)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_LOADMAP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_LOADMAP_SUCC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_PLAYERINFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ACTORATTRIB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_COMMONDATA_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_COMMONDATA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_DATACOUNT_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_DATACOUNT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_COOLDOWN_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_COOLDOWN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_SYSVAR_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_SYSVAR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ENTERMAP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_AOI_NEW_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_AOI_REMOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_AOI_UPDATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_MAPVAL_MapVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_MAPVAL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ATTRIB_CHANGE_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ATTRIB_CHANGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_STATUS_LIST_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_STATUS_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_STATUS_INFO_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_STATUS_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_STATUS_ACTION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_MOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_CHANGEMAP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_CASTSKILL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_CASTSKILL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_SKILL_DAMAGE_DamageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_SKILL_DAMAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_SKILL_BREAK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_SKILL_BREAK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_SKILL_CHGTARGETPOS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_SKILL_STUN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_SKILL_EFFACT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_DAMAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_DEAD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_CHANGE_PKMODE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_CHANGE_PKMODE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_REBORN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ITEM_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ITEM_CHANGE_ChangeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ITEM_CHANGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ITEM_DELETE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ITEM_SWAP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ITEM_SPLIT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ITEM_COMBINE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ITEM_TIDY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ITEM_USE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ITEM_STORAGE_OPEN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ITEM_STORAGE_CHECKOUT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ITEM_STORAGE_CHECKIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_EQUIP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_UNEQUIP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TALK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_TALK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_TASK_INFO_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_TASK_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_TASK_DATA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TASK_SUBMIT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ACTIVE_NPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_DIALOG_dialog_link_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_DIALOG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_DIALOG_CLICK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ACHI_INFO_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ACHI_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_ACHI_TAKE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TEAMCREATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TEAMQUIT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TEAMKICKMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TEAMINVITEMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_TEAMINVITEMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TEAMACCEPTINVITE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TEAMNEWLEADER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_TEAMMEMBER_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_TEAMMEMBER_ACTION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TEAMAPPLYMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_TEAMAPPLYMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_TEAMACCEPTAPPLY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_GUILDCREATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_GUILDQUIT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_GUILDKICKMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_GUILDINVITEMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_GUILDINVITEMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_GUILDACCEPTINVITE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_GUILDNEWLEADER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_GUILDMEMBER_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_GUILDMEMBER_ACTION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_GUILDAPPLYMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_GUILDAPPLYMEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_GUILDACCEPTAPPLY_default_instance_),
};

const char descriptor_table_protodef_msg_2fzone_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026msg/zone_service.proto\032\020msg/ts_cmd.pro"
  "to\032\023common/Common.proto\"M\n\nSC_LOADMAP\022\r\n"
  "\005mapid\030\001 \001(\r\022\014\n\004posx\030\003 \001(\002\022\014\n\004posy\030\004 \001(\002"
  "\022\014\n\004face\030\005 \001(\002:\006\232\?\003\030\351\007\"\031\n\017CS_LOADMAP_SUC"
  "C:\006\232\?\003\020\351\007\"\361\002\n\rSC_PLAYERINFO\022\020\n\010playerid\030"
  "\001 \001(\004\022\017\n\007worldid\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004"
  "prof\030\004 \001(\r\022\020\n\010baselook\030\005 \001(\r\022\013\n\003exp\030\006 \001("
  "\r\022\r\n\005level\030\007 \001(\r\022\016\n\006viplev\030\010 \001(\r\022\r\n\005pkva"
  "l\030\t \001(\r\022\r\n\005honor\030\n \001(\r\022\016\n\006campid\030\013 \001(\r\022\r"
  "\n\005money\030\014 \001(\r\022\022\n\nmoney_bind\030\r \001(\r\022\014\n\004gol"
  "d\030\016 \001(\r\022\021\n\tgold_bind\030\017 \001(\r\022\020\n\010bag_size\030\020"
  " \001(\r\022\023\n\013stroge_size\030\021 \001(\r\022\022\n\nachi_point\030"
  "\022 \001(\r\022\n\n\002hp\030\036 \001(\r\022\n\n\002mp\030\037 \001(\r\022\n\n\002fp\030  \001("
  "\r\022\n\n\002np\030! \001(\r:\006\232\?\003\030\353\007\"-\n\016SC_ACTORATTRIB\022"
  "\023\n\013attrib_list\030\001 \003(\r:\006\232\?\003\030\354\007\"\222\001\n\rSC_COMM"
  "ONDATA\022%\n\010datalist\030\001 \003(\0132\023.SC_COMMONDATA"
  ".Data\032R\n\004Data\022\016\n\006keyidx\030\001 \001(\r\022\r\n\005data0\030\002"
  " \001(\004\022\r\n\005data1\030\003 \001(\004\022\r\n\005data2\030\004 \001(\004\022\r\n\005da"
  "ta3\030\005 \001(\004:\006\232\?\003\030\355\007\"\206\001\n\014SC_DATACOUNT\022$\n\010da"
  "talist\030\001 \003(\0132\022.SC_DATACOUNT.Data\032H\n\004Data"
  "\022\014\n\004type\030\001 \001(\r\022\013\n\003idx\030\002 \001(\r\022\014\n\004data\030\003 \001("
  "\004\022\027\n\017next_reset_time\030\004 \001(\r:\006\232\?\003\030\356\007\"q\n\013SC"
  "_COOLDOWN\022#\n\010datalist\030\001 \003(\0132\021.SC_COOLDOW"
  "N.Data\0325\n\004Data\022\014\n\004type\030\001 \001(\r\022\013\n\003idx\030\002 \001("
  "\r\022\022\n\nexpiretime\030\003 \001(\r:\006\232\?\003\030\360\007\"\303\001\n\tSC_SYS"
  "VAR\022!\n\010datalist\030\001 \003(\0132\017.SC_SYSVAR.Data\032\212"
  "\001\n\004Data\022\016\n\006keyidx\030\001 \001(\r\022\r\n\005data0\030\002 \001(\004\022\r"
  "\n\005data1\030\003 \001(\004\022\r\n\005data2\030\004 \001(\004\022\r\n\005data3\030\005 "
  "\001(\004\022\014\n\004str0\030\006 \001(\t\022\014\n\004str1\030\007 \001(\t\022\014\n\004str2\030"
  "\010 \001(\t\022\014\n\004str3\030\t \001(\t:\006\232\?\003\030\357\007\"9\n\013SC_ENTERM"
  "AP\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\014\n\004face\030\003 \001(\002:\006"
  "\232\?\003\030\352\007\"\301\002\n\nSC_AOI_NEW\022\r\n\005mapid\030\001 \001(\r\022\020\n\010"
  "actor_id\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\021\n\tactortyp"
  "e\030\004 \001(\r\022\020\n\010baselook\030\005 \001(\r\022\014\n\004prof\030\006 \001(\r\022"
  "\013\n\003lev\030\007 \001(\r\022\016\n\006campid\030\010 \001(\r\022\n\n\002hp\030\t \001(\r"
  "\022\r\n\005hpmax\030\n \001(\r\022\017\n\007movespd\030\013 \001(\r\022\017\n\007owne"
  "rid\030\014 \001(\004\022\014\n\004posx\030\r \001(\002\022\014\n\004posy\030\016 \001(\002\022\014\n"
  "\004face\030\017 \001(\002\022\020\n\010weaponid\030\024 \001(\r\022\017\n\007armorid"
  "\030\025 \001(\r\022\017\n\007guildid\030\036 \001(\r\022\021\n\tguildname\030\037 \001"
  "(\t:\006\232\?\003\030\374\007\"6\n\rSC_AOI_REMOVE\022\r\n\005mapid\030\001 \001"
  "(\r\022\016\n\006idlist\030\002 \003(\004:\006\232\?\003\030\375\007\"T\n\rSC_AOI_UPD"
  "ATE\022\r\n\005mapid\030\001 \001(\r\022\020\n\010actor_id\030\002 \001(\004\022\014\n\004"
  "posx\030\003 \001(\002\022\014\n\004posy\030\004 \001(\002:\006\232\?\003\030\376\007\"\342\001\n\tSC_"
  "MAPVAL\022\037\n\005state\030\001 \001(\0162\020.SC_MAPVAL.State\022"
  "&\n\013map_val_set\030\002 \003(\0132\021.SC_MAPVAL.MapVal\022"
  "+\n\020user_map_val_set\030\003 \003(\0132\021.SC_MAPVAL.Ma"
  "pVal\032$\n\006MapVal\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001"
  "(\003\"1\n\005State\022\023\n\017SYNC_MAPVAL_ALL\020\000\022\023\n\017SYNC"
  "_MAPVAL_ONE\020\001:\006\232\?\003\030\361\007\"\213\001\n\020SC_ATTRIB_CHAN"
  "GE\022\020\n\010actor_id\030\001 \001(\004\022(\n\010datalist\030\002 \003(\0132\026"
  ".SC_ATTRIB_CHANGE.Data\0323\n\004Data\022\016\n\006actype"
  "\030\001 \001(\r\022\013\n\003val\030\002 \001(\r\022\016\n\006valstr\030\003 \001(\t:\006\232\?\003"
  "\030\216\010\"\267\001\n\016SC_STATUS_LIST\022\020\n\010actor_id\030\001 \001(\004"
  "\022)\n\013status_list\030\002 \003(\0132\024.SC_STATUS_LIST.D"
  "ata\032`\n\004Data\022\020\n\010statusid\030\001 \001(\r\022\022\n\nstatust"
  "ype\030\002 \001(\r\022\021\n\tstatuslev\030\003 \001(\r\022\r\n\005power\030\004 "
  "\001(\005\022\020\n\010idcaster\030\010 \001(\004:\006\232\?\003\030\221\010\"\367\001\n\016SC_STA"
  "TUS_INFO\022\020\n\010actor_id\030\001 \001(\004\022(\n\nstatuslist"
  "\030\002 \003(\0132\024.SC_STATUS_INFO.Data\032\240\001\n\004Data\022\020\n"
  "\010statusid\030\001 \001(\r\022\022\n\nstatustype\030\002 \001(\r\022\021\n\ts"
  "tatuslev\030\003 \001(\r\022\r\n\005power\030\004 \001(\005\022\013\n\003sec\030\005 \001"
  "(\005\022\r\n\005times\030\006 \001(\005\022\021\n\tlaststamp\030\007 \001(\r\022\020\n\010"
  "idcaster\030\010 \001(\004\022\017\n\007ispause\030\t \001(\010:\006\232\?\003\030\223\010\""
  "\322\001\n\020SC_STATUS_ACTION\022\020\n\010actor_id\030\001 \001(\004\022("
  "\n\006action\030\002 \001(\0162\030.SC_STATUS_ACTION.ACTION"
  "\022\020\n\010statusid\030\003 \001(\r\022\022\n\nstatustype\030\004 \001(\r\022\021"
  "\n\tstatuslev\030\005 \001(\r\"A\n\006ACTION\022\021\n\rSTATUS_AT"
  "TACH\020\000\022\021\n\rSTATUS_DETACH\020\001\022\021\n\rSTATUS_EFFE"
  "CT\020\002:\006\232\?\003\030\224\010\"D\n\007CS_MOVE\022\r\n\005mapid\030\001 \001(\004\022\t"
  "\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\014\n\004face\030\004 \001(\002:\006\232\?\003\020"
  "\352\007\"=\n\014CS_CHANGEMAP\022\r\n\005mapid\030\001 \001(\004\022\026\n\016lea"
  "vepoint_idx\030\002 \001(\r:\006\232\?\003\020\353\007\"`\n\014CS_CASTSKIL"
  "L\022\r\n\005mapid\030\001 \001(\004\022\020\n\010skill_id\030\002 \001(\r\022\021\n\tta"
  "rget_id\030\003 \001(\004\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002:\006\232\?\003"
  "\020\354\007\"r\n\014SC_CASTSKILL\022\r\n\005mapid\030\001 \001(\004\022\020\n\010ac"
  "tor_id\030\002 \001(\004\022\020\n\010skill_id\030\003 \001(\r\022\021\n\ttarget"
  "_id\030\004 \001(\004\022\t\n\001x\030\005 \001(\002\022\t\n\001y\030\006 \001(\002:\006\232\?\003\030\207\010\""
  "\256\001\n\017SC_SKILL_DAMAGE\022\r\n\005mapid\030\001 \001(\004\022\020\n\010ac"
  "tor_id\030\002 \001(\004\022\020\n\010skill_id\030\003 \001(\r\022/\n\ndamage"
  "list\030\005 \003(\0132\033.SC_SKILL_DAMAGE.DamageInfo\032"
  "/\n\nDamageInfo\022\021\n\ttarget_id\030\001 \001(\004\022\016\n\006dama"
  "ge\030\002 \001(\005:\006\232\?\003\030\211\010\"\'\n\016CS_SKILL_BREAK\022\r\n\005ma"
  "pid\030\001 \001(\004:\006\232\?\003\020\355\007\"9\n\016SC_SKILL_BREAK\022\r\n\005m"
  "apid\030\001 \001(\004\022\020\n\010actor_id\030\002 \001(\004:\006\232\?\003\030\210\010\"5\n\025"
  "CS_SKILL_CHGTARGETPOS\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
  "\001(\002:\006\232\?\003\020\356\007\"[\n\rSC_SKILL_STUN\022\r\n\005mapid\030\001 "
  "\001(\004\022\020\n\010actor_id\030\002 \001(\004\022\020\n\010skill_id\030\003 \001(\r\022"
  "\017\n\007stun_ms\030\004 \001(\r:\006\232\?\003\030\212\010\"L\n\017SC_SKILL_EFF"
  "ACT\022\r\n\005mapid\030\001 \001(\004\022\020\n\010actor_id\030\002 \001(\004\022\020\n\010"
  "skill_id\030\003 \001(\r:\006\232\?\003\030\213\010\"l\n\tSC_DAMAGE\022\020\n\010a"
  "ctor_id\030\001 \001(\004\022\023\n\013attacker_id\030\002 \001(\004\022\016\n\006da"
  "mage\030\003 \001(\r\022\017\n\007hittype\030\004 \001(\r\022\017\n\007crtical\030\005"
  " \001(\010:\006\232\?\003\030\214\010\"8\n\007SC_DEAD\022\020\n\010actor_id\030\001 \001("
  "\004\022\023\n\013attacker_id\030\002 \001(\004:\006\232\?\003\030\215\010\"*\n\020CS_CHA"
  "NGE_PKMODE\022\016\n\006pkmode\030\001 \001(\r:\006\232\?\003\020\357\007\"*\n\020SC"
  "_CHANGE_PKMODE\022\016\n\006pkmode\030\001 \001(\r:\006\232\?\003\030\220\010\"("
  "\n\tCS_REBORN\022\023\n\013reborn_type\030\001 \001(\r:\006\232\?\003\020\360\007"
  "\"\306\001\n\014SC_ITEM_INFO\022\020\n\010actor_id\030\001 \001(\004\022\017\n\007i"
  "tem_id\030\002 \001(\004\022\020\n\010position\030\003 \001(\r\022\014\n\004grid\030\004"
  " \001(\r\022\020\n\010pile_num\030\005 \001(\r\022\014\n\004dura\030\006 \001(\r\022\022\n\n"
  "dura_limit\030\007 \001(\r\022\023\n\013expire_time\030\010 \001(\r\022\024\n"
  "\014addition_lev\030\t \001(\r\022\014\n\004flag\030\n \001(\r:\006\232\?\003\030\233"
  "\010\"\246\002\n\016SC_ITEM_CHANGE\022\017\n\007item_id\030\001 \001(\004\022\020\n"
  "\010position\030\002 \001(\r\022/\n\013change_list\030\003 \003(\0132\032.S"
  "C_ITEM_CHANGE.ChangeData\032L\n\nChangeData\022/"
  "\n\013change_type\030\001 \001(\0162\032.SC_ITEM_CHANGE.Cha"
  "ngeType\022\r\n\005value\030\002 \001(\r\"j\n\nChangeType\022\016\n\n"
  "ChangeGrid\020\000\022\021\n\rChangePileNum\020\001\022\024\n\020Chang"
  "eExpireData\020\002\022\016\n\nChangeDura\020\003\022\023\n\017ChangeD"
  "uraLimit\020\004:\006\232\?\003\030\234\010\"I\n\016SC_ITEM_DELETE\022\017\n\007"
  "item_id\030\001 \001(\004\022\020\n\010position\030\002 \001(\r\022\014\n\004grid\030"
  "\003 \001(\r:\006\232\?\003\030\232\010\"F\n\014CS_ITEM_SWAP\022\020\n\010positio"
  "n\030\001 \001(\r\022\r\n\005grid1\030\002 \001(\r\022\r\n\005grid2\030\003 \001(\r:\006\232"
  "\?\003\020\374\007\"Z\n\rCS_ITEM_SPLIT\022\020\n\010position\030\001 \001(\r"
  "\022\r\n\005grid1\030\002 \001(\r\022\r\n\005grid2\030\003 \001(\r\022\021\n\tsplit_"
  "num\030\004 \001(\r:\006\232\?\003\020\375\007\"I\n\017CS_ITEM_COMBINE\022\020\n\010"
  "position\030\001 \001(\r\022\r\n\005grid1\030\002 \001(\r\022\r\n\005grid2\030\003"
  " \001(\r:\006\232\?\003\020\376\007\"(\n\014CS_ITEM_TIDY\022\020\n\010position"
  "\030\001 \001(\r:\006\232\?\003\020\377\007\"2\n\013CS_ITEM_USE\022\014\n\004grid\030\001 "
  "\001(\r\022\r\n\005count\030\002 \001(\r:\006\232\?\003\020\200\010\"\036\n\024CS_ITEM_ST"
  "ORAGE_OPEN:\006\232\?\003\020\201\010\";\n\030CS_ITEM_STORAGE_CH"
  "ECKOUT\022\027\n\017grid_in_storage\030\001 \001(\r:\006\232\?\003\020\203\010\""
  ":\n\027CS_ITEM_STORAGE_CHECKIN\022\027\n\017grid_in_pa"
  "ckage\030\001 \001(\r:\006\232\?\003\020\202\010\"B\n\010CS_EQUIP\022\027\n\017grid_"
  "in_package\030\001 \001(\r\022\025\n\rgrid_in_equip\030\002 \001(\r:"
  "\006\232\?\003\020\206\010\"+\n\nCS_UNEQUIP\022\025\n\rgrid_in_equip\030\001"
  " \001(\r:\006\232\?\003\020\207\010\"S\n\007CS_TALK\022\035\n\007channel\030\001 \001(\016"
  "2\014.TalkChannel\022\r\n\005words\030\002 \001(\t\022\022\n\nreciver"
  "_id\030\003 \001(\004:\006\232\?\003\020\220\010\"\334\001\n\007SC_TALK\022\035\n\007channel"
  "\030\001 \001(\0162\014.TalkChannel\022\r\n\005words\030\002 \001(\t\022\021\n\ts"
  "ender_id\030\004 \001(\004\022\023\n\013sender_name\030\005 \001(\t\022\023\n\013s"
  "ender_sign\030\006 \001(\r\022\025\n\rsender_viplev\030\007 \001(\r\022"
  "\021\n\tsend_time\030\010 \001(\r\022\022\n\nreciver_id\030\t \001(\004\022 "
  "\n\titem_list\030\024 \003(\0132\r.SC_ITEM_INFO:\006\232\?\003\030\235\010"
  "\"\212\002\n\014SC_TASK_INFO\022*\n\016task_info_list\030\001 \003("
  "\0132\022.SC_TASK_INFO.Info\032\305\001\n\004Info\022\017\n\007task_i"
  "d\030\001 \001(\004\022\023\n\013accept_time\030\002 \001(\r\022\023\n\013finish_t"
  "ime\030\003 \001(\r\022\023\n\013expire_time\030\004 \001(\r\022\020\n\010daycou"
  "nt\030\005 \001(\r\022\024\n\014daycount_max\030\006 \001(\r\022\r\n\005state\030"
  "\007 \001(\r\022\014\n\004num1\030\n \001(\r\022\014\n\004num2\030\013 \001(\r\022\014\n\004num"
  "3\030\014 \001(\r\022\014\n\004num4\030\r \001(\r:\006\232\?\003\030\244\010\"A\n\014SC_TASK"
  "_DATA\022\017\n\007task_id\030\001 \001(\004\022\013\n\003idx\030\002 \001(\r\022\013\n\003n"
  "um\030\003 \001(\r:\006\232\?\003\030\245\010\"B\n\016CS_TASK_SUBMIT\022\017\n\007ta"
  "sk_id\030\001 \001(\004\022\027\n\017submit_multiple\030\002 \001(\r:\006\232\?"
  "\003\020\221\010\"\'\n\rCS_ACTIVE_NPC\022\016\n\006npc_id\030\001 \001(\004:\006\232"
  "\?\003\020\222\010\"\302\001\n\tSC_DIALOG\022\021\n\tdialog_id\030\001 \001(\004\022\023"
  "\n\013dialog_type\030\002 \001(\r\022\024\n\014dialog_title\030\003 \001("
  "\t\022\022\n\ndialog_txt\030\004 \003(\t\0220\n\020dialog_link_lis"
  "t\030\005 \003(\0132\026.SC_DIALOG.dialog_link\032)\n\013dialo"
  "g_link\022\r\n\005style\030\001 \001(\r\022\013\n\003txt\030\002 \001(\t:\006\232\?\003\030"
  "\246\010\"G\n\017CS_DIALOG_CLICK\022\021\n\tdialog_id\030\001 \001(\004"
  "\022\031\n\021dialog_button_idx\030\002 \001(\r:\006\232\?\003\020\223\010\"f\n\014S"
  "C_ACHI_INFO\022\'\n\013finish_list\030\001 \003(\0132\022.SC_AC"
  "HI_INFO.Info\032%\n\004Info\022\017\n\007achi_id\030\001 \001(\r\022\014\n"
  "\004take\030\002 \001(\r:\006\232\?\003\030\247\010\"\'\n\014CS_ACHI_TAKE\022\017\n\007a"
  "chi_id\030\001 \001(\r:\006\232\?\003\020\224\010\"\027\n\rCS_TEAMCREATE:\006\232"
  "\?\003\020\232\010\"\025\n\013CS_TEAMQUIT:\006\232\?\003\020\233\010\".\n\021CS_TEAMK"
  "ICKMEMBER\022\021\n\tmember_id\030\001 \001(\004:\006\232\?\003\020\234\010\"1\n\023"
  "CS_TEAMINVITEMEMBER\022\022\n\ninvitee_id\030\001 \001(\004:"
  "\006\232\?\003\020\235\010\"X\n\023SC_TEAMINVITEMEMBER\022\017\n\007team_i"
  "d\030\001 \001(\004\022\022\n\ninviter_id\030\002 \001(\004\022\024\n\014inviter_n"
  "ame\030\003 \001(\t:\006\232\?\003\030\260\010\"R\n\023CS_TEAMACCEPTINVITE"
  "\022\017\n\007team_id\030\001 \001(\004\022\022\n\ninviter_id\030\002 \001(\004\022\016\n"
  "\006result\030\003 \001(\010:\006\232\?\003\020\236\010\"1\n\020CS_TEAMNEWLEADE"
  "R\022\025\n\rnew_leader_id\030\002 \001(\004:\006\232\?\003\020\237\010\"B\n\022SC_T"
  "EAMMEMBER_INFO\022$\n\013member_list\030\001 \003(\0132\017.Te"
  "amMemberInfo:\006\232\?\003\030\256\010\"\200\003\n\024SC_TEAMMEMBER_A"
  "CTION\022,\n\006action\030\001 \001(\0162\034.SC_TEAMMEMBER_AC"
  "TION.Action\022\023\n\013operator_id\030\002 \001(\004\022\021\n\tmemb"
  "er_id\030\003 \001(\004\022\022\n\nmember_lev\030\004 \001(\r\022\023\n\013membe"
  "r_name\030\005 \001(\t\022\025\n\rmember_online\030\006 \001(\010\"\311\001\n\006"
  "Action\022\017\n\013TEAM_CREATE\020\000\022\020\n\014TEAM_DESTORY\020"
  "\001\022\021\n\rTEAM_ADDMEBER\020\002\022\026\n\022TEAM_CHANGE_LEAD"
  "ER\020\003\022\r\n\tTEAM_QUIT\020\004\022\023\n\017TEAM_KICKMEMBER\020\005"
  "\022\027\n\023TEAM_MEMBER_LEV_CHG\020\006\022\030\n\024TEAM_MEMBER"
  "_NAME_CHG\020\007\022\032\n\026TEAM_MEMBER_ONLINE_CHG\020\010:"
  "\006\232\?\003\030\257\010\"3\n\022CS_TEAMAPPLYMEMBER\022\025\n\rrespond"
  "ent_id\030\001 \001(\004:\006\232\?\003\020\240\010\"J\n\022SC_TEAMAPPLYMEMB"
  "ER\022\024\n\014applicant_id\030\001 \001(\004\022\026\n\016applicant_na"
  "me\030\002 \001(\t:\006\232\?\003\030\261\010\"B\n\022CS_TEAMACCEPTAPPLY\022\024"
  "\n\014applicant_id\030\001 \001(\004\022\016\n\006result\030\002 \001(\010:\006\232\?"
  "\003\020\241\010\"\030\n\016CS_GUILDCREATE:\006\232\?\003\020\256\010\"\026\n\014CS_GUI"
  "LDQUIT:\006\232\?\003\020\257\010\"/\n\022CS_GUILDKICKMEMBER\022\021\n\t"
  "member_id\030\001 \001(\004:\006\232\?\003\020\260\010\"2\n\024CS_GUILDINVIT"
  "EMEMBER\022\022\n\ninvitee_id\030\001 \001(\004:\006\232\?\003\020\261\010\"Z\n\024S"
  "C_GUILDINVITEMEMBER\022\020\n\010guild_id\030\001 \001(\004\022\022\n"
  "\ninviter_id\030\002 \001(\004\022\024\n\014inviter_name\030\003 \001(\t:"
  "\006\232\?\003\030\270\010\"T\n\024CS_GUILDACCEPTINVITE\022\020\n\010guild"
  "_id\030\001 \001(\004\022\022\n\ninviter_id\030\002 \001(\004\022\016\n\006result\030"
  "\003 \001(\010:\006\232\?\003\020\262\010\"2\n\021CS_GUILDNEWLEADER\022\025\n\rne"
  "w_leader_id\030\002 \001(\004:\006\232\?\003\020\263\010\"D\n\023SC_GUILDMEM"
  "BER_INFO\022%\n\013member_list\030\001 \003(\0132\020.GuildMem"
  "berInfo:\006\232\?\003\030\271\010\"\240\004\n\025SC_GUILDMEMBER_ACTIO"
  "N\022-\n\006action\030\001 \001(\0162\035.SC_GUILDMEMBER_ACTIO"
  "N.Action\022\023\n\013operator_id\030\002 \001(\004\022\021\n\tmember_"
  "id\030\003 \001(\004\022\022\n\nmember_lev\030\004 \001(\r\022\023\n\013member_n"
  "ame\030\005 \001(\t\022\025\n\rmember_online\030\006 \001(\010\022\023\n\013memb"
  "er_rank\030\007 \001(\r\022\024\n\014member_score\030\010 \001(\r\022\032\n\022m"
  "ember_last_logout\030\t \001(\r\"\240\002\n\006Action\022\020\n\014GU"
  "ILD_CREATE\020\000\022\021\n\rGUILD_DESTORY\020\001\022\022\n\016GUILD"
  "_ADDMEBER\020\002\022\027\n\023GUILD_CHANGE_LEADER\020\003\022\016\n\n"
  "GUILD_QUIT\020\004\022\024\n\020GUILD_KICKMEMBER\020\005\022\025\n\021GU"
  "ILD_ACCEPTAPPLY\020\006\022\030\n\024GUILD_MEMBER_LEV_CH"
  "G\020\n\022\031\n\025GUILD_MEMBER_NAME_CHG\020\013\022\033\n\027GUILD_"
  "MEMBER_ONLINE_CHG\020\014\022\031\n\025GUILD_MEMBER_RANK"
  "_CHG\020\r\022\032\n\026GUILD_MEMBER_SCORE_CHG\020\016:\006\232\?\003\030"
  "\272\010\"4\n\023CS_GUILDAPPLYMEMBER\022\025\n\rrespondent_"
  "id\030\001 \001(\004:\006\232\?\003\020\264\010\"K\n\023SC_GUILDAPPLYMEMBER\022"
  "\024\n\014applicant_id\030\001 \001(\004\022\026\n\016applicant_name\030"
  "\002 \001(\t:\006\232\?\003\030\273\010\"C\n\023CS_GUILDACCEPTAPPLY\022\024\n\014"
  "applicant_id\030\001 \001(\004\022\016\n\006result\030\002 \001(\010:\006\232\?\003\020"
  "\265\010*\344\001\n\013TalkChannel\022\022\n\016CHANNEL_NORMAL\020\000\022\021"
  "\n\rCHANNEL_SCENE\020\001\022\021\n\rCHANNEL_PHASE\020\002\022\020\n\014"
  "CHANNEL_TEAM\020\003\022\021\n\rCHANNEL_GUILD\020\004\022\021\n\rCHA"
  "NNEL_WORLD\020\005\022\023\n\017CHANNEL_TRUMPET\020\006\022\022\n\016CHA"
  "NNEL_GLOBAL\020\007\022\022\n\016CHANNEL_SYSTEM\020\010\022\021\n\rCHA"
  "NNEL_RUMOR\020\t\022\023\n\017CHANNEL_PRIVATE\020\nb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_2fzone_5fservice_2eproto_deps[2] = {
  &::descriptor_table_common_2fCommon_2eproto,
  &::descriptor_table_msg_2fts_5fcmd_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_2fzone_5fservice_2eproto_sccs[92] = {
  &scc_info_CS_ACHI_TAKE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ACTIVE_NPC_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_CASTSKILL_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_CHANGEMAP_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_DIALOG_CLICK_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_EQUIP_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_GUILDACCEPTAPPLY_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_GUILDACCEPTINVITE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_GUILDCREATE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_GUILDKICKMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_GUILDNEWLEADER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_GUILDQUIT_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ITEM_COMBINE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ITEM_SPLIT_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ITEM_STORAGE_CHECKIN_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ITEM_STORAGE_CHECKOUT_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ITEM_STORAGE_OPEN_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ITEM_SWAP_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ITEM_TIDY_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_ITEM_USE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_LOADMAP_SUCC_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_MOVE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_REBORN_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_SKILL_BREAK_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_SKILL_CHGTARGETPOS_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TALK_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TASK_SUBMIT_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TEAMACCEPTAPPLY_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TEAMACCEPTINVITE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TEAMCREATE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TEAMKICKMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TEAMNEWLEADER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_TEAMQUIT_msg_2fzone_5fservice_2eproto.base,
  &scc_info_CS_UNEQUIP_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ACHI_INFO_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ACHI_INFO_Info_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ACTORATTRIB_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_AOI_NEW_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_AOI_REMOVE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_AOI_UPDATE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ATTRIB_CHANGE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ATTRIB_CHANGE_Data_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_CASTSKILL_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_COMMONDATA_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_COMMONDATA_Data_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_COOLDOWN_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_COOLDOWN_Data_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_DAMAGE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_DATACOUNT_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_DATACOUNT_Data_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_DEAD_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_DIALOG_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_DIALOG_dialog_link_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ENTERMAP_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_GUILDMEMBER_ACTION_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_GUILDMEMBER_INFO_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ITEM_CHANGE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ITEM_CHANGE_ChangeData_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ITEM_DELETE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_ITEM_INFO_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_LOADMAP_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_MAPVAL_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_MAPVAL_MapVal_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_PLAYERINFO_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_SKILL_BREAK_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_SKILL_DAMAGE_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_SKILL_DAMAGE_DamageInfo_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_SKILL_EFFACT_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_SKILL_STUN_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_STATUS_ACTION_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_STATUS_INFO_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_STATUS_INFO_Data_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_STATUS_LIST_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_STATUS_LIST_Data_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_SYSVAR_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_SYSVAR_Data_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_TALK_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_TASK_DATA_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_TASK_INFO_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_TASK_INFO_Info_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_TEAMMEMBER_ACTION_msg_2fzone_5fservice_2eproto.base,
  &scc_info_SC_TEAMMEMBER_INFO_msg_2fzone_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2fzone_5fservice_2eproto_once;
static bool descriptor_table_msg_2fzone_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2fzone_5fservice_2eproto = {
  &descriptor_table_msg_2fzone_5fservice_2eproto_initialized, descriptor_table_protodef_msg_2fzone_5fservice_2eproto, "msg/zone_service.proto", 8681,
  &descriptor_table_msg_2fzone_5fservice_2eproto_once, descriptor_table_msg_2fzone_5fservice_2eproto_sccs, descriptor_table_msg_2fzone_5fservice_2eproto_deps, 92, 2,
  schemas, file_default_instances, TableStruct_msg_2fzone_5fservice_2eproto::offsets,
  file_level_metadata_msg_2fzone_5fservice_2eproto, 92, file_level_enum_descriptors_msg_2fzone_5fservice_2eproto, file_level_service_descriptors_msg_2fzone_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_2fzone_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_2fzone_5fservice_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_MAPVAL_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fzone_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fzone_5fservice_2eproto[0];
}
bool SC_MAPVAL_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SC_MAPVAL_State SC_MAPVAL::SYNC_MAPVAL_ALL;
constexpr SC_MAPVAL_State SC_MAPVAL::SYNC_MAPVAL_ONE;
constexpr SC_MAPVAL_State SC_MAPVAL::State_MIN;
constexpr SC_MAPVAL_State SC_MAPVAL::State_MAX;
constexpr int SC_MAPVAL::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_STATUS_ACTION_ACTION_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fzone_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fzone_5fservice_2eproto[1];
}
bool SC_STATUS_ACTION_ACTION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::STATUS_ATTACH;
constexpr SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::STATUS_DETACH;
constexpr SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::STATUS_EFFECT;
constexpr SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::ACTION_MIN;
constexpr SC_STATUS_ACTION_ACTION SC_STATUS_ACTION::ACTION_MAX;
constexpr int SC_STATUS_ACTION::ACTION_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_ITEM_CHANGE_ChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fzone_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fzone_5fservice_2eproto[2];
}
bool SC_ITEM_CHANGE_ChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeGrid;
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangePileNum;
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeExpireData;
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeDura;
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeDuraLimit;
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeType_MIN;
constexpr SC_ITEM_CHANGE_ChangeType SC_ITEM_CHANGE::ChangeType_MAX;
constexpr int SC_ITEM_CHANGE::ChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_TEAMMEMBER_ACTION_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fzone_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fzone_5fservice_2eproto[3];
}
bool SC_TEAMMEMBER_ACTION_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_CREATE;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_DESTORY;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_ADDMEBER;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_CHANGE_LEADER;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_QUIT;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_KICKMEMBER;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_MEMBER_LEV_CHG;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_MEMBER_NAME_CHG;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::TEAM_MEMBER_ONLINE_CHG;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::Action_MIN;
constexpr SC_TEAMMEMBER_ACTION_Action SC_TEAMMEMBER_ACTION::Action_MAX;
constexpr int SC_TEAMMEMBER_ACTION::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_GUILDMEMBER_ACTION_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fzone_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fzone_5fservice_2eproto[4];
}
bool SC_GUILDMEMBER_ACTION_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_CREATE;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_DESTORY;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_ADDMEBER;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_CHANGE_LEADER;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_QUIT;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_KICKMEMBER;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_ACCEPTAPPLY;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_MEMBER_LEV_CHG;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_MEMBER_NAME_CHG;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_MEMBER_ONLINE_CHG;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_MEMBER_RANK_CHG;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::GUILD_MEMBER_SCORE_CHG;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::Action_MIN;
constexpr SC_GUILDMEMBER_ACTION_Action SC_GUILDMEMBER_ACTION::Action_MAX;
constexpr int SC_GUILDMEMBER_ACTION::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TalkChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fzone_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fzone_5fservice_2eproto[5];
}
bool TalkChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SC_LOADMAP::InitAsDefaultInstance() {
}
class SC_LOADMAP::_Internal {
 public:
};

SC_LOADMAP::SC_LOADMAP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LOADMAP)
}
SC_LOADMAP::SC_LOADMAP(const SC_LOADMAP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(face_));
  // @@protoc_insertion_point(copy_constructor:SC_LOADMAP)
}

void SC_LOADMAP::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(face_));
}

SC_LOADMAP::~SC_LOADMAP() {
  // @@protoc_insertion_point(destructor:SC_LOADMAP)
  SharedDtor();
}

void SC_LOADMAP::SharedDtor() {
}

void SC_LOADMAP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_LOADMAP& SC_LOADMAP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_LOADMAP_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_LOADMAP::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LOADMAP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(face_));
  _internal_metadata_.Clear();
}

const char* SC_LOADMAP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float posx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float posy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float face = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_LOADMAP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LOADMAP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // float posx = 3;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_posx(), target);
  }

  // float posy = 4;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_posy(), target);
  }

  // float face = 5;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_face(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LOADMAP)
  return target;
}

size_t SC_LOADMAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LOADMAP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  // float posx = 3;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    total_size += 1 + 4;
  }

  // float posy = 4;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    total_size += 1 + 4;
  }

  // float face = 5;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_LOADMAP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LOADMAP)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LOADMAP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_LOADMAP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LOADMAP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LOADMAP)
    MergeFrom(*source);
  }
}

void SC_LOADMAP::MergeFrom(const SC_LOADMAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LOADMAP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (!(from.posx() <= 0 && from.posx() >= 0)) {
    _internal_set_posx(from._internal_posx());
  }
  if (!(from.posy() <= 0 && from.posy() >= 0)) {
    _internal_set_posy(from._internal_posy());
  }
  if (!(from.face() <= 0 && from.face() >= 0)) {
    _internal_set_face(from._internal_face());
  }
}

void SC_LOADMAP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LOADMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LOADMAP::CopyFrom(const SC_LOADMAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LOADMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LOADMAP::IsInitialized() const {
  return true;
}

void SC_LOADMAP::InternalSwap(SC_LOADMAP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(face_, other->face_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_LOADMAP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_LOADMAP_SUCC::InitAsDefaultInstance() {
}
class CS_LOADMAP_SUCC::_Internal {
 public:
};

CS_LOADMAP_SUCC::CS_LOADMAP_SUCC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LOADMAP_SUCC)
}
CS_LOADMAP_SUCC::CS_LOADMAP_SUCC(const CS_LOADMAP_SUCC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_LOADMAP_SUCC)
}

void CS_LOADMAP_SUCC::SharedCtor() {
}

CS_LOADMAP_SUCC::~CS_LOADMAP_SUCC() {
  // @@protoc_insertion_point(destructor:CS_LOADMAP_SUCC)
  SharedDtor();
}

void CS_LOADMAP_SUCC::SharedDtor() {
}

void CS_LOADMAP_SUCC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_LOADMAP_SUCC& CS_LOADMAP_SUCC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_LOADMAP_SUCC_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_LOADMAP_SUCC::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LOADMAP_SUCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CS_LOADMAP_SUCC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_LOADMAP_SUCC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LOADMAP_SUCC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LOADMAP_SUCC)
  return target;
}

size_t CS_LOADMAP_SUCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LOADMAP_SUCC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_LOADMAP_SUCC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LOADMAP_SUCC)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LOADMAP_SUCC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_LOADMAP_SUCC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LOADMAP_SUCC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LOADMAP_SUCC)
    MergeFrom(*source);
  }
}

void CS_LOADMAP_SUCC::MergeFrom(const CS_LOADMAP_SUCC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LOADMAP_SUCC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_LOADMAP_SUCC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LOADMAP_SUCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LOADMAP_SUCC::CopyFrom(const CS_LOADMAP_SUCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LOADMAP_SUCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LOADMAP_SUCC::IsInitialized() const {
  return true;
}

void CS_LOADMAP_SUCC::InternalSwap(CS_LOADMAP_SUCC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_LOADMAP_SUCC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_PLAYERINFO::InitAsDefaultInstance() {
}
class SC_PLAYERINFO::_Internal {
 public:
};

SC_PLAYERINFO::SC_PLAYERINFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_PLAYERINFO)
}
SC_PLAYERINFO::SC_PLAYERINFO(const SC_PLAYERINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&np_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(np_));
  // @@protoc_insertion_point(copy_constructor:SC_PLAYERINFO)
}

void SC_PLAYERINFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_PLAYERINFO_msg_2fzone_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&np_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(np_));
}

SC_PLAYERINFO::~SC_PLAYERINFO() {
  // @@protoc_insertion_point(destructor:SC_PLAYERINFO)
  SharedDtor();
}

void SC_PLAYERINFO::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_PLAYERINFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_PLAYERINFO& SC_PLAYERINFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_PLAYERINFO_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_PLAYERINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_PLAYERINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&np_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(np_));
  _internal_metadata_.Clear();
}

const char* SC_PLAYERINFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 playerid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 worldid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_PLAYERINFO.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 baselook = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          baselook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 viplev = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          viplev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pkval = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pkval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 honor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          honor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 campid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          campid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 money = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 money_bind = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          money_bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gold = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gold_bind = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          gold_bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bag_size = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          bag_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stroge_size = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          stroge_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 achi_point = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          achi_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fp = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          fp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 np = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          np_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_PLAYERINFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_PLAYERINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 worldid = 2;
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_worldid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_PLAYERINFO.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 prof = 4;
  if (this->prof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prof(), target);
  }

  // uint32 baselook = 5;
  if (this->baselook() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_baselook(), target);
  }

  // uint32 exp = 6;
  if (this->exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_exp(), target);
  }

  // uint32 level = 7;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_level(), target);
  }

  // uint32 viplev = 8;
  if (this->viplev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_viplev(), target);
  }

  // uint32 pkval = 9;
  if (this->pkval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pkval(), target);
  }

  // uint32 honor = 10;
  if (this->honor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_honor(), target);
  }

  // uint32 campid = 11;
  if (this->campid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_campid(), target);
  }

  // uint32 money = 12;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_money(), target);
  }

  // uint32 money_bind = 13;
  if (this->money_bind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_money_bind(), target);
  }

  // uint32 gold = 14;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_gold(), target);
  }

  // uint32 gold_bind = 15;
  if (this->gold_bind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_gold_bind(), target);
  }

  // uint32 bag_size = 16;
  if (this->bag_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_bag_size(), target);
  }

  // uint32 stroge_size = 17;
  if (this->stroge_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_stroge_size(), target);
  }

  // uint32 achi_point = 18;
  if (this->achi_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_achi_point(), target);
  }

  // uint32 hp = 30;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_hp(), target);
  }

  // uint32 mp = 31;
  if (this->mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_mp(), target);
  }

  // uint32 fp = 32;
  if (this->fp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_fp(), target);
  }

  // uint32 np = 33;
  if (this->np() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_np(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_PLAYERINFO)
  return target;
}

size_t SC_PLAYERINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_PLAYERINFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  // uint32 worldid = 2;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_worldid());
  }

  // uint32 prof = 4;
  if (this->prof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prof());
  }

  // uint32 baselook = 5;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baselook());
  }

  // uint32 exp = 6;
  if (this->exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp());
  }

  // uint32 level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  // uint32 viplev = 8;
  if (this->viplev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_viplev());
  }

  // uint32 pkval = 9;
  if (this->pkval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pkval());
  }

  // uint32 honor = 10;
  if (this->honor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_honor());
  }

  // uint32 campid = 11;
  if (this->campid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_campid());
  }

  // uint32 money = 12;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_money());
  }

  // uint32 money_bind = 13;
  if (this->money_bind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_money_bind());
  }

  // uint32 gold = 14;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gold());
  }

  // uint32 gold_bind = 15;
  if (this->gold_bind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gold_bind());
  }

  // uint32 bag_size = 16;
  if (this->bag_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bag_size());
  }

  // uint32 stroge_size = 17;
  if (this->stroge_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stroge_size());
  }

  // uint32 achi_point = 18;
  if (this->achi_point() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_achi_point());
  }

  // uint32 hp = 30;
  if (this->hp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hp());
  }

  // uint32 mp = 31;
  if (this->mp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mp());
  }

  // uint32 fp = 32;
  if (this->fp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fp());
  }

  // uint32 np = 33;
  if (this->np() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_np());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_PLAYERINFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_PLAYERINFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_PLAYERINFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_PLAYERINFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_PLAYERINFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_PLAYERINFO)
    MergeFrom(*source);
  }
}

void SC_PLAYERINFO::MergeFrom(const SC_PLAYERINFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_PLAYERINFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.prof() != 0) {
    _internal_set_prof(from._internal_prof());
  }
  if (from.baselook() != 0) {
    _internal_set_baselook(from._internal_baselook());
  }
  if (from.exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.viplev() != 0) {
    _internal_set_viplev(from._internal_viplev());
  }
  if (from.pkval() != 0) {
    _internal_set_pkval(from._internal_pkval());
  }
  if (from.honor() != 0) {
    _internal_set_honor(from._internal_honor());
  }
  if (from.campid() != 0) {
    _internal_set_campid(from._internal_campid());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.money_bind() != 0) {
    _internal_set_money_bind(from._internal_money_bind());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.gold_bind() != 0) {
    _internal_set_gold_bind(from._internal_gold_bind());
  }
  if (from.bag_size() != 0) {
    _internal_set_bag_size(from._internal_bag_size());
  }
  if (from.stroge_size() != 0) {
    _internal_set_stroge_size(from._internal_stroge_size());
  }
  if (from.achi_point() != 0) {
    _internal_set_achi_point(from._internal_achi_point());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from.fp() != 0) {
    _internal_set_fp(from._internal_fp());
  }
  if (from.np() != 0) {
    _internal_set_np(from._internal_np());
  }
}

void SC_PLAYERINFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_PLAYERINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_PLAYERINFO::CopyFrom(const SC_PLAYERINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_PLAYERINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_PLAYERINFO::IsInitialized() const {
  return true;
}

void SC_PLAYERINFO::InternalSwap(SC_PLAYERINFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerid_, other->playerid_);
  swap(worldid_, other->worldid_);
  swap(prof_, other->prof_);
  swap(baselook_, other->baselook_);
  swap(exp_, other->exp_);
  swap(level_, other->level_);
  swap(viplev_, other->viplev_);
  swap(pkval_, other->pkval_);
  swap(honor_, other->honor_);
  swap(campid_, other->campid_);
  swap(money_, other->money_);
  swap(money_bind_, other->money_bind_);
  swap(gold_, other->gold_);
  swap(gold_bind_, other->gold_bind_);
  swap(bag_size_, other->bag_size_);
  swap(stroge_size_, other->stroge_size_);
  swap(achi_point_, other->achi_point_);
  swap(hp_, other->hp_);
  swap(mp_, other->mp_);
  swap(fp_, other->fp_);
  swap(np_, other->np_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_PLAYERINFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ACTORATTRIB::InitAsDefaultInstance() {
}
class SC_ACTORATTRIB::_Internal {
 public:
};

SC_ACTORATTRIB::SC_ACTORATTRIB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACTORATTRIB)
}
SC_ACTORATTRIB::SC_ACTORATTRIB(const SC_ACTORATTRIB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attrib_list_(from.attrib_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_ACTORATTRIB)
}

void SC_ACTORATTRIB::SharedCtor() {
}

SC_ACTORATTRIB::~SC_ACTORATTRIB() {
  // @@protoc_insertion_point(destructor:SC_ACTORATTRIB)
  SharedDtor();
}

void SC_ACTORATTRIB::SharedDtor() {
}

void SC_ACTORATTRIB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ACTORATTRIB& SC_ACTORATTRIB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ACTORATTRIB_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ACTORATTRIB::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACTORATTRIB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrib_list_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_ACTORATTRIB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 attrib_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_attrib_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_attrib_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ACTORATTRIB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACTORATTRIB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 attrib_list = 1;
  {
    int byte_size = _attrib_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_attrib_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ACTORATTRIB)
  return target;
}

size_t SC_ACTORATTRIB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACTORATTRIB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 attrib_list = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->attrib_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _attrib_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ACTORATTRIB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACTORATTRIB)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ACTORATTRIB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ACTORATTRIB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACTORATTRIB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACTORATTRIB)
    MergeFrom(*source);
  }
}

void SC_ACTORATTRIB::MergeFrom(const SC_ACTORATTRIB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACTORATTRIB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrib_list_.MergeFrom(from.attrib_list_);
}

void SC_ACTORATTRIB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACTORATTRIB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACTORATTRIB::CopyFrom(const SC_ACTORATTRIB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACTORATTRIB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ACTORATTRIB::IsInitialized() const {
  return true;
}

void SC_ACTORATTRIB::InternalSwap(SC_ACTORATTRIB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attrib_list_.InternalSwap(&other->attrib_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ACTORATTRIB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_COMMONDATA_Data::InitAsDefaultInstance() {
}
class SC_COMMONDATA_Data::_Internal {
 public:
};

SC_COMMONDATA_Data::SC_COMMONDATA_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_COMMONDATA.Data)
}
SC_COMMONDATA_Data::SC_COMMONDATA_Data(const SC_COMMONDATA_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data0_, &from.data0_,
    static_cast<size_t>(reinterpret_cast<char*>(&keyidx_) -
    reinterpret_cast<char*>(&data0_)) + sizeof(keyidx_));
  // @@protoc_insertion_point(copy_constructor:SC_COMMONDATA.Data)
}

void SC_COMMONDATA_Data::SharedCtor() {
  ::memset(&data0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyidx_) -
      reinterpret_cast<char*>(&data0_)) + sizeof(keyidx_));
}

SC_COMMONDATA_Data::~SC_COMMONDATA_Data() {
  // @@protoc_insertion_point(destructor:SC_COMMONDATA.Data)
  SharedDtor();
}

void SC_COMMONDATA_Data::SharedDtor() {
}

void SC_COMMONDATA_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_COMMONDATA_Data& SC_COMMONDATA_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_COMMONDATA_Data_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_COMMONDATA_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_COMMONDATA.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyidx_) -
      reinterpret_cast<char*>(&data0_)) + sizeof(keyidx_));
  _internal_metadata_.Clear();
}

const char* SC_COMMONDATA_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 keyidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_COMMONDATA_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_COMMONDATA.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyidx(), target);
  }

  // uint64 data0 = 2;
  if (this->data0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_data0(), target);
  }

  // uint64 data1 = 3;
  if (this->data1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_data1(), target);
  }

  // uint64 data2 = 4;
  if (this->data2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_data2(), target);
  }

  // uint64 data3 = 5;
  if (this->data3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_data3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_COMMONDATA.Data)
  return target;
}

size_t SC_COMMONDATA_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_COMMONDATA.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 data0 = 2;
  if (this->data0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data0());
  }

  // uint64 data1 = 3;
  if (this->data1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data1());
  }

  // uint64 data2 = 4;
  if (this->data2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data2());
  }

  // uint64 data3 = 5;
  if (this->data3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data3());
  }

  // uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_COMMONDATA_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_COMMONDATA.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_COMMONDATA_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_COMMONDATA_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_COMMONDATA.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_COMMONDATA.Data)
    MergeFrom(*source);
  }
}

void SC_COMMONDATA_Data::MergeFrom(const SC_COMMONDATA_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_COMMONDATA.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data0() != 0) {
    _internal_set_data0(from._internal_data0());
  }
  if (from.data1() != 0) {
    _internal_set_data1(from._internal_data1());
  }
  if (from.data2() != 0) {
    _internal_set_data2(from._internal_data2());
  }
  if (from.data3() != 0) {
    _internal_set_data3(from._internal_data3());
  }
  if (from.keyidx() != 0) {
    _internal_set_keyidx(from._internal_keyidx());
  }
}

void SC_COMMONDATA_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_COMMONDATA.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_COMMONDATA_Data::CopyFrom(const SC_COMMONDATA_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_COMMONDATA.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_COMMONDATA_Data::IsInitialized() const {
  return true;
}

void SC_COMMONDATA_Data::InternalSwap(SC_COMMONDATA_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data0_, other->data0_);
  swap(data1_, other->data1_);
  swap(data2_, other->data2_);
  swap(data3_, other->data3_);
  swap(keyidx_, other->keyidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_COMMONDATA_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_COMMONDATA::InitAsDefaultInstance() {
}
class SC_COMMONDATA::_Internal {
 public:
};

SC_COMMONDATA::SC_COMMONDATA()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_COMMONDATA)
}
SC_COMMONDATA::SC_COMMONDATA(const SC_COMMONDATA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datalist_(from.datalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_COMMONDATA)
}

void SC_COMMONDATA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_COMMONDATA_msg_2fzone_5fservice_2eproto.base);
}

SC_COMMONDATA::~SC_COMMONDATA() {
  // @@protoc_insertion_point(destructor:SC_COMMONDATA)
  SharedDtor();
}

void SC_COMMONDATA::SharedDtor() {
}

void SC_COMMONDATA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_COMMONDATA& SC_COMMONDATA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_COMMONDATA_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_COMMONDATA::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_COMMONDATA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datalist_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_COMMONDATA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SC_COMMONDATA.Data datalist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_COMMONDATA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_COMMONDATA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_COMMONDATA.Data datalist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datalist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datalist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_COMMONDATA)
  return target;
}

size_t SC_COMMONDATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_COMMONDATA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_COMMONDATA.Data datalist = 1;
  total_size += 1UL * this->_internal_datalist_size();
  for (const auto& msg : this->datalist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_COMMONDATA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_COMMONDATA)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_COMMONDATA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_COMMONDATA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_COMMONDATA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_COMMONDATA)
    MergeFrom(*source);
  }
}

void SC_COMMONDATA::MergeFrom(const SC_COMMONDATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_COMMONDATA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datalist_.MergeFrom(from.datalist_);
}

void SC_COMMONDATA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_COMMONDATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_COMMONDATA::CopyFrom(const SC_COMMONDATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_COMMONDATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_COMMONDATA::IsInitialized() const {
  return true;
}

void SC_COMMONDATA::InternalSwap(SC_COMMONDATA* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datalist_.InternalSwap(&other->datalist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_COMMONDATA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_DATACOUNT_Data::InitAsDefaultInstance() {
}
class SC_DATACOUNT_Data::_Internal {
 public:
};

SC_DATACOUNT_Data::SC_DATACOUNT_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DATACOUNT.Data)
}
SC_DATACOUNT_Data::SC_DATACOUNT_Data(const SC_DATACOUNT_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_reset_time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(next_reset_time_));
  // @@protoc_insertion_point(copy_constructor:SC_DATACOUNT.Data)
}

void SC_DATACOUNT_Data::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_reset_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(next_reset_time_));
}

SC_DATACOUNT_Data::~SC_DATACOUNT_Data() {
  // @@protoc_insertion_point(destructor:SC_DATACOUNT.Data)
  SharedDtor();
}

void SC_DATACOUNT_Data::SharedDtor() {
}

void SC_DATACOUNT_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_DATACOUNT_Data& SC_DATACOUNT_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_DATACOUNT_Data_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_DATACOUNT_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DATACOUNT.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_reset_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(next_reset_time_));
  _internal_metadata_.Clear();
}

const char* SC_DATACOUNT_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 next_reset_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          next_reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_DATACOUNT_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_DATACOUNT.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idx(), target);
  }

  // uint64 data = 3;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_data(), target);
  }

  // uint32 next_reset_time = 4;
  if (this->next_reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_next_reset_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_DATACOUNT.Data)
  return target;
}

size_t SC_DATACOUNT_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DATACOUNT.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint64 data = 3;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data());
  }

  // uint32 next_reset_time = 4;
  if (this->next_reset_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_reset_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_DATACOUNT_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DATACOUNT.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_DATACOUNT_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_DATACOUNT_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DATACOUNT.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DATACOUNT.Data)
    MergeFrom(*source);
  }
}

void SC_DATACOUNT_Data::MergeFrom(const SC_DATACOUNT_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DATACOUNT.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.next_reset_time() != 0) {
    _internal_set_next_reset_time(from._internal_next_reset_time());
  }
}

void SC_DATACOUNT_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DATACOUNT.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DATACOUNT_Data::CopyFrom(const SC_DATACOUNT_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DATACOUNT.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_DATACOUNT_Data::IsInitialized() const {
  return true;
}

void SC_DATACOUNT_Data::InternalSwap(SC_DATACOUNT_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(data_, other->data_);
  swap(next_reset_time_, other->next_reset_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_DATACOUNT_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_DATACOUNT::InitAsDefaultInstance() {
}
class SC_DATACOUNT::_Internal {
 public:
};

SC_DATACOUNT::SC_DATACOUNT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DATACOUNT)
}
SC_DATACOUNT::SC_DATACOUNT(const SC_DATACOUNT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datalist_(from.datalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_DATACOUNT)
}

void SC_DATACOUNT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_DATACOUNT_msg_2fzone_5fservice_2eproto.base);
}

SC_DATACOUNT::~SC_DATACOUNT() {
  // @@protoc_insertion_point(destructor:SC_DATACOUNT)
  SharedDtor();
}

void SC_DATACOUNT::SharedDtor() {
}

void SC_DATACOUNT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_DATACOUNT& SC_DATACOUNT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_DATACOUNT_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_DATACOUNT::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DATACOUNT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datalist_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_DATACOUNT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SC_DATACOUNT.Data datalist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_DATACOUNT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_DATACOUNT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_DATACOUNT.Data datalist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datalist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datalist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_DATACOUNT)
  return target;
}

size_t SC_DATACOUNT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DATACOUNT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_DATACOUNT.Data datalist = 1;
  total_size += 1UL * this->_internal_datalist_size();
  for (const auto& msg : this->datalist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_DATACOUNT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DATACOUNT)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_DATACOUNT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_DATACOUNT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DATACOUNT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DATACOUNT)
    MergeFrom(*source);
  }
}

void SC_DATACOUNT::MergeFrom(const SC_DATACOUNT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DATACOUNT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datalist_.MergeFrom(from.datalist_);
}

void SC_DATACOUNT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DATACOUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DATACOUNT::CopyFrom(const SC_DATACOUNT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DATACOUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_DATACOUNT::IsInitialized() const {
  return true;
}

void SC_DATACOUNT::InternalSwap(SC_DATACOUNT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datalist_.InternalSwap(&other->datalist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_DATACOUNT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_COOLDOWN_Data::InitAsDefaultInstance() {
}
class SC_COOLDOWN_Data::_Internal {
 public:
};

SC_COOLDOWN_Data::SC_COOLDOWN_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_COOLDOWN.Data)
}
SC_COOLDOWN_Data::SC_COOLDOWN_Data(const SC_COOLDOWN_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&type_)) + sizeof(expiretime_));
  // @@protoc_insertion_point(copy_constructor:SC_COOLDOWN.Data)
}

void SC_COOLDOWN_Data::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiretime_) -
      reinterpret_cast<char*>(&type_)) + sizeof(expiretime_));
}

SC_COOLDOWN_Data::~SC_COOLDOWN_Data() {
  // @@protoc_insertion_point(destructor:SC_COOLDOWN.Data)
  SharedDtor();
}

void SC_COOLDOWN_Data::SharedDtor() {
}

void SC_COOLDOWN_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_COOLDOWN_Data& SC_COOLDOWN_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_COOLDOWN_Data_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_COOLDOWN_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_COOLDOWN.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiretime_) -
      reinterpret_cast<char*>(&type_)) + sizeof(expiretime_));
  _internal_metadata_.Clear();
}

const char* SC_COOLDOWN_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiretime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_COOLDOWN_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_COOLDOWN.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idx(), target);
  }

  // uint32 expiretime = 3;
  if (this->expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiretime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_COOLDOWN.Data)
  return target;
}

size_t SC_COOLDOWN_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_COOLDOWN.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint32 expiretime = 3;
  if (this->expiretime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiretime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_COOLDOWN_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_COOLDOWN.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_COOLDOWN_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_COOLDOWN_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_COOLDOWN.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_COOLDOWN.Data)
    MergeFrom(*source);
  }
}

void SC_COOLDOWN_Data::MergeFrom(const SC_COOLDOWN_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_COOLDOWN.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
}

void SC_COOLDOWN_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_COOLDOWN.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_COOLDOWN_Data::CopyFrom(const SC_COOLDOWN_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_COOLDOWN.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_COOLDOWN_Data::IsInitialized() const {
  return true;
}

void SC_COOLDOWN_Data::InternalSwap(SC_COOLDOWN_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(expiretime_, other->expiretime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_COOLDOWN_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_COOLDOWN::InitAsDefaultInstance() {
}
class SC_COOLDOWN::_Internal {
 public:
};

SC_COOLDOWN::SC_COOLDOWN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_COOLDOWN)
}
SC_COOLDOWN::SC_COOLDOWN(const SC_COOLDOWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datalist_(from.datalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_COOLDOWN)
}

void SC_COOLDOWN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_COOLDOWN_msg_2fzone_5fservice_2eproto.base);
}

SC_COOLDOWN::~SC_COOLDOWN() {
  // @@protoc_insertion_point(destructor:SC_COOLDOWN)
  SharedDtor();
}

void SC_COOLDOWN::SharedDtor() {
}

void SC_COOLDOWN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_COOLDOWN& SC_COOLDOWN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_COOLDOWN_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_COOLDOWN::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_COOLDOWN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datalist_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_COOLDOWN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SC_COOLDOWN.Data datalist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_COOLDOWN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_COOLDOWN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_COOLDOWN.Data datalist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datalist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datalist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_COOLDOWN)
  return target;
}

size_t SC_COOLDOWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_COOLDOWN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_COOLDOWN.Data datalist = 1;
  total_size += 1UL * this->_internal_datalist_size();
  for (const auto& msg : this->datalist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_COOLDOWN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_COOLDOWN)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_COOLDOWN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_COOLDOWN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_COOLDOWN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_COOLDOWN)
    MergeFrom(*source);
  }
}

void SC_COOLDOWN::MergeFrom(const SC_COOLDOWN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_COOLDOWN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datalist_.MergeFrom(from.datalist_);
}

void SC_COOLDOWN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_COOLDOWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_COOLDOWN::CopyFrom(const SC_COOLDOWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_COOLDOWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_COOLDOWN::IsInitialized() const {
  return true;
}

void SC_COOLDOWN::InternalSwap(SC_COOLDOWN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datalist_.InternalSwap(&other->datalist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_COOLDOWN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_SYSVAR_Data::InitAsDefaultInstance() {
}
class SC_SYSVAR_Data::_Internal {
 public:
};

SC_SYSVAR_Data::SC_SYSVAR_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SYSVAR.Data)
}
SC_SYSVAR_Data::SC_SYSVAR_Data(const SC_SYSVAR_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str0().empty()) {
    str0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str0_);
  }
  str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str1().empty()) {
    str1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str1_);
  }
  str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str2().empty()) {
    str2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str2_);
  }
  str3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str3().empty()) {
    str3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str3_);
  }
  ::memcpy(&data0_, &from.data0_,
    static_cast<size_t>(reinterpret_cast<char*>(&keyidx_) -
    reinterpret_cast<char*>(&data0_)) + sizeof(keyidx_));
  // @@protoc_insertion_point(copy_constructor:SC_SYSVAR.Data)
}

void SC_SYSVAR_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_SYSVAR_Data_msg_2fzone_5fservice_2eproto.base);
  str0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyidx_) -
      reinterpret_cast<char*>(&data0_)) + sizeof(keyidx_));
}

SC_SYSVAR_Data::~SC_SYSVAR_Data() {
  // @@protoc_insertion_point(destructor:SC_SYSVAR.Data)
  SharedDtor();
}

void SC_SYSVAR_Data::SharedDtor() {
  str0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_SYSVAR_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SYSVAR_Data& SC_SYSVAR_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SYSVAR_Data_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_SYSVAR_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SYSVAR.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyidx_) -
      reinterpret_cast<char*>(&data0_)) + sizeof(keyidx_));
  _internal_metadata_.Clear();
}

const char* SC_SYSVAR_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 keyidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str0 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_str0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_SYSVAR.Data.str0"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_str1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_SYSVAR.Data.str1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_str2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_SYSVAR.Data.str2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_str3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_SYSVAR.Data.str3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SYSVAR_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SYSVAR.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyidx(), target);
  }

  // uint64 data0 = 2;
  if (this->data0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_data0(), target);
  }

  // uint64 data1 = 3;
  if (this->data1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_data1(), target);
  }

  // uint64 data2 = 4;
  if (this->data2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_data2(), target);
  }

  // uint64 data3 = 5;
  if (this->data3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_data3(), target);
  }

  // string str0 = 6;
  if (this->str0().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str0().data(), static_cast<int>(this->_internal_str0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str0");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_str0(), target);
  }

  // string str1 = 7;
  if (this->str1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str1().data(), static_cast<int>(this->_internal_str1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str1");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_str1(), target);
  }

  // string str2 = 8;
  if (this->str2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str2().data(), static_cast<int>(this->_internal_str2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str2");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_str2(), target);
  }

  // string str3 = 9;
  if (this->str3().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str3().data(), static_cast<int>(this->_internal_str3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_SYSVAR.Data.str3");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_str3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SYSVAR.Data)
  return target;
}

size_t SC_SYSVAR_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SYSVAR.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str0 = 6;
  if (this->str0().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str0());
  }

  // string str1 = 7;
  if (this->str1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str1());
  }

  // string str2 = 8;
  if (this->str2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str2());
  }

  // string str3 = 9;
  if (this->str3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str3());
  }

  // uint64 data0 = 2;
  if (this->data0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data0());
  }

  // uint64 data1 = 3;
  if (this->data1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data1());
  }

  // uint64 data2 = 4;
  if (this->data2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data2());
  }

  // uint64 data3 = 5;
  if (this->data3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data3());
  }

  // uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SYSVAR_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SYSVAR.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SYSVAR_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SYSVAR_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SYSVAR.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SYSVAR.Data)
    MergeFrom(*source);
  }
}

void SC_SYSVAR_Data::MergeFrom(const SC_SYSVAR_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SYSVAR.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str0().size() > 0) {

    str0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str0_);
  }
  if (from.str1().size() > 0) {

    str1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str1_);
  }
  if (from.str2().size() > 0) {

    str2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str2_);
  }
  if (from.str3().size() > 0) {

    str3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str3_);
  }
  if (from.data0() != 0) {
    _internal_set_data0(from._internal_data0());
  }
  if (from.data1() != 0) {
    _internal_set_data1(from._internal_data1());
  }
  if (from.data2() != 0) {
    _internal_set_data2(from._internal_data2());
  }
  if (from.data3() != 0) {
    _internal_set_data3(from._internal_data3());
  }
  if (from.keyidx() != 0) {
    _internal_set_keyidx(from._internal_keyidx());
  }
}

void SC_SYSVAR_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SYSVAR.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SYSVAR_Data::CopyFrom(const SC_SYSVAR_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SYSVAR.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SYSVAR_Data::IsInitialized() const {
  return true;
}

void SC_SYSVAR_Data::InternalSwap(SC_SYSVAR_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  str0_.Swap(&other->str0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str1_.Swap(&other->str1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str2_.Swap(&other->str2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str3_.Swap(&other->str3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data0_, other->data0_);
  swap(data1_, other->data1_);
  swap(data2_, other->data2_);
  swap(data3_, other->data3_);
  swap(keyidx_, other->keyidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SYSVAR_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_SYSVAR::InitAsDefaultInstance() {
}
class SC_SYSVAR::_Internal {
 public:
};

SC_SYSVAR::SC_SYSVAR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SYSVAR)
}
SC_SYSVAR::SC_SYSVAR(const SC_SYSVAR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datalist_(from.datalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_SYSVAR)
}

void SC_SYSVAR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_SYSVAR_msg_2fzone_5fservice_2eproto.base);
}

SC_SYSVAR::~SC_SYSVAR() {
  // @@protoc_insertion_point(destructor:SC_SYSVAR)
  SharedDtor();
}

void SC_SYSVAR::SharedDtor() {
}

void SC_SYSVAR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SYSVAR& SC_SYSVAR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SYSVAR_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_SYSVAR::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SYSVAR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datalist_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_SYSVAR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SC_SYSVAR.Data datalist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SYSVAR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SYSVAR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_SYSVAR.Data datalist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datalist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datalist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SYSVAR)
  return target;
}

size_t SC_SYSVAR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SYSVAR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_SYSVAR.Data datalist = 1;
  total_size += 1UL * this->_internal_datalist_size();
  for (const auto& msg : this->datalist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SYSVAR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SYSVAR)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SYSVAR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SYSVAR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SYSVAR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SYSVAR)
    MergeFrom(*source);
  }
}

void SC_SYSVAR::MergeFrom(const SC_SYSVAR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SYSVAR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datalist_.MergeFrom(from.datalist_);
}

void SC_SYSVAR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SYSVAR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SYSVAR::CopyFrom(const SC_SYSVAR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SYSVAR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SYSVAR::IsInitialized() const {
  return true;
}

void SC_SYSVAR::InternalSwap(SC_SYSVAR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datalist_.InternalSwap(&other->datalist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SYSVAR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ENTERMAP::InitAsDefaultInstance() {
}
class SC_ENTERMAP::_Internal {
 public:
};

SC_ENTERMAP::SC_ENTERMAP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ENTERMAP)
}
SC_ENTERMAP::SC_ENTERMAP(const SC_ENTERMAP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&x_)) + sizeof(face_));
  // @@protoc_insertion_point(copy_constructor:SC_ENTERMAP)
}

void SC_ENTERMAP::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&x_)) + sizeof(face_));
}

SC_ENTERMAP::~SC_ENTERMAP() {
  // @@protoc_insertion_point(destructor:SC_ENTERMAP)
  SharedDtor();
}

void SC_ENTERMAP::SharedDtor() {
}

void SC_ENTERMAP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ENTERMAP& SC_ENTERMAP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ENTERMAP_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ENTERMAP::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ENTERMAP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&x_)) + sizeof(face_));
  _internal_metadata_.Clear();
}

const char* SC_ENTERMAP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float face = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ENTERMAP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ENTERMAP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float face = 3;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_face(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ENTERMAP)
  return target;
}

size_t SC_ENTERMAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ENTERMAP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float face = 3;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ENTERMAP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ENTERMAP)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ENTERMAP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ENTERMAP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ENTERMAP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ENTERMAP)
    MergeFrom(*source);
  }
}

void SC_ENTERMAP::MergeFrom(const SC_ENTERMAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ENTERMAP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.face() <= 0 && from.face() >= 0)) {
    _internal_set_face(from._internal_face());
  }
}

void SC_ENTERMAP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ENTERMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ENTERMAP::CopyFrom(const SC_ENTERMAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ENTERMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ENTERMAP::IsInitialized() const {
  return true;
}

void SC_ENTERMAP::InternalSwap(SC_ENTERMAP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(face_, other->face_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ENTERMAP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_AOI_NEW::InitAsDefaultInstance() {
}
class SC_AOI_NEW::_Internal {
 public:
};

SC_AOI_NEW::SC_AOI_NEW()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_AOI_NEW)
}
SC_AOI_NEW::SC_AOI_NEW(const SC_AOI_NEW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guildname().empty()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&armorid_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(armorid_));
  // @@protoc_insertion_point(copy_constructor:SC_AOI_NEW)
}

void SC_AOI_NEW::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_AOI_NEW_msg_2fzone_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&armorid_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(armorid_));
}

SC_AOI_NEW::~SC_AOI_NEW() {
  // @@protoc_insertion_point(destructor:SC_AOI_NEW)
  SharedDtor();
}

void SC_AOI_NEW::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_AOI_NEW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_AOI_NEW& SC_AOI_NEW::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_AOI_NEW_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_AOI_NEW::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_AOI_NEW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&armorid_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(armorid_));
  _internal_metadata_.Clear();
}

const char* SC_AOI_NEW::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_AOI_NEW.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 actortype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          actortype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 baselook = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          baselook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prof = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 campid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          campid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hpmax = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          hpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 movespd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          movespd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ownerid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float posx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float posy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float face = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 weaponid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 armorid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          armorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 guildid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string guildname = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_AOI_NEW.guildname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_AOI_NEW::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_AOI_NEW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_actor_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_AOI_NEW.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 actortype = 4;
  if (this->actortype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_actortype(), target);
  }

  // uint32 baselook = 5;
  if (this->baselook() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_baselook(), target);
  }

  // uint32 prof = 6;
  if (this->prof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prof(), target);
  }

  // uint32 lev = 7;
  if (this->lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lev(), target);
  }

  // uint32 campid = 8;
  if (this->campid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_campid(), target);
  }

  // uint32 hp = 9;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hp(), target);
  }

  // uint32 hpmax = 10;
  if (this->hpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_hpmax(), target);
  }

  // uint32 movespd = 11;
  if (this->movespd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_movespd(), target);
  }

  // uint64 ownerid = 12;
  if (this->ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_ownerid(), target);
  }

  // float posx = 13;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_posx(), target);
  }

  // float posy = 14;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_posy(), target);
  }

  // float face = 15;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_face(), target);
  }

  // uint32 weaponid = 20;
  if (this->weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_weaponid(), target);
  }

  // uint32 armorid = 21;
  if (this->armorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_armorid(), target);
  }

  // uint32 guildid = 30;
  if (this->guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_guildid(), target);
  }

  // string guildname = 31;
  if (this->guildname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_AOI_NEW.guildname");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_guildname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_AOI_NEW)
  return target;
}

size_t SC_AOI_NEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_AOI_NEW)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string guildname = 31;
  if (this->guildname().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guildname());
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  // uint32 actortype = 4;
  if (this->actortype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_actortype());
  }

  // uint32 baselook = 5;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baselook());
  }

  // uint32 prof = 6;
  if (this->prof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prof());
  }

  // uint32 lev = 7;
  if (this->lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lev());
  }

  // uint32 campid = 8;
  if (this->campid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_campid());
  }

  // uint32 hp = 9;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hp());
  }

  // uint32 hpmax = 10;
  if (this->hpmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hpmax());
  }

  // uint64 ownerid = 12;
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ownerid());
  }

  // uint32 movespd = 11;
  if (this->movespd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_movespd());
  }

  // float posx = 13;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    total_size += 1 + 4;
  }

  // float posy = 14;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    total_size += 1 + 4;
  }

  // float face = 15;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 guildid = 30;
  if (this->guildid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guildid());
  }

  // uint32 weaponid = 20;
  if (this->weaponid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weaponid());
  }

  // uint32 armorid = 21;
  if (this->armorid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_armorid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_AOI_NEW::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_AOI_NEW)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_AOI_NEW* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_AOI_NEW>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_AOI_NEW)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_AOI_NEW)
    MergeFrom(*source);
  }
}

void SC_AOI_NEW::MergeFrom(const SC_AOI_NEW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_AOI_NEW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.guildname().size() > 0) {

    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.actortype() != 0) {
    _internal_set_actortype(from._internal_actortype());
  }
  if (from.baselook() != 0) {
    _internal_set_baselook(from._internal_baselook());
  }
  if (from.prof() != 0) {
    _internal_set_prof(from._internal_prof());
  }
  if (from.lev() != 0) {
    _internal_set_lev(from._internal_lev());
  }
  if (from.campid() != 0) {
    _internal_set_campid(from._internal_campid());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.hpmax() != 0) {
    _internal_set_hpmax(from._internal_hpmax());
  }
  if (from.ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
  if (from.movespd() != 0) {
    _internal_set_movespd(from._internal_movespd());
  }
  if (!(from.posx() <= 0 && from.posx() >= 0)) {
    _internal_set_posx(from._internal_posx());
  }
  if (!(from.posy() <= 0 && from.posy() >= 0)) {
    _internal_set_posy(from._internal_posy());
  }
  if (!(from.face() <= 0 && from.face() >= 0)) {
    _internal_set_face(from._internal_face());
  }
  if (from.guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from.weaponid() != 0) {
    _internal_set_weaponid(from._internal_weaponid());
  }
  if (from.armorid() != 0) {
    _internal_set_armorid(from._internal_armorid());
  }
}

void SC_AOI_NEW::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_AOI_NEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AOI_NEW::CopyFrom(const SC_AOI_NEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_AOI_NEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_AOI_NEW::IsInitialized() const {
  return true;
}

void SC_AOI_NEW::InternalSwap(SC_AOI_NEW* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actor_id_, other->actor_id_);
  swap(mapid_, other->mapid_);
  swap(actortype_, other->actortype_);
  swap(baselook_, other->baselook_);
  swap(prof_, other->prof_);
  swap(lev_, other->lev_);
  swap(campid_, other->campid_);
  swap(hp_, other->hp_);
  swap(hpmax_, other->hpmax_);
  swap(ownerid_, other->ownerid_);
  swap(movespd_, other->movespd_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(face_, other->face_);
  swap(guildid_, other->guildid_);
  swap(weaponid_, other->weaponid_);
  swap(armorid_, other->armorid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_AOI_NEW::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_AOI_REMOVE::InitAsDefaultInstance() {
}
class SC_AOI_REMOVE::_Internal {
 public:
};

SC_AOI_REMOVE::SC_AOI_REMOVE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_AOI_REMOVE)
}
SC_AOI_REMOVE::SC_AOI_REMOVE(const SC_AOI_REMOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      idlist_(from.idlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapid_ = from.mapid_;
  // @@protoc_insertion_point(copy_constructor:SC_AOI_REMOVE)
}

void SC_AOI_REMOVE::SharedCtor() {
  mapid_ = 0u;
}

SC_AOI_REMOVE::~SC_AOI_REMOVE() {
  // @@protoc_insertion_point(destructor:SC_AOI_REMOVE)
  SharedDtor();
}

void SC_AOI_REMOVE::SharedDtor() {
}

void SC_AOI_REMOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_AOI_REMOVE& SC_AOI_REMOVE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_AOI_REMOVE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_AOI_REMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_AOI_REMOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idlist_.Clear();
  mapid_ = 0u;
  _internal_metadata_.Clear();
}

const char* SC_AOI_REMOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 idlist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_idlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_idlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_AOI_REMOVE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_AOI_REMOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // repeated uint64 idlist = 2;
  {
    int byte_size = _idlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_idlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_AOI_REMOVE)
  return target;
}

size_t SC_AOI_REMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_AOI_REMOVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 idlist = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->idlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _idlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_AOI_REMOVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_AOI_REMOVE)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_AOI_REMOVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_AOI_REMOVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_AOI_REMOVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_AOI_REMOVE)
    MergeFrom(*source);
  }
}

void SC_AOI_REMOVE::MergeFrom(const SC_AOI_REMOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_AOI_REMOVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  idlist_.MergeFrom(from.idlist_);
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void SC_AOI_REMOVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_AOI_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AOI_REMOVE::CopyFrom(const SC_AOI_REMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_AOI_REMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_AOI_REMOVE::IsInitialized() const {
  return true;
}

void SC_AOI_REMOVE::InternalSwap(SC_AOI_REMOVE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  idlist_.InternalSwap(&other->idlist_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_AOI_REMOVE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_AOI_UPDATE::InitAsDefaultInstance() {
}
class SC_AOI_UPDATE::_Internal {
 public:
};

SC_AOI_UPDATE::SC_AOI_UPDATE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_AOI_UPDATE)
}
SC_AOI_UPDATE::SC_AOI_UPDATE(const SC_AOI_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&posy_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(posy_));
  // @@protoc_insertion_point(copy_constructor:SC_AOI_UPDATE)
}

void SC_AOI_UPDATE::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posy_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(posy_));
}

SC_AOI_UPDATE::~SC_AOI_UPDATE() {
  // @@protoc_insertion_point(destructor:SC_AOI_UPDATE)
  SharedDtor();
}

void SC_AOI_UPDATE::SharedDtor() {
}

void SC_AOI_UPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_AOI_UPDATE& SC_AOI_UPDATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_AOI_UPDATE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_AOI_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_AOI_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posy_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(posy_));
  _internal_metadata_.Clear();
}

const char* SC_AOI_UPDATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float posx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float posy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_AOI_UPDATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_AOI_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_actor_id(), target);
  }

  // float posx = 3;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_posx(), target);
  }

  // float posy = 4;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_posy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_AOI_UPDATE)
  return target;
}

size_t SC_AOI_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_AOI_UPDATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint32 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  // float posx = 3;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    total_size += 1 + 4;
  }

  // float posy = 4;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_AOI_UPDATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_AOI_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_AOI_UPDATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_AOI_UPDATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_AOI_UPDATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_AOI_UPDATE)
    MergeFrom(*source);
  }
}

void SC_AOI_UPDATE::MergeFrom(const SC_AOI_UPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_AOI_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (!(from.posx() <= 0 && from.posx() >= 0)) {
    _internal_set_posx(from._internal_posx());
  }
  if (!(from.posy() <= 0 && from.posy() >= 0)) {
    _internal_set_posy(from._internal_posy());
  }
}

void SC_AOI_UPDATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_AOI_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AOI_UPDATE::CopyFrom(const SC_AOI_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_AOI_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_AOI_UPDATE::IsInitialized() const {
  return true;
}

void SC_AOI_UPDATE::InternalSwap(SC_AOI_UPDATE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(mapid_, other->mapid_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_AOI_UPDATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_MAPVAL_MapVal::InitAsDefaultInstance() {
}
class SC_MAPVAL_MapVal::_Internal {
 public:
};

SC_MAPVAL_MapVal::SC_MAPVAL_MapVal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_MAPVAL.MapVal)
}
SC_MAPVAL_MapVal::SC_MAPVAL_MapVal(const SC_MAPVAL_MapVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&value_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:SC_MAPVAL.MapVal)
}

void SC_MAPVAL_MapVal::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value_)) + sizeof(key_));
}

SC_MAPVAL_MapVal::~SC_MAPVAL_MapVal() {
  // @@protoc_insertion_point(destructor:SC_MAPVAL.MapVal)
  SharedDtor();
}

void SC_MAPVAL_MapVal::SharedDtor() {
}

void SC_MAPVAL_MapVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_MAPVAL_MapVal& SC_MAPVAL_MapVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_MAPVAL_MapVal_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_MAPVAL_MapVal::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_MAPVAL.MapVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value_)) + sizeof(key_));
  _internal_metadata_.Clear();
}

const char* SC_MAPVAL_MapVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_MAPVAL_MapVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_MAPVAL.MapVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_MAPVAL.MapVal)
  return target;
}

size_t SC_MAPVAL_MapVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_MAPVAL.MapVal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // uint32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_MAPVAL_MapVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_MAPVAL.MapVal)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_MAPVAL_MapVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_MAPVAL_MapVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_MAPVAL.MapVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_MAPVAL.MapVal)
    MergeFrom(*source);
  }
}

void SC_MAPVAL_MapVal::MergeFrom(const SC_MAPVAL_MapVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_MAPVAL.MapVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void SC_MAPVAL_MapVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_MAPVAL.MapVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_MAPVAL_MapVal::CopyFrom(const SC_MAPVAL_MapVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_MAPVAL.MapVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MAPVAL_MapVal::IsInitialized() const {
  return true;
}

void SC_MAPVAL_MapVal::InternalSwap(SC_MAPVAL_MapVal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MAPVAL_MapVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_MAPVAL::InitAsDefaultInstance() {
}
class SC_MAPVAL::_Internal {
 public:
};

SC_MAPVAL::SC_MAPVAL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_MAPVAL)
}
SC_MAPVAL::SC_MAPVAL(const SC_MAPVAL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      map_val_set_(from.map_val_set_),
      user_map_val_set_(from.user_map_val_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SC_MAPVAL)
}

void SC_MAPVAL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_MAPVAL_msg_2fzone_5fservice_2eproto.base);
  state_ = 0;
}

SC_MAPVAL::~SC_MAPVAL() {
  // @@protoc_insertion_point(destructor:SC_MAPVAL)
  SharedDtor();
}

void SC_MAPVAL::SharedDtor() {
}

void SC_MAPVAL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_MAPVAL& SC_MAPVAL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_MAPVAL_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_MAPVAL::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_MAPVAL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_val_set_.Clear();
  user_map_val_set_.Clear();
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SC_MAPVAL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SC_MAPVAL.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::SC_MAPVAL_State>(val));
        } else goto handle_unusual;
        continue;
      // repeated .SC_MAPVAL.MapVal map_val_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_val_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SC_MAPVAL.MapVal user_map_val_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_map_val_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_MAPVAL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_MAPVAL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SC_MAPVAL.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // repeated .SC_MAPVAL.MapVal map_val_set = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_val_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_map_val_set(i), target, stream);
  }

  // repeated .SC_MAPVAL.MapVal user_map_val_set = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_map_val_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_user_map_val_set(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_MAPVAL)
  return target;
}

size_t SC_MAPVAL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_MAPVAL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_MAPVAL.MapVal map_val_set = 2;
  total_size += 1UL * this->_internal_map_val_set_size();
  for (const auto& msg : this->map_val_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC_MAPVAL.MapVal user_map_val_set = 3;
  total_size += 1UL * this->_internal_user_map_val_set_size();
  for (const auto& msg : this->user_map_val_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .SC_MAPVAL.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_MAPVAL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_MAPVAL)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_MAPVAL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_MAPVAL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_MAPVAL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_MAPVAL)
    MergeFrom(*source);
  }
}

void SC_MAPVAL::MergeFrom(const SC_MAPVAL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_MAPVAL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_val_set_.MergeFrom(from.map_val_set_);
  user_map_val_set_.MergeFrom(from.user_map_val_set_);
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SC_MAPVAL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_MAPVAL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_MAPVAL::CopyFrom(const SC_MAPVAL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_MAPVAL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MAPVAL::IsInitialized() const {
  return true;
}

void SC_MAPVAL::InternalSwap(SC_MAPVAL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_val_set_.InternalSwap(&other->map_val_set_);
  user_map_val_set_.InternalSwap(&other->user_map_val_set_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MAPVAL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ATTRIB_CHANGE_Data::InitAsDefaultInstance() {
}
class SC_ATTRIB_CHANGE_Data::_Internal {
 public:
};

SC_ATTRIB_CHANGE_Data::SC_ATTRIB_CHANGE_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ATTRIB_CHANGE.Data)
}
SC_ATTRIB_CHANGE_Data::SC_ATTRIB_CHANGE_Data(const SC_ATTRIB_CHANGE_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  valstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valstr().empty()) {
    valstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valstr_);
  }
  ::memcpy(&actype_, &from.actype_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&actype_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:SC_ATTRIB_CHANGE.Data)
}

void SC_ATTRIB_CHANGE_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_ATTRIB_CHANGE_Data_msg_2fzone_5fservice_2eproto.base);
  valstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&actype_)) + sizeof(val_));
}

SC_ATTRIB_CHANGE_Data::~SC_ATTRIB_CHANGE_Data() {
  // @@protoc_insertion_point(destructor:SC_ATTRIB_CHANGE.Data)
  SharedDtor();
}

void SC_ATTRIB_CHANGE_Data::SharedDtor() {
  valstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_ATTRIB_CHANGE_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ATTRIB_CHANGE_Data& SC_ATTRIB_CHANGE_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ATTRIB_CHANGE_Data_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ATTRIB_CHANGE_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ATTRIB_CHANGE.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&actype_)) + sizeof(val_));
  _internal_metadata_.Clear();
}

const char* SC_ATTRIB_CHANGE_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 actype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string valstr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_valstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_ATTRIB_CHANGE.Data.valstr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ATTRIB_CHANGE_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ATTRIB_CHANGE.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 actype = 1;
  if (this->actype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_actype(), target);
  }

  // uint32 val = 2;
  if (this->val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_val(), target);
  }

  // string valstr = 3;
  if (this->valstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valstr().data(), static_cast<int>(this->_internal_valstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_ATTRIB_CHANGE.Data.valstr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_valstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ATTRIB_CHANGE.Data)
  return target;
}

size_t SC_ATTRIB_CHANGE_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ATTRIB_CHANGE.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string valstr = 3;
  if (this->valstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valstr());
  }

  // uint32 actype = 1;
  if (this->actype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_actype());
  }

  // uint32 val = 2;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ATTRIB_CHANGE_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ATTRIB_CHANGE.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ATTRIB_CHANGE_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ATTRIB_CHANGE_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ATTRIB_CHANGE.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ATTRIB_CHANGE.Data)
    MergeFrom(*source);
  }
}

void SC_ATTRIB_CHANGE_Data::MergeFrom(const SC_ATTRIB_CHANGE_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ATTRIB_CHANGE.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valstr().size() > 0) {

    valstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valstr_);
  }
  if (from.actype() != 0) {
    _internal_set_actype(from._internal_actype());
  }
  if (from.val() != 0) {
    _internal_set_val(from._internal_val());
  }
}

void SC_ATTRIB_CHANGE_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ATTRIB_CHANGE.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ATTRIB_CHANGE_Data::CopyFrom(const SC_ATTRIB_CHANGE_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ATTRIB_CHANGE.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ATTRIB_CHANGE_Data::IsInitialized() const {
  return true;
}

void SC_ATTRIB_CHANGE_Data::InternalSwap(SC_ATTRIB_CHANGE_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  valstr_.Swap(&other->valstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actype_, other->actype_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ATTRIB_CHANGE_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ATTRIB_CHANGE::InitAsDefaultInstance() {
}
class SC_ATTRIB_CHANGE::_Internal {
 public:
};

SC_ATTRIB_CHANGE::SC_ATTRIB_CHANGE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ATTRIB_CHANGE)
}
SC_ATTRIB_CHANGE::SC_ATTRIB_CHANGE(const SC_ATTRIB_CHANGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datalist_(from.datalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actor_id_ = from.actor_id_;
  // @@protoc_insertion_point(copy_constructor:SC_ATTRIB_CHANGE)
}

void SC_ATTRIB_CHANGE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_ATTRIB_CHANGE_msg_2fzone_5fservice_2eproto.base);
  actor_id_ = PROTOBUF_ULONGLONG(0);
}

SC_ATTRIB_CHANGE::~SC_ATTRIB_CHANGE() {
  // @@protoc_insertion_point(destructor:SC_ATTRIB_CHANGE)
  SharedDtor();
}

void SC_ATTRIB_CHANGE::SharedDtor() {
}

void SC_ATTRIB_CHANGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ATTRIB_CHANGE& SC_ATTRIB_CHANGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ATTRIB_CHANGE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ATTRIB_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ATTRIB_CHANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datalist_.Clear();
  actor_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SC_ATTRIB_CHANGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ATTRIB_CHANGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ATTRIB_CHANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datalist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_datalist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ATTRIB_CHANGE)
  return target;
}

size_t SC_ATTRIB_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ATTRIB_CHANGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_ATTRIB_CHANGE.Data datalist = 2;
  total_size += 1UL * this->_internal_datalist_size();
  for (const auto& msg : this->datalist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ATTRIB_CHANGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ATTRIB_CHANGE)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ATTRIB_CHANGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ATTRIB_CHANGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ATTRIB_CHANGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ATTRIB_CHANGE)
    MergeFrom(*source);
  }
}

void SC_ATTRIB_CHANGE::MergeFrom(const SC_ATTRIB_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ATTRIB_CHANGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datalist_.MergeFrom(from.datalist_);
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
}

void SC_ATTRIB_CHANGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ATTRIB_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ATTRIB_CHANGE::CopyFrom(const SC_ATTRIB_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ATTRIB_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ATTRIB_CHANGE::IsInitialized() const {
  return true;
}

void SC_ATTRIB_CHANGE::InternalSwap(SC_ATTRIB_CHANGE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datalist_.InternalSwap(&other->datalist_);
  swap(actor_id_, other->actor_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ATTRIB_CHANGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_STATUS_LIST_Data::InitAsDefaultInstance() {
}
class SC_STATUS_LIST_Data::_Internal {
 public:
};

SC_STATUS_LIST_Data::SC_STATUS_LIST_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_LIST.Data)
}
SC_STATUS_LIST_Data::SC_STATUS_LIST_Data(const SC_STATUS_LIST_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statusid_, &from.statusid_,
    static_cast<size_t>(reinterpret_cast<char*>(&idcaster_) -
    reinterpret_cast<char*>(&statusid_)) + sizeof(idcaster_));
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_LIST.Data)
}

void SC_STATUS_LIST_Data::SharedCtor() {
  ::memset(&statusid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idcaster_) -
      reinterpret_cast<char*>(&statusid_)) + sizeof(idcaster_));
}

SC_STATUS_LIST_Data::~SC_STATUS_LIST_Data() {
  // @@protoc_insertion_point(destructor:SC_STATUS_LIST.Data)
  SharedDtor();
}

void SC_STATUS_LIST_Data::SharedDtor() {
}

void SC_STATUS_LIST_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_STATUS_LIST_Data& SC_STATUS_LIST_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_STATUS_LIST_Data_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_STATUS_LIST_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_LIST.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&statusid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idcaster_) -
      reinterpret_cast<char*>(&statusid_)) + sizeof(idcaster_));
  _internal_metadata_.Clear();
}

const char* SC_STATUS_LIST_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 statusid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          statusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 statustype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          statustype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 statuslev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          statuslev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 idcaster = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          idcaster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_STATUS_LIST_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_LIST.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusid = 1;
  if (this->statusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_statusid(), target);
  }

  // uint32 statustype = 2;
  if (this->statustype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_statustype(), target);
  }

  // uint32 statuslev = 3;
  if (this->statuslev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_statuslev(), target);
  }

  // int32 power = 4;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_power(), target);
  }

  // uint64 idcaster = 8;
  if (this->idcaster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_idcaster(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_LIST.Data)
  return target;
}

size_t SC_STATUS_LIST_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_LIST.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 statusid = 1;
  if (this->statusid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statusid());
  }

  // uint32 statustype = 2;
  if (this->statustype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statustype());
  }

  // uint32 statuslev = 3;
  if (this->statuslev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statuslev());
  }

  // int32 power = 4;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // uint64 idcaster = 8;
  if (this->idcaster() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idcaster());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_STATUS_LIST_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_LIST.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_STATUS_LIST_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_STATUS_LIST_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_LIST.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_LIST.Data)
    MergeFrom(*source);
  }
}

void SC_STATUS_LIST_Data::MergeFrom(const SC_STATUS_LIST_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_LIST.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statusid() != 0) {
    _internal_set_statusid(from._internal_statusid());
  }
  if (from.statustype() != 0) {
    _internal_set_statustype(from._internal_statustype());
  }
  if (from.statuslev() != 0) {
    _internal_set_statuslev(from._internal_statuslev());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.idcaster() != 0) {
    _internal_set_idcaster(from._internal_idcaster());
  }
}

void SC_STATUS_LIST_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_LIST.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_LIST_Data::CopyFrom(const SC_STATUS_LIST_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_LIST.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_STATUS_LIST_Data::IsInitialized() const {
  return true;
}

void SC_STATUS_LIST_Data::InternalSwap(SC_STATUS_LIST_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statusid_, other->statusid_);
  swap(statustype_, other->statustype_);
  swap(statuslev_, other->statuslev_);
  swap(power_, other->power_);
  swap(idcaster_, other->idcaster_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_STATUS_LIST_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_STATUS_LIST::InitAsDefaultInstance() {
}
class SC_STATUS_LIST::_Internal {
 public:
};

SC_STATUS_LIST::SC_STATUS_LIST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_LIST)
}
SC_STATUS_LIST::SC_STATUS_LIST(const SC_STATUS_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      status_list_(from.status_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actor_id_ = from.actor_id_;
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_LIST)
}

void SC_STATUS_LIST::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_STATUS_LIST_msg_2fzone_5fservice_2eproto.base);
  actor_id_ = PROTOBUF_ULONGLONG(0);
}

SC_STATUS_LIST::~SC_STATUS_LIST() {
  // @@protoc_insertion_point(destructor:SC_STATUS_LIST)
  SharedDtor();
}

void SC_STATUS_LIST::SharedDtor() {
}

void SC_STATUS_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_STATUS_LIST& SC_STATUS_LIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_STATUS_LIST_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_STATUS_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_list_.Clear();
  actor_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SC_STATUS_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SC_STATUS_LIST.Data status_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_STATUS_LIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // repeated .SC_STATUS_LIST.Data status_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_status_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_status_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_LIST)
  return target;
}

size_t SC_STATUS_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_STATUS_LIST.Data status_list = 2;
  total_size += 1UL * this->_internal_status_list_size();
  for (const auto& msg : this->status_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_STATUS_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_STATUS_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_STATUS_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_LIST)
    MergeFrom(*source);
  }
}

void SC_STATUS_LIST::MergeFrom(const SC_STATUS_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_list_.MergeFrom(from.status_list_);
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
}

void SC_STATUS_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_LIST::CopyFrom(const SC_STATUS_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_STATUS_LIST::IsInitialized() const {
  return true;
}

void SC_STATUS_LIST::InternalSwap(SC_STATUS_LIST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_list_.InternalSwap(&other->status_list_);
  swap(actor_id_, other->actor_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_STATUS_LIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_STATUS_INFO_Data::InitAsDefaultInstance() {
}
class SC_STATUS_INFO_Data::_Internal {
 public:
};

SC_STATUS_INFO_Data::SC_STATUS_INFO_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_INFO.Data)
}
SC_STATUS_INFO_Data::SC_STATUS_INFO_Data(const SC_STATUS_INFO_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statusid_, &from.statusid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ispause_) -
    reinterpret_cast<char*>(&statusid_)) + sizeof(ispause_));
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_INFO.Data)
}

void SC_STATUS_INFO_Data::SharedCtor() {
  ::memset(&statusid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispause_) -
      reinterpret_cast<char*>(&statusid_)) + sizeof(ispause_));
}

SC_STATUS_INFO_Data::~SC_STATUS_INFO_Data() {
  // @@protoc_insertion_point(destructor:SC_STATUS_INFO.Data)
  SharedDtor();
}

void SC_STATUS_INFO_Data::SharedDtor() {
}

void SC_STATUS_INFO_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_STATUS_INFO_Data& SC_STATUS_INFO_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_STATUS_INFO_Data_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_STATUS_INFO_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_INFO.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&statusid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispause_) -
      reinterpret_cast<char*>(&statusid_)) + sizeof(ispause_));
  _internal_metadata_.Clear();
}

const char* SC_STATUS_INFO_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 statusid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          statusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 statustype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          statustype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 statuslev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          statuslev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 laststamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          laststamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 idcaster = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          idcaster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ispause = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ispause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_STATUS_INFO_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_INFO.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusid = 1;
  if (this->statusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_statusid(), target);
  }

  // uint32 statustype = 2;
  if (this->statustype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_statustype(), target);
  }

  // uint32 statuslev = 3;
  if (this->statuslev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_statuslev(), target);
  }

  // int32 power = 4;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_power(), target);
  }

  // int32 sec = 5;
  if (this->sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sec(), target);
  }

  // int32 times = 6;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_times(), target);
  }

  // uint32 laststamp = 7;
  if (this->laststamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_laststamp(), target);
  }

  // uint64 idcaster = 8;
  if (this->idcaster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_idcaster(), target);
  }

  // bool ispause = 9;
  if (this->ispause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ispause(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_INFO.Data)
  return target;
}

size_t SC_STATUS_INFO_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_INFO.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 statusid = 1;
  if (this->statusid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statusid());
  }

  // uint32 statustype = 2;
  if (this->statustype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statustype());
  }

  // uint32 statuslev = 3;
  if (this->statuslev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statuslev());
  }

  // int32 power = 4;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // int32 sec = 5;
  if (this->sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec());
  }

  // int32 times = 6;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  // uint64 idcaster = 8;
  if (this->idcaster() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idcaster());
  }

  // uint32 laststamp = 7;
  if (this->laststamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_laststamp());
  }

  // bool ispause = 9;
  if (this->ispause() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_STATUS_INFO_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_INFO.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_STATUS_INFO_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_STATUS_INFO_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_INFO.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_INFO.Data)
    MergeFrom(*source);
  }
}

void SC_STATUS_INFO_Data::MergeFrom(const SC_STATUS_INFO_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_INFO.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statusid() != 0) {
    _internal_set_statusid(from._internal_statusid());
  }
  if (from.statustype() != 0) {
    _internal_set_statustype(from._internal_statustype());
  }
  if (from.statuslev() != 0) {
    _internal_set_statuslev(from._internal_statuslev());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.sec() != 0) {
    _internal_set_sec(from._internal_sec());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.idcaster() != 0) {
    _internal_set_idcaster(from._internal_idcaster());
  }
  if (from.laststamp() != 0) {
    _internal_set_laststamp(from._internal_laststamp());
  }
  if (from.ispause() != 0) {
    _internal_set_ispause(from._internal_ispause());
  }
}

void SC_STATUS_INFO_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_INFO.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_INFO_Data::CopyFrom(const SC_STATUS_INFO_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_INFO.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_STATUS_INFO_Data::IsInitialized() const {
  return true;
}

void SC_STATUS_INFO_Data::InternalSwap(SC_STATUS_INFO_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statusid_, other->statusid_);
  swap(statustype_, other->statustype_);
  swap(statuslev_, other->statuslev_);
  swap(power_, other->power_);
  swap(sec_, other->sec_);
  swap(times_, other->times_);
  swap(idcaster_, other->idcaster_);
  swap(laststamp_, other->laststamp_);
  swap(ispause_, other->ispause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_STATUS_INFO_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_STATUS_INFO::InitAsDefaultInstance() {
}
class SC_STATUS_INFO::_Internal {
 public:
};

SC_STATUS_INFO::SC_STATUS_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_INFO)
}
SC_STATUS_INFO::SC_STATUS_INFO(const SC_STATUS_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      statuslist_(from.statuslist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actor_id_ = from.actor_id_;
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_INFO)
}

void SC_STATUS_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_STATUS_INFO_msg_2fzone_5fservice_2eproto.base);
  actor_id_ = PROTOBUF_ULONGLONG(0);
}

SC_STATUS_INFO::~SC_STATUS_INFO() {
  // @@protoc_insertion_point(destructor:SC_STATUS_INFO)
  SharedDtor();
}

void SC_STATUS_INFO::SharedDtor() {
}

void SC_STATUS_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_STATUS_INFO& SC_STATUS_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_STATUS_INFO_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_STATUS_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statuslist_.Clear();
  actor_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SC_STATUS_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SC_STATUS_INFO.Data statuslist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_STATUS_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // repeated .SC_STATUS_INFO.Data statuslist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statuslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_statuslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_INFO)
  return target;
}

size_t SC_STATUS_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_STATUS_INFO.Data statuslist = 2;
  total_size += 1UL * this->_internal_statuslist_size();
  for (const auto& msg : this->statuslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_STATUS_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_STATUS_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_STATUS_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_INFO)
    MergeFrom(*source);
  }
}

void SC_STATUS_INFO::MergeFrom(const SC_STATUS_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statuslist_.MergeFrom(from.statuslist_);
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
}

void SC_STATUS_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_INFO::CopyFrom(const SC_STATUS_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_STATUS_INFO::IsInitialized() const {
  return true;
}

void SC_STATUS_INFO::InternalSwap(SC_STATUS_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  statuslist_.InternalSwap(&other->statuslist_);
  swap(actor_id_, other->actor_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_STATUS_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_STATUS_ACTION::InitAsDefaultInstance() {
}
class SC_STATUS_ACTION::_Internal {
 public:
};

SC_STATUS_ACTION::SC_STATUS_ACTION()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_STATUS_ACTION)
}
SC_STATUS_ACTION::SC_STATUS_ACTION(const SC_STATUS_ACTION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuslev_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(statuslev_));
  // @@protoc_insertion_point(copy_constructor:SC_STATUS_ACTION)
}

void SC_STATUS_ACTION::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuslev_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(statuslev_));
}

SC_STATUS_ACTION::~SC_STATUS_ACTION() {
  // @@protoc_insertion_point(destructor:SC_STATUS_ACTION)
  SharedDtor();
}

void SC_STATUS_ACTION::SharedDtor() {
}

void SC_STATUS_ACTION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_STATUS_ACTION& SC_STATUS_ACTION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_STATUS_ACTION_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_STATUS_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_STATUS_ACTION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuslev_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(statuslev_));
  _internal_metadata_.Clear();
}

const char* SC_STATUS_ACTION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SC_STATUS_ACTION.ACTION action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::SC_STATUS_ACTION_ACTION>(val));
        } else goto handle_unusual;
        continue;
      // uint32 statusid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          statusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 statustype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          statustype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 statuslev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          statuslev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_STATUS_ACTION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_STATUS_ACTION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // .SC_STATUS_ACTION.ACTION action = 2;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // uint32 statusid = 3;
  if (this->statusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_statusid(), target);
  }

  // uint32 statustype = 4;
  if (this->statustype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_statustype(), target);
  }

  // uint32 statuslev = 5;
  if (this->statuslev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_statuslev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_STATUS_ACTION)
  return target;
}

size_t SC_STATUS_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_STATUS_ACTION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // .SC_STATUS_ACTION.ACTION action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 statusid = 3;
  if (this->statusid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statusid());
  }

  // uint32 statustype = 4;
  if (this->statustype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statustype());
  }

  // uint32 statuslev = 5;
  if (this->statuslev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statuslev());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_STATUS_ACTION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_STATUS_ACTION)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_STATUS_ACTION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_STATUS_ACTION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_STATUS_ACTION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_STATUS_ACTION)
    MergeFrom(*source);
  }
}

void SC_STATUS_ACTION::MergeFrom(const SC_STATUS_ACTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_STATUS_ACTION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.statusid() != 0) {
    _internal_set_statusid(from._internal_statusid());
  }
  if (from.statustype() != 0) {
    _internal_set_statustype(from._internal_statustype());
  }
  if (from.statuslev() != 0) {
    _internal_set_statuslev(from._internal_statuslev());
  }
}

void SC_STATUS_ACTION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_STATUS_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_STATUS_ACTION::CopyFrom(const SC_STATUS_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_STATUS_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_STATUS_ACTION::IsInitialized() const {
  return true;
}

void SC_STATUS_ACTION::InternalSwap(SC_STATUS_ACTION* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(action_, other->action_);
  swap(statusid_, other->statusid_);
  swap(statustype_, other->statustype_);
  swap(statuslev_, other->statuslev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_STATUS_ACTION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_MOVE::InitAsDefaultInstance() {
}
class CS_MOVE::_Internal {
 public:
};

CS_MOVE::CS_MOVE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_MOVE)
}
CS_MOVE::CS_MOVE(const CS_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(face_));
  // @@protoc_insertion_point(copy_constructor:CS_MOVE)
}

void CS_MOVE::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(face_));
}

CS_MOVE::~CS_MOVE() {
  // @@protoc_insertion_point(destructor:CS_MOVE)
  SharedDtor();
}

void CS_MOVE::SharedDtor() {
}

void CS_MOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_MOVE& CS_MOVE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_MOVE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_MOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(face_));
  _internal_metadata_.Clear();
}

const char* CS_MOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float face = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_MOVE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_MOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float face = 4;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_face(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_MOVE)
  return target;
}

size_t CS_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_MOVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float face = 4;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_MOVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_MOVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_MOVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_MOVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_MOVE)
    MergeFrom(*source);
  }
}

void CS_MOVE::MergeFrom(const CS_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.face() <= 0 && from.face() >= 0)) {
    _internal_set_face(from._internal_face());
  }
}

void CS_MOVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_MOVE::CopyFrom(const CS_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MOVE::IsInitialized() const {
  return true;
}

void CS_MOVE::InternalSwap(CS_MOVE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(face_, other->face_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_MOVE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_CHANGEMAP::InitAsDefaultInstance() {
}
class CS_CHANGEMAP::_Internal {
 public:
};

CS_CHANGEMAP::CS_CHANGEMAP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CHANGEMAP)
}
CS_CHANGEMAP::CS_CHANGEMAP(const CS_CHANGEMAP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&leavepoint_idx_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(leavepoint_idx_));
  // @@protoc_insertion_point(copy_constructor:CS_CHANGEMAP)
}

void CS_CHANGEMAP::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leavepoint_idx_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(leavepoint_idx_));
}

CS_CHANGEMAP::~CS_CHANGEMAP() {
  // @@protoc_insertion_point(destructor:CS_CHANGEMAP)
  SharedDtor();
}

void CS_CHANGEMAP::SharedDtor() {
}

void CS_CHANGEMAP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_CHANGEMAP& CS_CHANGEMAP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_CHANGEMAP_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_CHANGEMAP::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CHANGEMAP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leavepoint_idx_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(leavepoint_idx_));
  _internal_metadata_.Clear();
}

const char* CS_CHANGEMAP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leavepoint_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leavepoint_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_CHANGEMAP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_CHANGEMAP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  // uint32 leavepoint_idx = 2;
  if (this->leavepoint_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leavepoint_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_CHANGEMAP)
  return target;
}

size_t CS_CHANGEMAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CHANGEMAP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  // uint32 leavepoint_idx = 2;
  if (this->leavepoint_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leavepoint_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_CHANGEMAP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CHANGEMAP)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_CHANGEMAP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_CHANGEMAP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CHANGEMAP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CHANGEMAP)
    MergeFrom(*source);
  }
}

void CS_CHANGEMAP::MergeFrom(const CS_CHANGEMAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CHANGEMAP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.leavepoint_idx() != 0) {
    _internal_set_leavepoint_idx(from._internal_leavepoint_idx());
  }
}

void CS_CHANGEMAP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CHANGEMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CHANGEMAP::CopyFrom(const CS_CHANGEMAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CHANGEMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CHANGEMAP::IsInitialized() const {
  return true;
}

void CS_CHANGEMAP::InternalSwap(CS_CHANGEMAP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(leavepoint_idx_, other->leavepoint_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CHANGEMAP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_CASTSKILL::InitAsDefaultInstance() {
}
class CS_CASTSKILL::_Internal {
 public:
};

CS_CASTSKILL::CS_CASTSKILL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CASTSKILL)
}
CS_CASTSKILL::CS_CASTSKILL(const CS_CASTSKILL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CS_CASTSKILL)
}

void CS_CASTSKILL::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(y_));
}

CS_CASTSKILL::~CS_CASTSKILL() {
  // @@protoc_insertion_point(destructor:CS_CASTSKILL)
  SharedDtor();
}

void CS_CASTSKILL::SharedDtor() {
}

void CS_CASTSKILL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_CASTSKILL& CS_CASTSKILL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_CASTSKILL_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_CASTSKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CASTSKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* CS_CASTSKILL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skill_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_CASTSKILL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_CASTSKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skill_id(), target);
  }

  // uint64 target_id = 3;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_target_id(), target);
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_CASTSKILL)
  return target;
}

size_t CS_CASTSKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CASTSKILL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  // uint64 target_id = 3;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skill_id());
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_CASTSKILL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CASTSKILL)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_CASTSKILL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_CASTSKILL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CASTSKILL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CASTSKILL)
    MergeFrom(*source);
  }
}

void CS_CASTSKILL::MergeFrom(const CS_CASTSKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CASTSKILL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.skill_id() != 0) {
    _internal_set_skill_id(from._internal_skill_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void CS_CASTSKILL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CASTSKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CASTSKILL::CopyFrom(const CS_CASTSKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CASTSKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CASTSKILL::IsInitialized() const {
  return true;
}

void CS_CASTSKILL::InternalSwap(CS_CASTSKILL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(target_id_, other->target_id_);
  swap(skill_id_, other->skill_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CASTSKILL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_CASTSKILL::InitAsDefaultInstance() {
}
class SC_CASTSKILL::_Internal {
 public:
};

SC_CASTSKILL::SC_CASTSKILL()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CASTSKILL)
}
SC_CASTSKILL::SC_CASTSKILL(const SC_CASTSKILL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:SC_CASTSKILL)
}

void SC_CASTSKILL::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(y_));
}

SC_CASTSKILL::~SC_CASTSKILL() {
  // @@protoc_insertion_point(destructor:SC_CASTSKILL)
  SharedDtor();
}

void SC_CASTSKILL::SharedDtor() {
}

void SC_CASTSKILL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_CASTSKILL& SC_CASTSKILL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_CASTSKILL_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_CASTSKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CASTSKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* SC_CASTSKILL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skill_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_CASTSKILL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_CASTSKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_actor_id(), target);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skill_id(), target);
  }

  // uint64 target_id = 4;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_target_id(), target);
  }

  // float x = 5;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_x(), target);
  }

  // float y = 6;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CASTSKILL)
  return target;
}

size_t SC_CASTSKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CASTSKILL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint64 target_id = 4;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skill_id());
  }

  // float x = 5;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 6;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_CASTSKILL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CASTSKILL)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_CASTSKILL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_CASTSKILL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CASTSKILL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CASTSKILL)
    MergeFrom(*source);
  }
}

void SC_CASTSKILL::MergeFrom(const SC_CASTSKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CASTSKILL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.skill_id() != 0) {
    _internal_set_skill_id(from._internal_skill_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void SC_CASTSKILL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CASTSKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CASTSKILL::CopyFrom(const SC_CASTSKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CASTSKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CASTSKILL::IsInitialized() const {
  return true;
}

void SC_CASTSKILL::InternalSwap(SC_CASTSKILL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(actor_id_, other->actor_id_);
  swap(target_id_, other->target_id_);
  swap(skill_id_, other->skill_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CASTSKILL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_SKILL_DAMAGE_DamageInfo::InitAsDefaultInstance() {
}
class SC_SKILL_DAMAGE_DamageInfo::_Internal {
 public:
};

SC_SKILL_DAMAGE_DamageInfo::SC_SKILL_DAMAGE_DamageInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_DAMAGE.DamageInfo)
}
SC_SKILL_DAMAGE_DamageInfo::SC_SKILL_DAMAGE_DamageInfo(const SC_SKILL_DAMAGE_DamageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_DAMAGE.DamageInfo)
}

void SC_SKILL_DAMAGE_DamageInfo::SharedCtor() {
  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(damage_));
}

SC_SKILL_DAMAGE_DamageInfo::~SC_SKILL_DAMAGE_DamageInfo() {
  // @@protoc_insertion_point(destructor:SC_SKILL_DAMAGE.DamageInfo)
  SharedDtor();
}

void SC_SKILL_DAMAGE_DamageInfo::SharedDtor() {
}

void SC_SKILL_DAMAGE_DamageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SKILL_DAMAGE_DamageInfo& SC_SKILL_DAMAGE_DamageInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SKILL_DAMAGE_DamageInfo_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_SKILL_DAMAGE_DamageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_DAMAGE.DamageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(damage_));
  _internal_metadata_.Clear();
}

const char* SC_SKILL_DAMAGE_DamageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SKILL_DAMAGE_DamageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_DAMAGE.DamageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 target_id = 1;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_target_id(), target);
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_DAMAGE.DamageInfo)
  return target;
}

size_t SC_SKILL_DAMAGE_DamageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_DAMAGE.DamageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 target_id = 1;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_damage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SKILL_DAMAGE_DamageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_DAMAGE.DamageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SKILL_DAMAGE_DamageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SKILL_DAMAGE_DamageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_DAMAGE.DamageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_DAMAGE.DamageInfo)
    MergeFrom(*source);
  }
}

void SC_SKILL_DAMAGE_DamageInfo::MergeFrom(const SC_SKILL_DAMAGE_DamageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_DAMAGE.DamageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.damage() != 0) {
    _internal_set_damage(from._internal_damage());
  }
}

void SC_SKILL_DAMAGE_DamageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_DAMAGE.DamageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_DAMAGE_DamageInfo::CopyFrom(const SC_SKILL_DAMAGE_DamageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_DAMAGE.DamageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SKILL_DAMAGE_DamageInfo::IsInitialized() const {
  return true;
}

void SC_SKILL_DAMAGE_DamageInfo::InternalSwap(SC_SKILL_DAMAGE_DamageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_id_, other->target_id_);
  swap(damage_, other->damage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SKILL_DAMAGE_DamageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_SKILL_DAMAGE::InitAsDefaultInstance() {
}
class SC_SKILL_DAMAGE::_Internal {
 public:
};

SC_SKILL_DAMAGE::SC_SKILL_DAMAGE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_DAMAGE)
}
SC_SKILL_DAMAGE::SC_SKILL_DAMAGE(const SC_SKILL_DAMAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      damagelist_(from.damagelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_DAMAGE)
}

void SC_SKILL_DAMAGE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_SKILL_DAMAGE_msg_2fzone_5fservice_2eproto.base);
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(skill_id_));
}

SC_SKILL_DAMAGE::~SC_SKILL_DAMAGE() {
  // @@protoc_insertion_point(destructor:SC_SKILL_DAMAGE)
  SharedDtor();
}

void SC_SKILL_DAMAGE::SharedDtor() {
}

void SC_SKILL_DAMAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SKILL_DAMAGE& SC_SKILL_DAMAGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SKILL_DAMAGE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_SKILL_DAMAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_DAMAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  damagelist_.Clear();
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

const char* SC_SKILL_DAMAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skill_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damagelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SKILL_DAMAGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_DAMAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_actor_id(), target);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skill_id(), target);
  }

  // repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_damagelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_damagelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_DAMAGE)
  return target;
}

size_t SC_SKILL_DAMAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_DAMAGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_SKILL_DAMAGE.DamageInfo damagelist = 5;
  total_size += 1UL * this->_internal_damagelist_size();
  for (const auto& msg : this->damagelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skill_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SKILL_DAMAGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_DAMAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SKILL_DAMAGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SKILL_DAMAGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_DAMAGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_DAMAGE)
    MergeFrom(*source);
  }
}

void SC_SKILL_DAMAGE::MergeFrom(const SC_SKILL_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_DAMAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  damagelist_.MergeFrom(from.damagelist_);
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.skill_id() != 0) {
    _internal_set_skill_id(from._internal_skill_id());
  }
}

void SC_SKILL_DAMAGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_DAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_DAMAGE::CopyFrom(const SC_SKILL_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_DAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SKILL_DAMAGE::IsInitialized() const {
  return true;
}

void SC_SKILL_DAMAGE::InternalSwap(SC_SKILL_DAMAGE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  damagelist_.InternalSwap(&other->damagelist_);
  swap(mapid_, other->mapid_);
  swap(actor_id_, other->actor_id_);
  swap(skill_id_, other->skill_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SKILL_DAMAGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_SKILL_BREAK::InitAsDefaultInstance() {
}
class CS_SKILL_BREAK::_Internal {
 public:
};

CS_SKILL_BREAK::CS_SKILL_BREAK()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SKILL_BREAK)
}
CS_SKILL_BREAK::CS_SKILL_BREAK(const CS_SKILL_BREAK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapid_ = from.mapid_;
  // @@protoc_insertion_point(copy_constructor:CS_SKILL_BREAK)
}

void CS_SKILL_BREAK::SharedCtor() {
  mapid_ = PROTOBUF_ULONGLONG(0);
}

CS_SKILL_BREAK::~CS_SKILL_BREAK() {
  // @@protoc_insertion_point(destructor:CS_SKILL_BREAK)
  SharedDtor();
}

void CS_SKILL_BREAK::SharedDtor() {
}

void CS_SKILL_BREAK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_SKILL_BREAK& CS_SKILL_BREAK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_SKILL_BREAK_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_SKILL_BREAK::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SKILL_BREAK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_SKILL_BREAK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_SKILL_BREAK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_SKILL_BREAK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_SKILL_BREAK)
  return target;
}

size_t CS_SKILL_BREAK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SKILL_BREAK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_SKILL_BREAK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SKILL_BREAK)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_SKILL_BREAK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_SKILL_BREAK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SKILL_BREAK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SKILL_BREAK)
    MergeFrom(*source);
  }
}

void CS_SKILL_BREAK::MergeFrom(const CS_SKILL_BREAK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SKILL_BREAK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
}

void CS_SKILL_BREAK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SKILL_BREAK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SKILL_BREAK::CopyFrom(const CS_SKILL_BREAK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SKILL_BREAK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SKILL_BREAK::IsInitialized() const {
  return true;
}

void CS_SKILL_BREAK::InternalSwap(CS_SKILL_BREAK* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_SKILL_BREAK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_SKILL_BREAK::InitAsDefaultInstance() {
}
class SC_SKILL_BREAK::_Internal {
 public:
};

SC_SKILL_BREAK::SC_SKILL_BREAK()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_BREAK)
}
SC_SKILL_BREAK::SC_SKILL_BREAK(const SC_SKILL_BREAK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actor_id_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(actor_id_));
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_BREAK)
}

void SC_SKILL_BREAK::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_id_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(actor_id_));
}

SC_SKILL_BREAK::~SC_SKILL_BREAK() {
  // @@protoc_insertion_point(destructor:SC_SKILL_BREAK)
  SharedDtor();
}

void SC_SKILL_BREAK::SharedDtor() {
}

void SC_SKILL_BREAK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SKILL_BREAK& SC_SKILL_BREAK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SKILL_BREAK_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_SKILL_BREAK::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_BREAK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_id_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(actor_id_));
  _internal_metadata_.Clear();
}

const char* SC_SKILL_BREAK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SKILL_BREAK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_BREAK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_actor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_BREAK)
  return target;
}

size_t SC_SKILL_BREAK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_BREAK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SKILL_BREAK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_BREAK)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SKILL_BREAK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SKILL_BREAK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_BREAK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_BREAK)
    MergeFrom(*source);
  }
}

void SC_SKILL_BREAK::MergeFrom(const SC_SKILL_BREAK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_BREAK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
}

void SC_SKILL_BREAK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_BREAK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_BREAK::CopyFrom(const SC_SKILL_BREAK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_BREAK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SKILL_BREAK::IsInitialized() const {
  return true;
}

void SC_SKILL_BREAK::InternalSwap(SC_SKILL_BREAK* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(actor_id_, other->actor_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SKILL_BREAK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_SKILL_CHGTARGETPOS::InitAsDefaultInstance() {
}
class CS_SKILL_CHGTARGETPOS::_Internal {
 public:
};

CS_SKILL_CHGTARGETPOS::CS_SKILL_CHGTARGETPOS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SKILL_CHGTARGETPOS)
}
CS_SKILL_CHGTARGETPOS::CS_SKILL_CHGTARGETPOS(const CS_SKILL_CHGTARGETPOS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CS_SKILL_CHGTARGETPOS)
}

void CS_SKILL_CHGTARGETPOS::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CS_SKILL_CHGTARGETPOS::~CS_SKILL_CHGTARGETPOS() {
  // @@protoc_insertion_point(destructor:CS_SKILL_CHGTARGETPOS)
  SharedDtor();
}

void CS_SKILL_CHGTARGETPOS::SharedDtor() {
}

void CS_SKILL_CHGTARGETPOS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_SKILL_CHGTARGETPOS& CS_SKILL_CHGTARGETPOS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_SKILL_CHGTARGETPOS_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_SKILL_CHGTARGETPOS::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SKILL_CHGTARGETPOS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* CS_SKILL_CHGTARGETPOS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_SKILL_CHGTARGETPOS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_SKILL_CHGTARGETPOS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_SKILL_CHGTARGETPOS)
  return target;
}

size_t CS_SKILL_CHGTARGETPOS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SKILL_CHGTARGETPOS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_SKILL_CHGTARGETPOS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SKILL_CHGTARGETPOS)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_SKILL_CHGTARGETPOS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_SKILL_CHGTARGETPOS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SKILL_CHGTARGETPOS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SKILL_CHGTARGETPOS)
    MergeFrom(*source);
  }
}

void CS_SKILL_CHGTARGETPOS::MergeFrom(const CS_SKILL_CHGTARGETPOS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SKILL_CHGTARGETPOS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void CS_SKILL_CHGTARGETPOS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SKILL_CHGTARGETPOS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SKILL_CHGTARGETPOS::CopyFrom(const CS_SKILL_CHGTARGETPOS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SKILL_CHGTARGETPOS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SKILL_CHGTARGETPOS::IsInitialized() const {
  return true;
}

void CS_SKILL_CHGTARGETPOS::InternalSwap(CS_SKILL_CHGTARGETPOS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_SKILL_CHGTARGETPOS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_SKILL_STUN::InitAsDefaultInstance() {
}
class SC_SKILL_STUN::_Internal {
 public:
};

SC_SKILL_STUN::SC_SKILL_STUN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_STUN)
}
SC_SKILL_STUN::SC_SKILL_STUN(const SC_SKILL_STUN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stun_ms_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(stun_ms_));
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_STUN)
}

void SC_SKILL_STUN::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stun_ms_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(stun_ms_));
}

SC_SKILL_STUN::~SC_SKILL_STUN() {
  // @@protoc_insertion_point(destructor:SC_SKILL_STUN)
  SharedDtor();
}

void SC_SKILL_STUN::SharedDtor() {
}

void SC_SKILL_STUN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SKILL_STUN& SC_SKILL_STUN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SKILL_STUN_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_SKILL_STUN::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_STUN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stun_ms_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(stun_ms_));
  _internal_metadata_.Clear();
}

const char* SC_SKILL_STUN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skill_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stun_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stun_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SKILL_STUN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_STUN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_actor_id(), target);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skill_id(), target);
  }

  // uint32 stun_ms = 4;
  if (this->stun_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stun_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_STUN)
  return target;
}

size_t SC_SKILL_STUN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_STUN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skill_id());
  }

  // uint32 stun_ms = 4;
  if (this->stun_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stun_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SKILL_STUN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_STUN)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SKILL_STUN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SKILL_STUN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_STUN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_STUN)
    MergeFrom(*source);
  }
}

void SC_SKILL_STUN::MergeFrom(const SC_SKILL_STUN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_STUN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.skill_id() != 0) {
    _internal_set_skill_id(from._internal_skill_id());
  }
  if (from.stun_ms() != 0) {
    _internal_set_stun_ms(from._internal_stun_ms());
  }
}

void SC_SKILL_STUN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_STUN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_STUN::CopyFrom(const SC_SKILL_STUN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_STUN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SKILL_STUN::IsInitialized() const {
  return true;
}

void SC_SKILL_STUN::InternalSwap(SC_SKILL_STUN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(actor_id_, other->actor_id_);
  swap(skill_id_, other->skill_id_);
  swap(stun_ms_, other->stun_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SKILL_STUN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_SKILL_EFFACT::InitAsDefaultInstance() {
}
class SC_SKILL_EFFACT::_Internal {
 public:
};

SC_SKILL_EFFACT::SC_SKILL_EFFACT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SKILL_EFFACT)
}
SC_SKILL_EFFACT::SC_SKILL_EFFACT(const SC_SKILL_EFFACT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:SC_SKILL_EFFACT)
}

void SC_SKILL_EFFACT::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(skill_id_));
}

SC_SKILL_EFFACT::~SC_SKILL_EFFACT() {
  // @@protoc_insertion_point(destructor:SC_SKILL_EFFACT)
  SharedDtor();
}

void SC_SKILL_EFFACT::SharedDtor() {
}

void SC_SKILL_EFFACT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SKILL_EFFACT& SC_SKILL_EFFACT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SKILL_EFFACT_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_SKILL_EFFACT::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SKILL_EFFACT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

const char* SC_SKILL_EFFACT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skill_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SKILL_EFFACT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SKILL_EFFACT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mapid(), target);
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_actor_id(), target);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skill_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SKILL_EFFACT)
  return target;
}

size_t SC_SKILL_EFFACT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SKILL_EFFACT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 mapid = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mapid());
  }

  // uint64 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skill_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SKILL_EFFACT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SKILL_EFFACT)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SKILL_EFFACT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SKILL_EFFACT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SKILL_EFFACT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SKILL_EFFACT)
    MergeFrom(*source);
  }
}

void SC_SKILL_EFFACT::MergeFrom(const SC_SKILL_EFFACT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SKILL_EFFACT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.skill_id() != 0) {
    _internal_set_skill_id(from._internal_skill_id());
  }
}

void SC_SKILL_EFFACT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SKILL_EFFACT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SKILL_EFFACT::CopyFrom(const SC_SKILL_EFFACT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SKILL_EFFACT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SKILL_EFFACT::IsInitialized() const {
  return true;
}

void SC_SKILL_EFFACT::InternalSwap(SC_SKILL_EFFACT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(actor_id_, other->actor_id_);
  swap(skill_id_, other->skill_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SKILL_EFFACT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_DAMAGE::InitAsDefaultInstance() {
}
class SC_DAMAGE::_Internal {
 public:
};

SC_DAMAGE::SC_DAMAGE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DAMAGE)
}
SC_DAMAGE::SC_DAMAGE(const SC_DAMAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&crtical_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(crtical_));
  // @@protoc_insertion_point(copy_constructor:SC_DAMAGE)
}

void SC_DAMAGE::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crtical_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(crtical_));
}

SC_DAMAGE::~SC_DAMAGE() {
  // @@protoc_insertion_point(destructor:SC_DAMAGE)
  SharedDtor();
}

void SC_DAMAGE::SharedDtor() {
}

void SC_DAMAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_DAMAGE& SC_DAMAGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_DAMAGE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_DAMAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DAMAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crtical_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(crtical_));
  _internal_metadata_.Clear();
}

const char* SC_DAMAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 attacker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attacker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hittype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hittype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool crtical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          crtical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_DAMAGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_DAMAGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_attacker_id(), target);
  }

  // uint32 damage = 3;
  if (this->damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage(), target);
  }

  // uint32 hittype = 4;
  if (this->hittype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hittype(), target);
  }

  // bool crtical = 5;
  if (this->crtical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_crtical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_DAMAGE)
  return target;
}

size_t SC_DAMAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DAMAGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_attacker_id());
  }

  // uint32 damage = 3;
  if (this->damage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_damage());
  }

  // uint32 hittype = 4;
  if (this->hittype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hittype());
  }

  // bool crtical = 5;
  if (this->crtical() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_DAMAGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DAMAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_DAMAGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_DAMAGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DAMAGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DAMAGE)
    MergeFrom(*source);
  }
}

void SC_DAMAGE::MergeFrom(const SC_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DAMAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.attacker_id() != 0) {
    _internal_set_attacker_id(from._internal_attacker_id());
  }
  if (from.damage() != 0) {
    _internal_set_damage(from._internal_damage());
  }
  if (from.hittype() != 0) {
    _internal_set_hittype(from._internal_hittype());
  }
  if (from.crtical() != 0) {
    _internal_set_crtical(from._internal_crtical());
  }
}

void SC_DAMAGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DAMAGE::CopyFrom(const SC_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_DAMAGE::IsInitialized() const {
  return true;
}

void SC_DAMAGE::InternalSwap(SC_DAMAGE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(attacker_id_, other->attacker_id_);
  swap(damage_, other->damage_);
  swap(hittype_, other->hittype_);
  swap(crtical_, other->crtical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_DAMAGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_DEAD::InitAsDefaultInstance() {
}
class SC_DEAD::_Internal {
 public:
};

SC_DEAD::SC_DEAD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DEAD)
}
SC_DEAD::SC_DEAD(const SC_DEAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attacker_id_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(attacker_id_));
  // @@protoc_insertion_point(copy_constructor:SC_DEAD)
}

void SC_DEAD::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attacker_id_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(attacker_id_));
}

SC_DEAD::~SC_DEAD() {
  // @@protoc_insertion_point(destructor:SC_DEAD)
  SharedDtor();
}

void SC_DEAD::SharedDtor() {
}

void SC_DEAD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_DEAD& SC_DEAD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_DEAD_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_DEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DEAD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attacker_id_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(attacker_id_));
  _internal_metadata_.Clear();
}

const char* SC_DEAD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 attacker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attacker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_DEAD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_DEAD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_attacker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_DEAD)
  return target;
}

size_t SC_DEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DEAD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint64 attacker_id = 2;
  if (this->attacker_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_attacker_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_DEAD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DEAD)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_DEAD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_DEAD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DEAD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DEAD)
    MergeFrom(*source);
  }
}

void SC_DEAD::MergeFrom(const SC_DEAD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DEAD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.attacker_id() != 0) {
    _internal_set_attacker_id(from._internal_attacker_id());
  }
}

void SC_DEAD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DEAD::CopyFrom(const SC_DEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_DEAD::IsInitialized() const {
  return true;
}

void SC_DEAD::InternalSwap(SC_DEAD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(attacker_id_, other->attacker_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_DEAD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_CHANGE_PKMODE::InitAsDefaultInstance() {
}
class CS_CHANGE_PKMODE::_Internal {
 public:
};

CS_CHANGE_PKMODE::CS_CHANGE_PKMODE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CHANGE_PKMODE)
}
CS_CHANGE_PKMODE::CS_CHANGE_PKMODE(const CS_CHANGE_PKMODE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pkmode_ = from.pkmode_;
  // @@protoc_insertion_point(copy_constructor:CS_CHANGE_PKMODE)
}

void CS_CHANGE_PKMODE::SharedCtor() {
  pkmode_ = 0u;
}

CS_CHANGE_PKMODE::~CS_CHANGE_PKMODE() {
  // @@protoc_insertion_point(destructor:CS_CHANGE_PKMODE)
  SharedDtor();
}

void CS_CHANGE_PKMODE::SharedDtor() {
}

void CS_CHANGE_PKMODE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_CHANGE_PKMODE& CS_CHANGE_PKMODE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_CHANGE_PKMODE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CHANGE_PKMODE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pkmode_ = 0u;
  _internal_metadata_.Clear();
}

const char* CS_CHANGE_PKMODE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pkmode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pkmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_CHANGE_PKMODE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_CHANGE_PKMODE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pkmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_CHANGE_PKMODE)
  return target;
}

size_t CS_CHANGE_PKMODE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CHANGE_PKMODE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pkmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_CHANGE_PKMODE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CHANGE_PKMODE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_CHANGE_PKMODE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_CHANGE_PKMODE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CHANGE_PKMODE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CHANGE_PKMODE)
    MergeFrom(*source);
  }
}

void CS_CHANGE_PKMODE::MergeFrom(const CS_CHANGE_PKMODE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CHANGE_PKMODE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pkmode() != 0) {
    _internal_set_pkmode(from._internal_pkmode());
  }
}

void CS_CHANGE_PKMODE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CHANGE_PKMODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CHANGE_PKMODE::CopyFrom(const CS_CHANGE_PKMODE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CHANGE_PKMODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CHANGE_PKMODE::IsInitialized() const {
  return true;
}

void CS_CHANGE_PKMODE::InternalSwap(CS_CHANGE_PKMODE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pkmode_, other->pkmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CHANGE_PKMODE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_CHANGE_PKMODE::InitAsDefaultInstance() {
}
class SC_CHANGE_PKMODE::_Internal {
 public:
};

SC_CHANGE_PKMODE::SC_CHANGE_PKMODE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CHANGE_PKMODE)
}
SC_CHANGE_PKMODE::SC_CHANGE_PKMODE(const SC_CHANGE_PKMODE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pkmode_ = from.pkmode_;
  // @@protoc_insertion_point(copy_constructor:SC_CHANGE_PKMODE)
}

void SC_CHANGE_PKMODE::SharedCtor() {
  pkmode_ = 0u;
}

SC_CHANGE_PKMODE::~SC_CHANGE_PKMODE() {
  // @@protoc_insertion_point(destructor:SC_CHANGE_PKMODE)
  SharedDtor();
}

void SC_CHANGE_PKMODE::SharedDtor() {
}

void SC_CHANGE_PKMODE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_CHANGE_PKMODE& SC_CHANGE_PKMODE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_CHANGE_PKMODE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_CHANGE_PKMODE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CHANGE_PKMODE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pkmode_ = 0u;
  _internal_metadata_.Clear();
}

const char* SC_CHANGE_PKMODE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pkmode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pkmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_CHANGE_PKMODE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_CHANGE_PKMODE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pkmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CHANGE_PKMODE)
  return target;
}

size_t SC_CHANGE_PKMODE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CHANGE_PKMODE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pkmode = 1;
  if (this->pkmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pkmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_CHANGE_PKMODE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CHANGE_PKMODE)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_CHANGE_PKMODE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_CHANGE_PKMODE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CHANGE_PKMODE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CHANGE_PKMODE)
    MergeFrom(*source);
  }
}

void SC_CHANGE_PKMODE::MergeFrom(const SC_CHANGE_PKMODE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CHANGE_PKMODE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pkmode() != 0) {
    _internal_set_pkmode(from._internal_pkmode());
  }
}

void SC_CHANGE_PKMODE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CHANGE_PKMODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CHANGE_PKMODE::CopyFrom(const SC_CHANGE_PKMODE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CHANGE_PKMODE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CHANGE_PKMODE::IsInitialized() const {
  return true;
}

void SC_CHANGE_PKMODE::InternalSwap(SC_CHANGE_PKMODE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pkmode_, other->pkmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CHANGE_PKMODE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_REBORN::InitAsDefaultInstance() {
}
class CS_REBORN::_Internal {
 public:
};

CS_REBORN::CS_REBORN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_REBORN)
}
CS_REBORN::CS_REBORN(const CS_REBORN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reborn_type_ = from.reborn_type_;
  // @@protoc_insertion_point(copy_constructor:CS_REBORN)
}

void CS_REBORN::SharedCtor() {
  reborn_type_ = 0u;
}

CS_REBORN::~CS_REBORN() {
  // @@protoc_insertion_point(destructor:CS_REBORN)
  SharedDtor();
}

void CS_REBORN::SharedDtor() {
}

void CS_REBORN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_REBORN& CS_REBORN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_REBORN_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_REBORN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_REBORN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reborn_type_ = 0u;
  _internal_metadata_.Clear();
}

const char* CS_REBORN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reborn_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reborn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_REBORN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_REBORN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reborn_type = 1;
  if (this->reborn_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reborn_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_REBORN)
  return target;
}

size_t CS_REBORN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_REBORN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reborn_type = 1;
  if (this->reborn_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reborn_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_REBORN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_REBORN)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_REBORN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_REBORN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_REBORN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_REBORN)
    MergeFrom(*source);
  }
}

void CS_REBORN::MergeFrom(const CS_REBORN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_REBORN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reborn_type() != 0) {
    _internal_set_reborn_type(from._internal_reborn_type());
  }
}

void CS_REBORN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_REBORN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_REBORN::CopyFrom(const CS_REBORN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_REBORN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_REBORN::IsInitialized() const {
  return true;
}

void CS_REBORN::InternalSwap(CS_REBORN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reborn_type_, other->reborn_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_REBORN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ITEM_INFO::InitAsDefaultInstance() {
}
class SC_ITEM_INFO::_Internal {
 public:
};

SC_ITEM_INFO::SC_ITEM_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ITEM_INFO)
}
SC_ITEM_INFO::SC_ITEM_INFO(const SC_ITEM_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:SC_ITEM_INFO)
}

void SC_ITEM_INFO::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(flag_));
}

SC_ITEM_INFO::~SC_ITEM_INFO() {
  // @@protoc_insertion_point(destructor:SC_ITEM_INFO)
  SharedDtor();
}

void SC_ITEM_INFO::SharedDtor() {
}

void SC_ITEM_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ITEM_INFO& SC_ITEM_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ITEM_INFO_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ITEM_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ITEM_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(flag_));
  _internal_metadata_.Clear();
}

const char* SC_ITEM_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pile_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pile_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dura = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dura_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dura_limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dura_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expire_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 addition_lev = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          addition_lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ITEM_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ITEM_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // uint64 item_id = 2;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // uint32 position = 3;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_position(), target);
  }

  // uint32 grid = 4;
  if (this->grid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_grid(), target);
  }

  // uint32 pile_num = 5;
  if (this->pile_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pile_num(), target);
  }

  // uint32 dura = 6;
  if (this->dura() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_dura(), target);
  }

  // uint32 dura_limit = 7;
  if (this->dura_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_dura_limit(), target);
  }

  // uint32 expire_time = 8;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_expire_time(), target);
  }

  // uint32 addition_lev = 9;
  if (this->addition_lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_addition_lev(), target);
  }

  // uint32 flag = 10;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ITEM_INFO)
  return target;
}

size_t SC_ITEM_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ITEM_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint64 item_id = 2;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  // uint32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  // uint32 grid = 4;
  if (this->grid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid());
  }

  // uint32 pile_num = 5;
  if (this->pile_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pile_num());
  }

  // uint32 dura = 6;
  if (this->dura() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dura());
  }

  // uint32 dura_limit = 7;
  if (this->dura_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dura_limit());
  }

  // uint32 expire_time = 8;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expire_time());
  }

  // uint32 addition_lev = 9;
  if (this->addition_lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addition_lev());
  }

  // uint32 flag = 10;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ITEM_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ITEM_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ITEM_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ITEM_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ITEM_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ITEM_INFO)
    MergeFrom(*source);
  }
}

void SC_ITEM_INFO::MergeFrom(const SC_ITEM_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ITEM_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.grid() != 0) {
    _internal_set_grid(from._internal_grid());
  }
  if (from.pile_num() != 0) {
    _internal_set_pile_num(from._internal_pile_num());
  }
  if (from.dura() != 0) {
    _internal_set_dura(from._internal_dura());
  }
  if (from.dura_limit() != 0) {
    _internal_set_dura_limit(from._internal_dura_limit());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  if (from.addition_lev() != 0) {
    _internal_set_addition_lev(from._internal_addition_lev());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void SC_ITEM_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ITEM_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ITEM_INFO::CopyFrom(const SC_ITEM_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ITEM_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ITEM_INFO::IsInitialized() const {
  return true;
}

void SC_ITEM_INFO::InternalSwap(SC_ITEM_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(item_id_, other->item_id_);
  swap(position_, other->position_);
  swap(grid_, other->grid_);
  swap(pile_num_, other->pile_num_);
  swap(dura_, other->dura_);
  swap(dura_limit_, other->dura_limit_);
  swap(expire_time_, other->expire_time_);
  swap(addition_lev_, other->addition_lev_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ITEM_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ITEM_CHANGE_ChangeData::InitAsDefaultInstance() {
}
class SC_ITEM_CHANGE_ChangeData::_Internal {
 public:
};

SC_ITEM_CHANGE_ChangeData::SC_ITEM_CHANGE_ChangeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ITEM_CHANGE.ChangeData)
}
SC_ITEM_CHANGE_ChangeData::SC_ITEM_CHANGE_ChangeData(const SC_ITEM_CHANGE_ChangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&change_type_, &from.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&change_type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:SC_ITEM_CHANGE.ChangeData)
}

void SC_ITEM_CHANGE_ChangeData::SharedCtor() {
  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(value_));
}

SC_ITEM_CHANGE_ChangeData::~SC_ITEM_CHANGE_ChangeData() {
  // @@protoc_insertion_point(destructor:SC_ITEM_CHANGE.ChangeData)
  SharedDtor();
}

void SC_ITEM_CHANGE_ChangeData::SharedDtor() {
}

void SC_ITEM_CHANGE_ChangeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ITEM_CHANGE_ChangeData& SC_ITEM_CHANGE_ChangeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ITEM_CHANGE_ChangeData_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ITEM_CHANGE_ChangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ITEM_CHANGE.ChangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

const char* SC_ITEM_CHANGE_ChangeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SC_ITEM_CHANGE.ChangeType change_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_change_type(static_cast<::SC_ITEM_CHANGE_ChangeType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ITEM_CHANGE_ChangeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ITEM_CHANGE.ChangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SC_ITEM_CHANGE.ChangeType change_type = 1;
  if (this->change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_change_type(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ITEM_CHANGE.ChangeData)
  return target;
}

size_t SC_ITEM_CHANGE_ChangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ITEM_CHANGE.ChangeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SC_ITEM_CHANGE.ChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ITEM_CHANGE_ChangeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ITEM_CHANGE.ChangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ITEM_CHANGE_ChangeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ITEM_CHANGE_ChangeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ITEM_CHANGE.ChangeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ITEM_CHANGE.ChangeData)
    MergeFrom(*source);
  }
}

void SC_ITEM_CHANGE_ChangeData::MergeFrom(const SC_ITEM_CHANGE_ChangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ITEM_CHANGE.ChangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.change_type() != 0) {
    _internal_set_change_type(from._internal_change_type());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SC_ITEM_CHANGE_ChangeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ITEM_CHANGE.ChangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ITEM_CHANGE_ChangeData::CopyFrom(const SC_ITEM_CHANGE_ChangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ITEM_CHANGE.ChangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ITEM_CHANGE_ChangeData::IsInitialized() const {
  return true;
}

void SC_ITEM_CHANGE_ChangeData::InternalSwap(SC_ITEM_CHANGE_ChangeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(change_type_, other->change_type_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ITEM_CHANGE_ChangeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ITEM_CHANGE::InitAsDefaultInstance() {
}
class SC_ITEM_CHANGE::_Internal {
 public:
};

SC_ITEM_CHANGE::SC_ITEM_CHANGE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ITEM_CHANGE)
}
SC_ITEM_CHANGE::SC_ITEM_CHANGE(const SC_ITEM_CHANGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      change_list_(from.change_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:SC_ITEM_CHANGE)
}

void SC_ITEM_CHANGE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_ITEM_CHANGE_msg_2fzone_5fservice_2eproto.base);
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
}

SC_ITEM_CHANGE::~SC_ITEM_CHANGE() {
  // @@protoc_insertion_point(destructor:SC_ITEM_CHANGE)
  SharedDtor();
}

void SC_ITEM_CHANGE::SharedDtor() {
}

void SC_ITEM_CHANGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ITEM_CHANGE& SC_ITEM_CHANGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ITEM_CHANGE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ITEM_CHANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ITEM_CHANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_list_.Clear();
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
  _internal_metadata_.Clear();
}

const char* SC_ITEM_CHANGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ITEM_CHANGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ITEM_CHANGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 item_id = 1;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position(), target);
  }

  // repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_change_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ITEM_CHANGE)
  return target;
}

size_t SC_ITEM_CHANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ITEM_CHANGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_ITEM_CHANGE.ChangeData change_list = 3;
  total_size += 1UL * this->_internal_change_list_size();
  for (const auto& msg : this->change_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ITEM_CHANGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ITEM_CHANGE)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ITEM_CHANGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ITEM_CHANGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ITEM_CHANGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ITEM_CHANGE)
    MergeFrom(*source);
  }
}

void SC_ITEM_CHANGE::MergeFrom(const SC_ITEM_CHANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ITEM_CHANGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  change_list_.MergeFrom(from.change_list_);
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void SC_ITEM_CHANGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ITEM_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ITEM_CHANGE::CopyFrom(const SC_ITEM_CHANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ITEM_CHANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ITEM_CHANGE::IsInitialized() const {
  return true;
}

void SC_ITEM_CHANGE::InternalSwap(SC_ITEM_CHANGE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  change_list_.InternalSwap(&other->change_list_);
  swap(item_id_, other->item_id_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ITEM_CHANGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ITEM_DELETE::InitAsDefaultInstance() {
}
class SC_ITEM_DELETE::_Internal {
 public:
};

SC_ITEM_DELETE::SC_ITEM_DELETE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ITEM_DELETE)
}
SC_ITEM_DELETE::SC_ITEM_DELETE(const SC_ITEM_DELETE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grid_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(grid_));
  // @@protoc_insertion_point(copy_constructor:SC_ITEM_DELETE)
}

void SC_ITEM_DELETE::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(grid_));
}

SC_ITEM_DELETE::~SC_ITEM_DELETE() {
  // @@protoc_insertion_point(destructor:SC_ITEM_DELETE)
  SharedDtor();
}

void SC_ITEM_DELETE::SharedDtor() {
}

void SC_ITEM_DELETE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ITEM_DELETE& SC_ITEM_DELETE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ITEM_DELETE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ITEM_DELETE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ITEM_DELETE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(grid_));
  _internal_metadata_.Clear();
}

const char* SC_ITEM_DELETE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ITEM_DELETE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ITEM_DELETE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 item_id = 1;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position(), target);
  }

  // uint32 grid = 3;
  if (this->grid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ITEM_DELETE)
  return target;
}

size_t SC_ITEM_DELETE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ITEM_DELETE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  // uint32 grid = 3;
  if (this->grid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ITEM_DELETE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ITEM_DELETE)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ITEM_DELETE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ITEM_DELETE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ITEM_DELETE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ITEM_DELETE)
    MergeFrom(*source);
  }
}

void SC_ITEM_DELETE::MergeFrom(const SC_ITEM_DELETE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ITEM_DELETE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.grid() != 0) {
    _internal_set_grid(from._internal_grid());
  }
}

void SC_ITEM_DELETE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ITEM_DELETE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ITEM_DELETE::CopyFrom(const SC_ITEM_DELETE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ITEM_DELETE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ITEM_DELETE::IsInitialized() const {
  return true;
}

void SC_ITEM_DELETE::InternalSwap(SC_ITEM_DELETE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_id_, other->item_id_);
  swap(position_, other->position_);
  swap(grid_, other->grid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ITEM_DELETE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ITEM_SWAP::InitAsDefaultInstance() {
}
class CS_ITEM_SWAP::_Internal {
 public:
};

CS_ITEM_SWAP::CS_ITEM_SWAP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_SWAP)
}
CS_ITEM_SWAP::CS_ITEM_SWAP(const CS_ITEM_SWAP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&grid2_) -
    reinterpret_cast<char*>(&position_)) + sizeof(grid2_));
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_SWAP)
}

void CS_ITEM_SWAP::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid2_) -
      reinterpret_cast<char*>(&position_)) + sizeof(grid2_));
}

CS_ITEM_SWAP::~CS_ITEM_SWAP() {
  // @@protoc_insertion_point(destructor:CS_ITEM_SWAP)
  SharedDtor();
}

void CS_ITEM_SWAP::SharedDtor() {
}

void CS_ITEM_SWAP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ITEM_SWAP& CS_ITEM_SWAP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ITEM_SWAP_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ITEM_SWAP::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_SWAP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid2_) -
      reinterpret_cast<char*>(&position_)) + sizeof(grid2_));
  _internal_metadata_.Clear();
}

const char* CS_ITEM_SWAP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ITEM_SWAP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_SWAP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  // uint32 grid1 = 2;
  if (this->grid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid1(), target);
  }

  // uint32 grid2 = 3;
  if (this->grid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_SWAP)
  return target;
}

size_t CS_ITEM_SWAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_SWAP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  // uint32 grid1 = 2;
  if (this->grid1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid1());
  }

  // uint32 grid2 = 3;
  if (this->grid2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ITEM_SWAP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_SWAP)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ITEM_SWAP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ITEM_SWAP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_SWAP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_SWAP)
    MergeFrom(*source);
  }
}

void CS_ITEM_SWAP::MergeFrom(const CS_ITEM_SWAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_SWAP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.grid1() != 0) {
    _internal_set_grid1(from._internal_grid1());
  }
  if (from.grid2() != 0) {
    _internal_set_grid2(from._internal_grid2());
  }
}

void CS_ITEM_SWAP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_SWAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_SWAP::CopyFrom(const CS_ITEM_SWAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_SWAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_SWAP::IsInitialized() const {
  return true;
}

void CS_ITEM_SWAP::InternalSwap(CS_ITEM_SWAP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(grid1_, other->grid1_);
  swap(grid2_, other->grid2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_SWAP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ITEM_SPLIT::InitAsDefaultInstance() {
}
class CS_ITEM_SPLIT::_Internal {
 public:
};

CS_ITEM_SPLIT::CS_ITEM_SPLIT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_SPLIT)
}
CS_ITEM_SPLIT::CS_ITEM_SPLIT(const CS_ITEM_SPLIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&split_num_) -
    reinterpret_cast<char*>(&position_)) + sizeof(split_num_));
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_SPLIT)
}

void CS_ITEM_SPLIT::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_num_) -
      reinterpret_cast<char*>(&position_)) + sizeof(split_num_));
}

CS_ITEM_SPLIT::~CS_ITEM_SPLIT() {
  // @@protoc_insertion_point(destructor:CS_ITEM_SPLIT)
  SharedDtor();
}

void CS_ITEM_SPLIT::SharedDtor() {
}

void CS_ITEM_SPLIT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ITEM_SPLIT& CS_ITEM_SPLIT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ITEM_SPLIT_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ITEM_SPLIT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_SPLIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_num_) -
      reinterpret_cast<char*>(&position_)) + sizeof(split_num_));
  _internal_metadata_.Clear();
}

const char* CS_ITEM_SPLIT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 split_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          split_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ITEM_SPLIT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_SPLIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  // uint32 grid1 = 2;
  if (this->grid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid1(), target);
  }

  // uint32 grid2 = 3;
  if (this->grid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grid2(), target);
  }

  // uint32 split_num = 4;
  if (this->split_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_split_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_SPLIT)
  return target;
}

size_t CS_ITEM_SPLIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_SPLIT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  // uint32 grid1 = 2;
  if (this->grid1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid1());
  }

  // uint32 grid2 = 3;
  if (this->grid2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid2());
  }

  // uint32 split_num = 4;
  if (this->split_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_split_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ITEM_SPLIT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_SPLIT)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ITEM_SPLIT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ITEM_SPLIT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_SPLIT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_SPLIT)
    MergeFrom(*source);
  }
}

void CS_ITEM_SPLIT::MergeFrom(const CS_ITEM_SPLIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_SPLIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.grid1() != 0) {
    _internal_set_grid1(from._internal_grid1());
  }
  if (from.grid2() != 0) {
    _internal_set_grid2(from._internal_grid2());
  }
  if (from.split_num() != 0) {
    _internal_set_split_num(from._internal_split_num());
  }
}

void CS_ITEM_SPLIT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_SPLIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_SPLIT::CopyFrom(const CS_ITEM_SPLIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_SPLIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_SPLIT::IsInitialized() const {
  return true;
}

void CS_ITEM_SPLIT::InternalSwap(CS_ITEM_SPLIT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(grid1_, other->grid1_);
  swap(grid2_, other->grid2_);
  swap(split_num_, other->split_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_SPLIT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ITEM_COMBINE::InitAsDefaultInstance() {
}
class CS_ITEM_COMBINE::_Internal {
 public:
};

CS_ITEM_COMBINE::CS_ITEM_COMBINE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_COMBINE)
}
CS_ITEM_COMBINE::CS_ITEM_COMBINE(const CS_ITEM_COMBINE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&grid2_) -
    reinterpret_cast<char*>(&position_)) + sizeof(grid2_));
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_COMBINE)
}

void CS_ITEM_COMBINE::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid2_) -
      reinterpret_cast<char*>(&position_)) + sizeof(grid2_));
}

CS_ITEM_COMBINE::~CS_ITEM_COMBINE() {
  // @@protoc_insertion_point(destructor:CS_ITEM_COMBINE)
  SharedDtor();
}

void CS_ITEM_COMBINE::SharedDtor() {
}

void CS_ITEM_COMBINE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ITEM_COMBINE& CS_ITEM_COMBINE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ITEM_COMBINE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ITEM_COMBINE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_COMBINE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid2_) -
      reinterpret_cast<char*>(&position_)) + sizeof(grid2_));
  _internal_metadata_.Clear();
}

const char* CS_ITEM_COMBINE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ITEM_COMBINE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_COMBINE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  // uint32 grid1 = 2;
  if (this->grid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid1(), target);
  }

  // uint32 grid2 = 3;
  if (this->grid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_COMBINE)
  return target;
}

size_t CS_ITEM_COMBINE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_COMBINE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  // uint32 grid1 = 2;
  if (this->grid1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid1());
  }

  // uint32 grid2 = 3;
  if (this->grid2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ITEM_COMBINE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_COMBINE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ITEM_COMBINE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ITEM_COMBINE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_COMBINE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_COMBINE)
    MergeFrom(*source);
  }
}

void CS_ITEM_COMBINE::MergeFrom(const CS_ITEM_COMBINE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_COMBINE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.grid1() != 0) {
    _internal_set_grid1(from._internal_grid1());
  }
  if (from.grid2() != 0) {
    _internal_set_grid2(from._internal_grid2());
  }
}

void CS_ITEM_COMBINE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_COMBINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_COMBINE::CopyFrom(const CS_ITEM_COMBINE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_COMBINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_COMBINE::IsInitialized() const {
  return true;
}

void CS_ITEM_COMBINE::InternalSwap(CS_ITEM_COMBINE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(grid1_, other->grid1_);
  swap(grid2_, other->grid2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_COMBINE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ITEM_TIDY::InitAsDefaultInstance() {
}
class CS_ITEM_TIDY::_Internal {
 public:
};

CS_ITEM_TIDY::CS_ITEM_TIDY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_TIDY)
}
CS_ITEM_TIDY::CS_ITEM_TIDY(const CS_ITEM_TIDY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_TIDY)
}

void CS_ITEM_TIDY::SharedCtor() {
  position_ = 0u;
}

CS_ITEM_TIDY::~CS_ITEM_TIDY() {
  // @@protoc_insertion_point(destructor:CS_ITEM_TIDY)
  SharedDtor();
}

void CS_ITEM_TIDY::SharedDtor() {
}

void CS_ITEM_TIDY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ITEM_TIDY& CS_ITEM_TIDY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ITEM_TIDY_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ITEM_TIDY::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_TIDY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0u;
  _internal_metadata_.Clear();
}

const char* CS_ITEM_TIDY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ITEM_TIDY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_TIDY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_TIDY)
  return target;
}

size_t CS_ITEM_TIDY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_TIDY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ITEM_TIDY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_TIDY)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ITEM_TIDY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ITEM_TIDY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_TIDY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_TIDY)
    MergeFrom(*source);
  }
}

void CS_ITEM_TIDY::MergeFrom(const CS_ITEM_TIDY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_TIDY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void CS_ITEM_TIDY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_TIDY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_TIDY::CopyFrom(const CS_ITEM_TIDY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_TIDY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_TIDY::IsInitialized() const {
  return true;
}

void CS_ITEM_TIDY::InternalSwap(CS_ITEM_TIDY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_TIDY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ITEM_USE::InitAsDefaultInstance() {
}
class CS_ITEM_USE::_Internal {
 public:
};

CS_ITEM_USE::CS_ITEM_USE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_USE)
}
CS_ITEM_USE::CS_ITEM_USE(const CS_ITEM_USE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&grid_, &from.grid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&grid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_USE)
}

void CS_ITEM_USE::SharedCtor() {
  ::memset(&grid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&grid_)) + sizeof(count_));
}

CS_ITEM_USE::~CS_ITEM_USE() {
  // @@protoc_insertion_point(destructor:CS_ITEM_USE)
  SharedDtor();
}

void CS_ITEM_USE::SharedDtor() {
}

void CS_ITEM_USE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ITEM_USE& CS_ITEM_USE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ITEM_USE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ITEM_USE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_USE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&grid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&grid_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* CS_ITEM_USE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ITEM_USE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_USE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grid = 1;
  if (this->grid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_grid(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_USE)
  return target;
}

size_t CS_ITEM_USE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_USE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 grid = 1;
  if (this->grid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ITEM_USE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_USE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ITEM_USE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ITEM_USE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_USE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_USE)
    MergeFrom(*source);
  }
}

void CS_ITEM_USE::MergeFrom(const CS_ITEM_USE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_USE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grid() != 0) {
    _internal_set_grid(from._internal_grid());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void CS_ITEM_USE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_USE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_USE::CopyFrom(const CS_ITEM_USE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_USE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_USE::IsInitialized() const {
  return true;
}

void CS_ITEM_USE::InternalSwap(CS_ITEM_USE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(grid_, other->grid_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_USE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ITEM_STORAGE_OPEN::InitAsDefaultInstance() {
}
class CS_ITEM_STORAGE_OPEN::_Internal {
 public:
};

CS_ITEM_STORAGE_OPEN::CS_ITEM_STORAGE_OPEN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_STORAGE_OPEN)
}
CS_ITEM_STORAGE_OPEN::CS_ITEM_STORAGE_OPEN(const CS_ITEM_STORAGE_OPEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_STORAGE_OPEN)
}

void CS_ITEM_STORAGE_OPEN::SharedCtor() {
}

CS_ITEM_STORAGE_OPEN::~CS_ITEM_STORAGE_OPEN() {
  // @@protoc_insertion_point(destructor:CS_ITEM_STORAGE_OPEN)
  SharedDtor();
}

void CS_ITEM_STORAGE_OPEN::SharedDtor() {
}

void CS_ITEM_STORAGE_OPEN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ITEM_STORAGE_OPEN& CS_ITEM_STORAGE_OPEN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ITEM_STORAGE_OPEN_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ITEM_STORAGE_OPEN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_STORAGE_OPEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CS_ITEM_STORAGE_OPEN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ITEM_STORAGE_OPEN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_STORAGE_OPEN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_STORAGE_OPEN)
  return target;
}

size_t CS_ITEM_STORAGE_OPEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_STORAGE_OPEN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ITEM_STORAGE_OPEN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_STORAGE_OPEN)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ITEM_STORAGE_OPEN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ITEM_STORAGE_OPEN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_STORAGE_OPEN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_STORAGE_OPEN)
    MergeFrom(*source);
  }
}

void CS_ITEM_STORAGE_OPEN::MergeFrom(const CS_ITEM_STORAGE_OPEN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_STORAGE_OPEN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_ITEM_STORAGE_OPEN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_STORAGE_OPEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_STORAGE_OPEN::CopyFrom(const CS_ITEM_STORAGE_OPEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_STORAGE_OPEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_STORAGE_OPEN::IsInitialized() const {
  return true;
}

void CS_ITEM_STORAGE_OPEN::InternalSwap(CS_ITEM_STORAGE_OPEN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_STORAGE_OPEN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ITEM_STORAGE_CHECKOUT::InitAsDefaultInstance() {
}
class CS_ITEM_STORAGE_CHECKOUT::_Internal {
 public:
};

CS_ITEM_STORAGE_CHECKOUT::CS_ITEM_STORAGE_CHECKOUT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_STORAGE_CHECKOUT)
}
CS_ITEM_STORAGE_CHECKOUT::CS_ITEM_STORAGE_CHECKOUT(const CS_ITEM_STORAGE_CHECKOUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  grid_in_storage_ = from.grid_in_storage_;
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_STORAGE_CHECKOUT)
}

void CS_ITEM_STORAGE_CHECKOUT::SharedCtor() {
  grid_in_storage_ = 0u;
}

CS_ITEM_STORAGE_CHECKOUT::~CS_ITEM_STORAGE_CHECKOUT() {
  // @@protoc_insertion_point(destructor:CS_ITEM_STORAGE_CHECKOUT)
  SharedDtor();
}

void CS_ITEM_STORAGE_CHECKOUT::SharedDtor() {
}

void CS_ITEM_STORAGE_CHECKOUT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ITEM_STORAGE_CHECKOUT& CS_ITEM_STORAGE_CHECKOUT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ITEM_STORAGE_CHECKOUT_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ITEM_STORAGE_CHECKOUT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_STORAGE_CHECKOUT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grid_in_storage_ = 0u;
  _internal_metadata_.Clear();
}

const char* CS_ITEM_STORAGE_CHECKOUT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 grid_in_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grid_in_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ITEM_STORAGE_CHECKOUT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_STORAGE_CHECKOUT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grid_in_storage = 1;
  if (this->grid_in_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_grid_in_storage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_STORAGE_CHECKOUT)
  return target;
}

size_t CS_ITEM_STORAGE_CHECKOUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_STORAGE_CHECKOUT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 grid_in_storage = 1;
  if (this->grid_in_storage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid_in_storage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ITEM_STORAGE_CHECKOUT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_STORAGE_CHECKOUT)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ITEM_STORAGE_CHECKOUT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ITEM_STORAGE_CHECKOUT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_STORAGE_CHECKOUT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_STORAGE_CHECKOUT)
    MergeFrom(*source);
  }
}

void CS_ITEM_STORAGE_CHECKOUT::MergeFrom(const CS_ITEM_STORAGE_CHECKOUT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_STORAGE_CHECKOUT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grid_in_storage() != 0) {
    _internal_set_grid_in_storage(from._internal_grid_in_storage());
  }
}

void CS_ITEM_STORAGE_CHECKOUT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_STORAGE_CHECKOUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_STORAGE_CHECKOUT::CopyFrom(const CS_ITEM_STORAGE_CHECKOUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_STORAGE_CHECKOUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_STORAGE_CHECKOUT::IsInitialized() const {
  return true;
}

void CS_ITEM_STORAGE_CHECKOUT::InternalSwap(CS_ITEM_STORAGE_CHECKOUT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(grid_in_storage_, other->grid_in_storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_STORAGE_CHECKOUT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ITEM_STORAGE_CHECKIN::InitAsDefaultInstance() {
}
class CS_ITEM_STORAGE_CHECKIN::_Internal {
 public:
};

CS_ITEM_STORAGE_CHECKIN::CS_ITEM_STORAGE_CHECKIN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ITEM_STORAGE_CHECKIN)
}
CS_ITEM_STORAGE_CHECKIN::CS_ITEM_STORAGE_CHECKIN(const CS_ITEM_STORAGE_CHECKIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  grid_in_package_ = from.grid_in_package_;
  // @@protoc_insertion_point(copy_constructor:CS_ITEM_STORAGE_CHECKIN)
}

void CS_ITEM_STORAGE_CHECKIN::SharedCtor() {
  grid_in_package_ = 0u;
}

CS_ITEM_STORAGE_CHECKIN::~CS_ITEM_STORAGE_CHECKIN() {
  // @@protoc_insertion_point(destructor:CS_ITEM_STORAGE_CHECKIN)
  SharedDtor();
}

void CS_ITEM_STORAGE_CHECKIN::SharedDtor() {
}

void CS_ITEM_STORAGE_CHECKIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ITEM_STORAGE_CHECKIN& CS_ITEM_STORAGE_CHECKIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ITEM_STORAGE_CHECKIN_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ITEM_STORAGE_CHECKIN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ITEM_STORAGE_CHECKIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grid_in_package_ = 0u;
  _internal_metadata_.Clear();
}

const char* CS_ITEM_STORAGE_CHECKIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 grid_in_package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grid_in_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ITEM_STORAGE_CHECKIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ITEM_STORAGE_CHECKIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_grid_in_package(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ITEM_STORAGE_CHECKIN)
  return target;
}

size_t CS_ITEM_STORAGE_CHECKIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ITEM_STORAGE_CHECKIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid_in_package());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ITEM_STORAGE_CHECKIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ITEM_STORAGE_CHECKIN)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ITEM_STORAGE_CHECKIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ITEM_STORAGE_CHECKIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ITEM_STORAGE_CHECKIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ITEM_STORAGE_CHECKIN)
    MergeFrom(*source);
  }
}

void CS_ITEM_STORAGE_CHECKIN::MergeFrom(const CS_ITEM_STORAGE_CHECKIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ITEM_STORAGE_CHECKIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grid_in_package() != 0) {
    _internal_set_grid_in_package(from._internal_grid_in_package());
  }
}

void CS_ITEM_STORAGE_CHECKIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ITEM_STORAGE_CHECKIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ITEM_STORAGE_CHECKIN::CopyFrom(const CS_ITEM_STORAGE_CHECKIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ITEM_STORAGE_CHECKIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_STORAGE_CHECKIN::IsInitialized() const {
  return true;
}

void CS_ITEM_STORAGE_CHECKIN::InternalSwap(CS_ITEM_STORAGE_CHECKIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(grid_in_package_, other->grid_in_package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_STORAGE_CHECKIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_EQUIP::InitAsDefaultInstance() {
}
class CS_EQUIP::_Internal {
 public:
};

CS_EQUIP::CS_EQUIP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_EQUIP)
}
CS_EQUIP::CS_EQUIP(const CS_EQUIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&grid_in_package_, &from.grid_in_package_,
    static_cast<size_t>(reinterpret_cast<char*>(&grid_in_equip_) -
    reinterpret_cast<char*>(&grid_in_package_)) + sizeof(grid_in_equip_));
  // @@protoc_insertion_point(copy_constructor:CS_EQUIP)
}

void CS_EQUIP::SharedCtor() {
  ::memset(&grid_in_package_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid_in_equip_) -
      reinterpret_cast<char*>(&grid_in_package_)) + sizeof(grid_in_equip_));
}

CS_EQUIP::~CS_EQUIP() {
  // @@protoc_insertion_point(destructor:CS_EQUIP)
  SharedDtor();
}

void CS_EQUIP::SharedDtor() {
}

void CS_EQUIP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_EQUIP& CS_EQUIP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_EQUIP_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_EQUIP::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_EQUIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&grid_in_package_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid_in_equip_) -
      reinterpret_cast<char*>(&grid_in_package_)) + sizeof(grid_in_equip_));
  _internal_metadata_.Clear();
}

const char* CS_EQUIP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 grid_in_package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grid_in_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid_in_equip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grid_in_equip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_EQUIP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_EQUIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_grid_in_package(), target);
  }

  // uint32 grid_in_equip = 2;
  if (this->grid_in_equip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid_in_equip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_EQUIP)
  return target;
}

size_t CS_EQUIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_EQUIP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 grid_in_package = 1;
  if (this->grid_in_package() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid_in_package());
  }

  // uint32 grid_in_equip = 2;
  if (this->grid_in_equip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid_in_equip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_EQUIP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_EQUIP)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_EQUIP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_EQUIP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_EQUIP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_EQUIP)
    MergeFrom(*source);
  }
}

void CS_EQUIP::MergeFrom(const CS_EQUIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_EQUIP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grid_in_package() != 0) {
    _internal_set_grid_in_package(from._internal_grid_in_package());
  }
  if (from.grid_in_equip() != 0) {
    _internal_set_grid_in_equip(from._internal_grid_in_equip());
  }
}

void CS_EQUIP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_EQUIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_EQUIP::CopyFrom(const CS_EQUIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_EQUIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_EQUIP::IsInitialized() const {
  return true;
}

void CS_EQUIP::InternalSwap(CS_EQUIP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(grid_in_package_, other->grid_in_package_);
  swap(grid_in_equip_, other->grid_in_equip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_EQUIP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_UNEQUIP::InitAsDefaultInstance() {
}
class CS_UNEQUIP::_Internal {
 public:
};

CS_UNEQUIP::CS_UNEQUIP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_UNEQUIP)
}
CS_UNEQUIP::CS_UNEQUIP(const CS_UNEQUIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  grid_in_equip_ = from.grid_in_equip_;
  // @@protoc_insertion_point(copy_constructor:CS_UNEQUIP)
}

void CS_UNEQUIP::SharedCtor() {
  grid_in_equip_ = 0u;
}

CS_UNEQUIP::~CS_UNEQUIP() {
  // @@protoc_insertion_point(destructor:CS_UNEQUIP)
  SharedDtor();
}

void CS_UNEQUIP::SharedDtor() {
}

void CS_UNEQUIP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_UNEQUIP& CS_UNEQUIP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_UNEQUIP_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_UNEQUIP::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_UNEQUIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grid_in_equip_ = 0u;
  _internal_metadata_.Clear();
}

const char* CS_UNEQUIP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 grid_in_equip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grid_in_equip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_UNEQUIP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_UNEQUIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grid_in_equip = 1;
  if (this->grid_in_equip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_grid_in_equip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_UNEQUIP)
  return target;
}

size_t CS_UNEQUIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_UNEQUIP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 grid_in_equip = 1;
  if (this->grid_in_equip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid_in_equip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_UNEQUIP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_UNEQUIP)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_UNEQUIP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_UNEQUIP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_UNEQUIP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_UNEQUIP)
    MergeFrom(*source);
  }
}

void CS_UNEQUIP::MergeFrom(const CS_UNEQUIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_UNEQUIP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grid_in_equip() != 0) {
    _internal_set_grid_in_equip(from._internal_grid_in_equip());
  }
}

void CS_UNEQUIP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_UNEQUIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_UNEQUIP::CopyFrom(const CS_UNEQUIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_UNEQUIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_UNEQUIP::IsInitialized() const {
  return true;
}

void CS_UNEQUIP::InternalSwap(CS_UNEQUIP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(grid_in_equip_, other->grid_in_equip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_UNEQUIP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TALK::InitAsDefaultInstance() {
}
class CS_TALK::_Internal {
 public:
};

CS_TALK::CS_TALK()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TALK)
}
CS_TALK::CS_TALK(const CS_TALK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  words_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_words().empty()) {
    words_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.words_);
  }
  ::memcpy(&reciver_id_, &from.reciver_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&reciver_id_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:CS_TALK)
}

void CS_TALK::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CS_TALK_msg_2fzone_5fservice_2eproto.base);
  words_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reciver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&reciver_id_)) + sizeof(channel_));
}

CS_TALK::~CS_TALK() {
  // @@protoc_insertion_point(destructor:CS_TALK)
  SharedDtor();
}

void CS_TALK::SharedDtor() {
  words_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CS_TALK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TALK& CS_TALK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TALK_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TALK::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TALK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reciver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&reciver_id_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

const char* CS_TALK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TalkChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_channel(static_cast<::TalkChannel>(val));
        } else goto handle_unusual;
        continue;
      // string words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_words();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CS_TALK.words"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reciver_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reciver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TALK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TALK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TalkChannel channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_channel(), target);
  }

  // string words = 2;
  if (this->words().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_words().data(), static_cast<int>(this->_internal_words().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CS_TALK.words");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_words(), target);
  }

  // uint64 reciver_id = 3;
  if (this->reciver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_reciver_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TALK)
  return target;
}

size_t CS_TALK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TALK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string words = 2;
  if (this->words().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_words());
  }

  // uint64 reciver_id = 3;
  if (this->reciver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reciver_id());
  }

  // .TalkChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TALK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TALK)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TALK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TALK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TALK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TALK)
    MergeFrom(*source);
  }
}

void CS_TALK::MergeFrom(const CS_TALK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TALK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.words().size() > 0) {

    words_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.words_);
  }
  if (from.reciver_id() != 0) {
    _internal_set_reciver_id(from._internal_reciver_id());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void CS_TALK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TALK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TALK::CopyFrom(const CS_TALK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TALK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TALK::IsInitialized() const {
  return true;
}

void CS_TALK::InternalSwap(CS_TALK* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  words_.Swap(&other->words_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reciver_id_, other->reciver_id_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TALK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_TALK::InitAsDefaultInstance() {
}
class SC_TALK::_Internal {
 public:
};

SC_TALK::SC_TALK()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TALK)
}
SC_TALK::SC_TALK(const SC_TALK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      item_list_(from.item_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  words_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_words().empty()) {
    words_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.words_);
  }
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_name().empty()) {
    sender_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&reciver_id_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(reciver_id_));
  // @@protoc_insertion_point(copy_constructor:SC_TALK)
}

void SC_TALK::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_TALK_msg_2fzone_5fservice_2eproto.base);
  words_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reciver_id_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(reciver_id_));
}

SC_TALK::~SC_TALK() {
  // @@protoc_insertion_point(destructor:SC_TALK)
  SharedDtor();
}

void SC_TALK::SharedDtor() {
  words_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_TALK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_TALK& SC_TALK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_TALK_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_TALK::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TALK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  words_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reciver_id_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(reciver_id_));
  _internal_metadata_.Clear();
}

const char* SC_TALK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TalkChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_channel(static_cast<::TalkChannel>(val));
        } else goto handle_unusual;
        continue;
      // string words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_words();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_TALK.words"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sender_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_TALK.sender_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sender_sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sender_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sender_viplev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sender_viplev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reciver_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reciver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SC_ITEM_INFO item_list = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_TALK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TALK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TalkChannel channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_channel(), target);
  }

  // string words = 2;
  if (this->words().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_words().data(), static_cast<int>(this->_internal_words().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_TALK.words");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_words(), target);
  }

  // uint64 sender_id = 4;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sender_id(), target);
  }

  // string sender_name = 5;
  if (this->sender_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_TALK.sender_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sender_name(), target);
  }

  // uint32 sender_sign = 6;
  if (this->sender_sign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sender_sign(), target);
  }

  // uint32 sender_viplev = 7;
  if (this->sender_viplev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sender_viplev(), target);
  }

  // uint32 send_time = 8;
  if (this->send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_send_time(), target);
  }

  // uint64 reciver_id = 9;
  if (this->reciver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_reciver_id(), target);
  }

  // repeated .SC_ITEM_INFO item_list = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_item_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TALK)
  return target;
}

size_t SC_TALK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TALK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_ITEM_INFO item_list = 20;
  total_size += 2UL * this->_internal_item_list_size();
  for (const auto& msg : this->item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string words = 2;
  if (this->words().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_words());
  }

  // string sender_name = 5;
  if (this->sender_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_name());
  }

  // .TalkChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // uint32 sender_sign = 6;
  if (this->sender_sign() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sender_sign());
  }

  // uint64 sender_id = 4;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sender_id());
  }

  // uint32 sender_viplev = 7;
  if (this->sender_viplev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sender_viplev());
  }

  // uint32 send_time = 8;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_time());
  }

  // uint64 reciver_id = 9;
  if (this->reciver_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reciver_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_TALK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TALK)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TALK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_TALK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TALK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TALK)
    MergeFrom(*source);
  }
}

void SC_TALK::MergeFrom(const SC_TALK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TALK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  if (from.words().size() > 0) {

    words_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.words_);
  }
  if (from.sender_name().size() > 0) {

    sender_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.sender_sign() != 0) {
    _internal_set_sender_sign(from._internal_sender_sign());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.sender_viplev() != 0) {
    _internal_set_sender_viplev(from._internal_sender_viplev());
  }
  if (from.send_time() != 0) {
    _internal_set_send_time(from._internal_send_time());
  }
  if (from.reciver_id() != 0) {
    _internal_set_reciver_id(from._internal_reciver_id());
  }
}

void SC_TALK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TALK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TALK::CopyFrom(const SC_TALK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TALK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TALK::IsInitialized() const {
  return true;
}

void SC_TALK::InternalSwap(SC_TALK* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  item_list_.InternalSwap(&other->item_list_);
  words_.Swap(&other->words_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_name_.Swap(&other->sender_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(sender_sign_, other->sender_sign_);
  swap(sender_id_, other->sender_id_);
  swap(sender_viplev_, other->sender_viplev_);
  swap(send_time_, other->send_time_);
  swap(reciver_id_, other->reciver_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TALK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_TASK_INFO_Info::InitAsDefaultInstance() {
}
class SC_TASK_INFO_Info::_Internal {
 public:
};

SC_TASK_INFO_Info::SC_TASK_INFO_Info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TASK_INFO.Info)
}
SC_TASK_INFO_Info::SC_TASK_INFO_Info(const SC_TASK_INFO_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num4_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(num4_));
  // @@protoc_insertion_point(copy_constructor:SC_TASK_INFO.Info)
}

void SC_TASK_INFO_Info::SharedCtor() {
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num4_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(num4_));
}

SC_TASK_INFO_Info::~SC_TASK_INFO_Info() {
  // @@protoc_insertion_point(destructor:SC_TASK_INFO.Info)
  SharedDtor();
}

void SC_TASK_INFO_Info::SharedDtor() {
}

void SC_TASK_INFO_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_TASK_INFO_Info& SC_TASK_INFO_Info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_TASK_INFO_Info_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_TASK_INFO_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TASK_INFO.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num4_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(num4_));
  _internal_metadata_.Clear();
}

const char* SC_TASK_INFO_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 accept_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accept_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 finish_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          finish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expire_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 daycount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          daycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 daycount_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          daycount_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          num1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          num2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          num3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num4 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          num4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_TASK_INFO_Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TASK_INFO.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_task_id(), target);
  }

  // uint32 accept_time = 2;
  if (this->accept_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accept_time(), target);
  }

  // uint32 finish_time = 3;
  if (this->finish_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_finish_time(), target);
  }

  // uint32 expire_time = 4;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_expire_time(), target);
  }

  // uint32 daycount = 5;
  if (this->daycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_daycount(), target);
  }

  // uint32 daycount_max = 6;
  if (this->daycount_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_daycount_max(), target);
  }

  // uint32 state = 7;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_state(), target);
  }

  // uint32 num1 = 10;
  if (this->num1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num1(), target);
  }

  // uint32 num2 = 11;
  if (this->num2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_num2(), target);
  }

  // uint32 num3 = 12;
  if (this->num3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_num3(), target);
  }

  // uint32 num4 = 13;
  if (this->num4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_num4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TASK_INFO.Info)
  return target;
}

size_t SC_TASK_INFO_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TASK_INFO.Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_id());
  }

  // uint32 accept_time = 2;
  if (this->accept_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accept_time());
  }

  // uint32 finish_time = 3;
  if (this->finish_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_finish_time());
  }

  // uint32 expire_time = 4;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expire_time());
  }

  // uint32 daycount = 5;
  if (this->daycount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_daycount());
  }

  // uint32 daycount_max = 6;
  if (this->daycount_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_daycount_max());
  }

  // uint32 state = 7;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  // uint32 num1 = 10;
  if (this->num1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num1());
  }

  // uint32 num2 = 11;
  if (this->num2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num2());
  }

  // uint32 num3 = 12;
  if (this->num3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num3());
  }

  // uint32 num4 = 13;
  if (this->num4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_TASK_INFO_Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TASK_INFO.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TASK_INFO_Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_TASK_INFO_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TASK_INFO.Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TASK_INFO.Info)
    MergeFrom(*source);
  }
}

void SC_TASK_INFO_Info::MergeFrom(const SC_TASK_INFO_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TASK_INFO.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.accept_time() != 0) {
    _internal_set_accept_time(from._internal_accept_time());
  }
  if (from.finish_time() != 0) {
    _internal_set_finish_time(from._internal_finish_time());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  if (from.daycount() != 0) {
    _internal_set_daycount(from._internal_daycount());
  }
  if (from.daycount_max() != 0) {
    _internal_set_daycount_max(from._internal_daycount_max());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.num1() != 0) {
    _internal_set_num1(from._internal_num1());
  }
  if (from.num2() != 0) {
    _internal_set_num2(from._internal_num2());
  }
  if (from.num3() != 0) {
    _internal_set_num3(from._internal_num3());
  }
  if (from.num4() != 0) {
    _internal_set_num4(from._internal_num4());
  }
}

void SC_TASK_INFO_Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TASK_INFO.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TASK_INFO_Info::CopyFrom(const SC_TASK_INFO_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TASK_INFO.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TASK_INFO_Info::IsInitialized() const {
  return true;
}

void SC_TASK_INFO_Info::InternalSwap(SC_TASK_INFO_Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_id_, other->task_id_);
  swap(accept_time_, other->accept_time_);
  swap(finish_time_, other->finish_time_);
  swap(expire_time_, other->expire_time_);
  swap(daycount_, other->daycount_);
  swap(daycount_max_, other->daycount_max_);
  swap(state_, other->state_);
  swap(num1_, other->num1_);
  swap(num2_, other->num2_);
  swap(num3_, other->num3_);
  swap(num4_, other->num4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TASK_INFO_Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_TASK_INFO::InitAsDefaultInstance() {
}
class SC_TASK_INFO::_Internal {
 public:
};

SC_TASK_INFO::SC_TASK_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TASK_INFO)
}
SC_TASK_INFO::SC_TASK_INFO(const SC_TASK_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      task_info_list_(from.task_info_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_TASK_INFO)
}

void SC_TASK_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_TASK_INFO_msg_2fzone_5fservice_2eproto.base);
}

SC_TASK_INFO::~SC_TASK_INFO() {
  // @@protoc_insertion_point(destructor:SC_TASK_INFO)
  SharedDtor();
}

void SC_TASK_INFO::SharedDtor() {
}

void SC_TASK_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_TASK_INFO& SC_TASK_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_TASK_INFO_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_TASK_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TASK_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_info_list_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_TASK_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SC_TASK_INFO.Info task_info_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_TASK_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TASK_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_TASK_INFO.Info task_info_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_task_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TASK_INFO)
  return target;
}

size_t SC_TASK_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TASK_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_TASK_INFO.Info task_info_list = 1;
  total_size += 1UL * this->_internal_task_info_list_size();
  for (const auto& msg : this->task_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_TASK_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TASK_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TASK_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_TASK_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TASK_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TASK_INFO)
    MergeFrom(*source);
  }
}

void SC_TASK_INFO::MergeFrom(const SC_TASK_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TASK_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_info_list_.MergeFrom(from.task_info_list_);
}

void SC_TASK_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TASK_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TASK_INFO::CopyFrom(const SC_TASK_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TASK_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TASK_INFO::IsInitialized() const {
  return true;
}

void SC_TASK_INFO::InternalSwap(SC_TASK_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_info_list_.InternalSwap(&other->task_info_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TASK_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_TASK_DATA::InitAsDefaultInstance() {
}
class SC_TASK_DATA::_Internal {
 public:
};

SC_TASK_DATA::SC_TASK_DATA()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TASK_DATA)
}
SC_TASK_DATA::SC_TASK_DATA(const SC_TASK_DATA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:SC_TASK_DATA)
}

void SC_TASK_DATA::SharedCtor() {
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(num_));
}

SC_TASK_DATA::~SC_TASK_DATA() {
  // @@protoc_insertion_point(destructor:SC_TASK_DATA)
  SharedDtor();
}

void SC_TASK_DATA::SharedDtor() {
}

void SC_TASK_DATA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_TASK_DATA& SC_TASK_DATA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_TASK_DATA_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_TASK_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TASK_DATA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

const char* SC_TASK_DATA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_TASK_DATA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TASK_DATA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_task_id(), target);
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idx(), target);
  }

  // uint32 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TASK_DATA)
  return target;
}

size_t SC_TASK_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TASK_DATA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_id());
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_TASK_DATA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TASK_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TASK_DATA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_TASK_DATA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TASK_DATA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TASK_DATA)
    MergeFrom(*source);
  }
}

void SC_TASK_DATA::MergeFrom(const SC_TASK_DATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TASK_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void SC_TASK_DATA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TASK_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TASK_DATA::CopyFrom(const SC_TASK_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TASK_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TASK_DATA::IsInitialized() const {
  return true;
}

void SC_TASK_DATA::InternalSwap(SC_TASK_DATA* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_id_, other->task_id_);
  swap(idx_, other->idx_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TASK_DATA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TASK_SUBMIT::InitAsDefaultInstance() {
}
class CS_TASK_SUBMIT::_Internal {
 public:
};

CS_TASK_SUBMIT::CS_TASK_SUBMIT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TASK_SUBMIT)
}
CS_TASK_SUBMIT::CS_TASK_SUBMIT(const CS_TASK_SUBMIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&submit_multiple_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(submit_multiple_));
  // @@protoc_insertion_point(copy_constructor:CS_TASK_SUBMIT)
}

void CS_TASK_SUBMIT::SharedCtor() {
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submit_multiple_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(submit_multiple_));
}

CS_TASK_SUBMIT::~CS_TASK_SUBMIT() {
  // @@protoc_insertion_point(destructor:CS_TASK_SUBMIT)
  SharedDtor();
}

void CS_TASK_SUBMIT::SharedDtor() {
}

void CS_TASK_SUBMIT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TASK_SUBMIT& CS_TASK_SUBMIT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TASK_SUBMIT_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TASK_SUBMIT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TASK_SUBMIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submit_multiple_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(submit_multiple_));
  _internal_metadata_.Clear();
}

const char* CS_TASK_SUBMIT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 submit_multiple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          submit_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TASK_SUBMIT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TASK_SUBMIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_task_id(), target);
  }

  // uint32 submit_multiple = 2;
  if (this->submit_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_submit_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TASK_SUBMIT)
  return target;
}

size_t CS_TASK_SUBMIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TASK_SUBMIT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_id());
  }

  // uint32 submit_multiple = 2;
  if (this->submit_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_submit_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TASK_SUBMIT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TASK_SUBMIT)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TASK_SUBMIT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TASK_SUBMIT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TASK_SUBMIT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TASK_SUBMIT)
    MergeFrom(*source);
  }
}

void CS_TASK_SUBMIT::MergeFrom(const CS_TASK_SUBMIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TASK_SUBMIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.submit_multiple() != 0) {
    _internal_set_submit_multiple(from._internal_submit_multiple());
  }
}

void CS_TASK_SUBMIT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TASK_SUBMIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TASK_SUBMIT::CopyFrom(const CS_TASK_SUBMIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TASK_SUBMIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TASK_SUBMIT::IsInitialized() const {
  return true;
}

void CS_TASK_SUBMIT::InternalSwap(CS_TASK_SUBMIT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_id_, other->task_id_);
  swap(submit_multiple_, other->submit_multiple_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TASK_SUBMIT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ACTIVE_NPC::InitAsDefaultInstance() {
}
class CS_ACTIVE_NPC::_Internal {
 public:
};

CS_ACTIVE_NPC::CS_ACTIVE_NPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ACTIVE_NPC)
}
CS_ACTIVE_NPC::CS_ACTIVE_NPC(const CS_ACTIVE_NPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npc_id_ = from.npc_id_;
  // @@protoc_insertion_point(copy_constructor:CS_ACTIVE_NPC)
}

void CS_ACTIVE_NPC::SharedCtor() {
  npc_id_ = PROTOBUF_ULONGLONG(0);
}

CS_ACTIVE_NPC::~CS_ACTIVE_NPC() {
  // @@protoc_insertion_point(destructor:CS_ACTIVE_NPC)
  SharedDtor();
}

void CS_ACTIVE_NPC::SharedDtor() {
}

void CS_ACTIVE_NPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ACTIVE_NPC& CS_ACTIVE_NPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ACTIVE_NPC_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ACTIVE_NPC::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ACTIVE_NPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npc_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_ACTIVE_NPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 npc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          npc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ACTIVE_NPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ACTIVE_NPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 npc_id = 1;
  if (this->npc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ACTIVE_NPC)
  return target;
}

size_t CS_ACTIVE_NPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ACTIVE_NPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 npc_id = 1;
  if (this->npc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_npc_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ACTIVE_NPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ACTIVE_NPC)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ACTIVE_NPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ACTIVE_NPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ACTIVE_NPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ACTIVE_NPC)
    MergeFrom(*source);
  }
}

void CS_ACTIVE_NPC::MergeFrom(const CS_ACTIVE_NPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ACTIVE_NPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.npc_id() != 0) {
    _internal_set_npc_id(from._internal_npc_id());
  }
}

void CS_ACTIVE_NPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ACTIVE_NPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ACTIVE_NPC::CopyFrom(const CS_ACTIVE_NPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ACTIVE_NPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ACTIVE_NPC::IsInitialized() const {
  return true;
}

void CS_ACTIVE_NPC::InternalSwap(CS_ACTIVE_NPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(npc_id_, other->npc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ACTIVE_NPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_DIALOG_dialog_link::InitAsDefaultInstance() {
}
class SC_DIALOG_dialog_link::_Internal {
 public:
};

SC_DIALOG_dialog_link::SC_DIALOG_dialog_link()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DIALOG.dialog_link)
}
SC_DIALOG_dialog_link::SC_DIALOG_dialog_link(const SC_DIALOG_dialog_link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txt().empty()) {
    txt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txt_);
  }
  style_ = from.style_;
  // @@protoc_insertion_point(copy_constructor:SC_DIALOG.dialog_link)
}

void SC_DIALOG_dialog_link::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_DIALOG_dialog_link_msg_2fzone_5fservice_2eproto.base);
  txt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  style_ = 0u;
}

SC_DIALOG_dialog_link::~SC_DIALOG_dialog_link() {
  // @@protoc_insertion_point(destructor:SC_DIALOG.dialog_link)
  SharedDtor();
}

void SC_DIALOG_dialog_link::SharedDtor() {
  txt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_DIALOG_dialog_link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_DIALOG_dialog_link& SC_DIALOG_dialog_link::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_DIALOG_dialog_link_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_DIALOG_dialog_link::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DIALOG.dialog_link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  style_ = 0u;
  _internal_metadata_.Clear();
}

const char* SC_DIALOG_dialog_link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string txt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_txt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_DIALOG.dialog_link.txt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_DIALOG_dialog_link::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_DIALOG.dialog_link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 style = 1;
  if (this->style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_style(), target);
  }

  // string txt = 2;
  if (this->txt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txt().data(), static_cast<int>(this->_internal_txt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_link.txt");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_txt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_DIALOG.dialog_link)
  return target;
}

size_t SC_DIALOG_dialog_link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DIALOG.dialog_link)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string txt = 2;
  if (this->txt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txt());
  }

  // uint32 style = 1;
  if (this->style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_style());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_DIALOG_dialog_link::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DIALOG.dialog_link)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_DIALOG_dialog_link* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_DIALOG_dialog_link>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DIALOG.dialog_link)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DIALOG.dialog_link)
    MergeFrom(*source);
  }
}

void SC_DIALOG_dialog_link::MergeFrom(const SC_DIALOG_dialog_link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DIALOG.dialog_link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txt().size() > 0) {

    txt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txt_);
  }
  if (from.style() != 0) {
    _internal_set_style(from._internal_style());
  }
}

void SC_DIALOG_dialog_link::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DIALOG.dialog_link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DIALOG_dialog_link::CopyFrom(const SC_DIALOG_dialog_link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DIALOG.dialog_link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_DIALOG_dialog_link::IsInitialized() const {
  return true;
}

void SC_DIALOG_dialog_link::InternalSwap(SC_DIALOG_dialog_link* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txt_.Swap(&other->txt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(style_, other->style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_DIALOG_dialog_link::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_DIALOG::InitAsDefaultInstance() {
}
class SC_DIALOG::_Internal {
 public:
};

SC_DIALOG::SC_DIALOG()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_DIALOG)
}
SC_DIALOG::SC_DIALOG(const SC_DIALOG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dialog_txt_(from.dialog_txt_),
      dialog_link_list_(from.dialog_link_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dialog_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dialog_title().empty()) {
    dialog_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dialog_title_);
  }
  ::memcpy(&dialog_id_, &from.dialog_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dialog_type_) -
    reinterpret_cast<char*>(&dialog_id_)) + sizeof(dialog_type_));
  // @@protoc_insertion_point(copy_constructor:SC_DIALOG)
}

void SC_DIALOG::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_DIALOG_msg_2fzone_5fservice_2eproto.base);
  dialog_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dialog_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dialog_type_) -
      reinterpret_cast<char*>(&dialog_id_)) + sizeof(dialog_type_));
}

SC_DIALOG::~SC_DIALOG() {
  // @@protoc_insertion_point(destructor:SC_DIALOG)
  SharedDtor();
}

void SC_DIALOG::SharedDtor() {
  dialog_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_DIALOG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_DIALOG& SC_DIALOG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_DIALOG_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_DIALOG::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_DIALOG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dialog_txt_.Clear();
  dialog_link_list_.Clear();
  dialog_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dialog_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dialog_type_) -
      reinterpret_cast<char*>(&dialog_id_)) + sizeof(dialog_type_));
  _internal_metadata_.Clear();
}

const char* SC_DIALOG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 dialog_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dialog_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dialog_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dialog_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dialog_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dialog_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_DIALOG.dialog_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string dialog_txt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dialog_txt();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_DIALOG.dialog_txt"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dialog_link_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_DIALOG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_DIALOG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dialog_id(), target);
  }

  // uint32 dialog_type = 2;
  if (this->dialog_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dialog_type(), target);
  }

  // string dialog_title = 3;
  if (this->dialog_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dialog_title().data(), static_cast<int>(this->_internal_dialog_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dialog_title(), target);
  }

  // repeated string dialog_txt = 4;
  for (int i = 0, n = this->_internal_dialog_txt_size(); i < n; i++) {
    const auto& s = this->_internal_dialog_txt(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_DIALOG.dialog_txt");
    target = stream->WriteString(4, s, target);
  }

  // repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dialog_link_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_dialog_link_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_DIALOG)
  return target;
}

size_t SC_DIALOG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_DIALOG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dialog_txt = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dialog_txt_.size());
  for (int i = 0, n = dialog_txt_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dialog_txt_.Get(i));
  }

  // repeated .SC_DIALOG.dialog_link dialog_link_list = 5;
  total_size += 1UL * this->_internal_dialog_link_list_size();
  for (const auto& msg : this->dialog_link_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dialog_title = 3;
  if (this->dialog_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dialog_title());
  }

  // uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dialog_id());
  }

  // uint32 dialog_type = 2;
  if (this->dialog_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dialog_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_DIALOG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_DIALOG)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_DIALOG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_DIALOG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_DIALOG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_DIALOG)
    MergeFrom(*source);
  }
}

void SC_DIALOG::MergeFrom(const SC_DIALOG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_DIALOG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dialog_txt_.MergeFrom(from.dialog_txt_);
  dialog_link_list_.MergeFrom(from.dialog_link_list_);
  if (from.dialog_title().size() > 0) {

    dialog_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dialog_title_);
  }
  if (from.dialog_id() != 0) {
    _internal_set_dialog_id(from._internal_dialog_id());
  }
  if (from.dialog_type() != 0) {
    _internal_set_dialog_type(from._internal_dialog_type());
  }
}

void SC_DIALOG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_DIALOG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_DIALOG::CopyFrom(const SC_DIALOG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_DIALOG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_DIALOG::IsInitialized() const {
  return true;
}

void SC_DIALOG::InternalSwap(SC_DIALOG* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dialog_txt_.InternalSwap(&other->dialog_txt_);
  dialog_link_list_.InternalSwap(&other->dialog_link_list_);
  dialog_title_.Swap(&other->dialog_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dialog_id_, other->dialog_id_);
  swap(dialog_type_, other->dialog_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_DIALOG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_DIALOG_CLICK::InitAsDefaultInstance() {
}
class CS_DIALOG_CLICK::_Internal {
 public:
};

CS_DIALOG_CLICK::CS_DIALOG_CLICK()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_DIALOG_CLICK)
}
CS_DIALOG_CLICK::CS_DIALOG_CLICK(const CS_DIALOG_CLICK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dialog_id_, &from.dialog_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dialog_button_idx_) -
    reinterpret_cast<char*>(&dialog_id_)) + sizeof(dialog_button_idx_));
  // @@protoc_insertion_point(copy_constructor:CS_DIALOG_CLICK)
}

void CS_DIALOG_CLICK::SharedCtor() {
  ::memset(&dialog_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dialog_button_idx_) -
      reinterpret_cast<char*>(&dialog_id_)) + sizeof(dialog_button_idx_));
}

CS_DIALOG_CLICK::~CS_DIALOG_CLICK() {
  // @@protoc_insertion_point(destructor:CS_DIALOG_CLICK)
  SharedDtor();
}

void CS_DIALOG_CLICK::SharedDtor() {
}

void CS_DIALOG_CLICK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_DIALOG_CLICK& CS_DIALOG_CLICK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_DIALOG_CLICK_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_DIALOG_CLICK::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_DIALOG_CLICK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dialog_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dialog_button_idx_) -
      reinterpret_cast<char*>(&dialog_id_)) + sizeof(dialog_button_idx_));
  _internal_metadata_.Clear();
}

const char* CS_DIALOG_CLICK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 dialog_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dialog_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dialog_button_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dialog_button_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_DIALOG_CLICK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_DIALOG_CLICK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dialog_id(), target);
  }

  // uint32 dialog_button_idx = 2;
  if (this->dialog_button_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dialog_button_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_DIALOG_CLICK)
  return target;
}

size_t CS_DIALOG_CLICK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_DIALOG_CLICK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 dialog_id = 1;
  if (this->dialog_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dialog_id());
  }

  // uint32 dialog_button_idx = 2;
  if (this->dialog_button_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dialog_button_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_DIALOG_CLICK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_DIALOG_CLICK)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_DIALOG_CLICK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_DIALOG_CLICK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_DIALOG_CLICK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_DIALOG_CLICK)
    MergeFrom(*source);
  }
}

void CS_DIALOG_CLICK::MergeFrom(const CS_DIALOG_CLICK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_DIALOG_CLICK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dialog_id() != 0) {
    _internal_set_dialog_id(from._internal_dialog_id());
  }
  if (from.dialog_button_idx() != 0) {
    _internal_set_dialog_button_idx(from._internal_dialog_button_idx());
  }
}

void CS_DIALOG_CLICK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_DIALOG_CLICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_DIALOG_CLICK::CopyFrom(const CS_DIALOG_CLICK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_DIALOG_CLICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_DIALOG_CLICK::IsInitialized() const {
  return true;
}

void CS_DIALOG_CLICK::InternalSwap(CS_DIALOG_CLICK* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dialog_id_, other->dialog_id_);
  swap(dialog_button_idx_, other->dialog_button_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_DIALOG_CLICK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ACHI_INFO_Info::InitAsDefaultInstance() {
}
class SC_ACHI_INFO_Info::_Internal {
 public:
};

SC_ACHI_INFO_Info::SC_ACHI_INFO_Info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACHI_INFO.Info)
}
SC_ACHI_INFO_Info::SC_ACHI_INFO_Info(const SC_ACHI_INFO_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&achi_id_, &from.achi_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&take_) -
    reinterpret_cast<char*>(&achi_id_)) + sizeof(take_));
  // @@protoc_insertion_point(copy_constructor:SC_ACHI_INFO.Info)
}

void SC_ACHI_INFO_Info::SharedCtor() {
  ::memset(&achi_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&take_) -
      reinterpret_cast<char*>(&achi_id_)) + sizeof(take_));
}

SC_ACHI_INFO_Info::~SC_ACHI_INFO_Info() {
  // @@protoc_insertion_point(destructor:SC_ACHI_INFO.Info)
  SharedDtor();
}

void SC_ACHI_INFO_Info::SharedDtor() {
}

void SC_ACHI_INFO_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ACHI_INFO_Info& SC_ACHI_INFO_Info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ACHI_INFO_Info_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ACHI_INFO_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACHI_INFO.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&achi_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&take_) -
      reinterpret_cast<char*>(&achi_id_)) + sizeof(take_));
  _internal_metadata_.Clear();
}

const char* SC_ACHI_INFO_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 achi_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          achi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 take = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          take_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ACHI_INFO_Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACHI_INFO.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_achi_id(), target);
  }

  // uint32 take = 2;
  if (this->take() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_take(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ACHI_INFO.Info)
  return target;
}

size_t SC_ACHI_INFO_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACHI_INFO.Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_achi_id());
  }

  // uint32 take = 2;
  if (this->take() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_take());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ACHI_INFO_Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACHI_INFO.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ACHI_INFO_Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ACHI_INFO_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACHI_INFO.Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACHI_INFO.Info)
    MergeFrom(*source);
  }
}

void SC_ACHI_INFO_Info::MergeFrom(const SC_ACHI_INFO_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACHI_INFO.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.achi_id() != 0) {
    _internal_set_achi_id(from._internal_achi_id());
  }
  if (from.take() != 0) {
    _internal_set_take(from._internal_take());
  }
}

void SC_ACHI_INFO_Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACHI_INFO.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACHI_INFO_Info::CopyFrom(const SC_ACHI_INFO_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACHI_INFO.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ACHI_INFO_Info::IsInitialized() const {
  return true;
}

void SC_ACHI_INFO_Info::InternalSwap(SC_ACHI_INFO_Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(achi_id_, other->achi_id_);
  swap(take_, other->take_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ACHI_INFO_Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ACHI_INFO::InitAsDefaultInstance() {
}
class SC_ACHI_INFO::_Internal {
 public:
};

SC_ACHI_INFO::SC_ACHI_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACHI_INFO)
}
SC_ACHI_INFO::SC_ACHI_INFO(const SC_ACHI_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      finish_list_(from.finish_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_ACHI_INFO)
}

void SC_ACHI_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_ACHI_INFO_msg_2fzone_5fservice_2eproto.base);
}

SC_ACHI_INFO::~SC_ACHI_INFO() {
  // @@protoc_insertion_point(destructor:SC_ACHI_INFO)
  SharedDtor();
}

void SC_ACHI_INFO::SharedDtor() {
}

void SC_ACHI_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ACHI_INFO& SC_ACHI_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ACHI_INFO_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ACHI_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACHI_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finish_list_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_ACHI_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SC_ACHI_INFO.Info finish_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_finish_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ACHI_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACHI_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_ACHI_INFO.Info finish_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_finish_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_finish_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ACHI_INFO)
  return target;
}

size_t SC_ACHI_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACHI_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_ACHI_INFO.Info finish_list = 1;
  total_size += 1UL * this->_internal_finish_list_size();
  for (const auto& msg : this->finish_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ACHI_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACHI_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ACHI_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ACHI_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACHI_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACHI_INFO)
    MergeFrom(*source);
  }
}

void SC_ACHI_INFO::MergeFrom(const SC_ACHI_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACHI_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  finish_list_.MergeFrom(from.finish_list_);
}

void SC_ACHI_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACHI_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACHI_INFO::CopyFrom(const SC_ACHI_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACHI_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ACHI_INFO::IsInitialized() const {
  return true;
}

void SC_ACHI_INFO::InternalSwap(SC_ACHI_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  finish_list_.InternalSwap(&other->finish_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ACHI_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ACHI_TAKE::InitAsDefaultInstance() {
}
class CS_ACHI_TAKE::_Internal {
 public:
};

CS_ACHI_TAKE::CS_ACHI_TAKE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_ACHI_TAKE)
}
CS_ACHI_TAKE::CS_ACHI_TAKE(const CS_ACHI_TAKE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  achi_id_ = from.achi_id_;
  // @@protoc_insertion_point(copy_constructor:CS_ACHI_TAKE)
}

void CS_ACHI_TAKE::SharedCtor() {
  achi_id_ = 0u;
}

CS_ACHI_TAKE::~CS_ACHI_TAKE() {
  // @@protoc_insertion_point(destructor:CS_ACHI_TAKE)
  SharedDtor();
}

void CS_ACHI_TAKE::SharedDtor() {
}

void CS_ACHI_TAKE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ACHI_TAKE& CS_ACHI_TAKE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ACHI_TAKE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_ACHI_TAKE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ACHI_TAKE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achi_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* CS_ACHI_TAKE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 achi_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          achi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ACHI_TAKE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ACHI_TAKE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_achi_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ACHI_TAKE)
  return target;
}

size_t CS_ACHI_TAKE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ACHI_TAKE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 achi_id = 1;
  if (this->achi_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_achi_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ACHI_TAKE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_ACHI_TAKE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ACHI_TAKE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ACHI_TAKE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_ACHI_TAKE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_ACHI_TAKE)
    MergeFrom(*source);
  }
}

void CS_ACHI_TAKE::MergeFrom(const CS_ACHI_TAKE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_ACHI_TAKE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.achi_id() != 0) {
    _internal_set_achi_id(from._internal_achi_id());
  }
}

void CS_ACHI_TAKE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_ACHI_TAKE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ACHI_TAKE::CopyFrom(const CS_ACHI_TAKE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ACHI_TAKE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ACHI_TAKE::IsInitialized() const {
  return true;
}

void CS_ACHI_TAKE::InternalSwap(CS_ACHI_TAKE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(achi_id_, other->achi_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ACHI_TAKE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TEAMCREATE::InitAsDefaultInstance() {
}
class CS_TEAMCREATE::_Internal {
 public:
};

CS_TEAMCREATE::CS_TEAMCREATE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMCREATE)
}
CS_TEAMCREATE::CS_TEAMCREATE(const CS_TEAMCREATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMCREATE)
}

void CS_TEAMCREATE::SharedCtor() {
}

CS_TEAMCREATE::~CS_TEAMCREATE() {
  // @@protoc_insertion_point(destructor:CS_TEAMCREATE)
  SharedDtor();
}

void CS_TEAMCREATE::SharedDtor() {
}

void CS_TEAMCREATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TEAMCREATE& CS_TEAMCREATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TEAMCREATE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TEAMCREATE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMCREATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CS_TEAMCREATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TEAMCREATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMCREATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMCREATE)
  return target;
}

size_t CS_TEAMCREATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMCREATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TEAMCREATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMCREATE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TEAMCREATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TEAMCREATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMCREATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMCREATE)
    MergeFrom(*source);
  }
}

void CS_TEAMCREATE::MergeFrom(const CS_TEAMCREATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMCREATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_TEAMCREATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMCREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMCREATE::CopyFrom(const CS_TEAMCREATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMCREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEAMCREATE::IsInitialized() const {
  return true;
}

void CS_TEAMCREATE::InternalSwap(CS_TEAMCREATE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEAMCREATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TEAMQUIT::InitAsDefaultInstance() {
}
class CS_TEAMQUIT::_Internal {
 public:
};

CS_TEAMQUIT::CS_TEAMQUIT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMQUIT)
}
CS_TEAMQUIT::CS_TEAMQUIT(const CS_TEAMQUIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_TEAMQUIT)
}

void CS_TEAMQUIT::SharedCtor() {
}

CS_TEAMQUIT::~CS_TEAMQUIT() {
  // @@protoc_insertion_point(destructor:CS_TEAMQUIT)
  SharedDtor();
}

void CS_TEAMQUIT::SharedDtor() {
}

void CS_TEAMQUIT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TEAMQUIT& CS_TEAMQUIT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TEAMQUIT_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TEAMQUIT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMQUIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CS_TEAMQUIT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TEAMQUIT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMQUIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMQUIT)
  return target;
}

size_t CS_TEAMQUIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMQUIT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TEAMQUIT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMQUIT)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TEAMQUIT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TEAMQUIT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMQUIT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMQUIT)
    MergeFrom(*source);
  }
}

void CS_TEAMQUIT::MergeFrom(const CS_TEAMQUIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMQUIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_TEAMQUIT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMQUIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMQUIT::CopyFrom(const CS_TEAMQUIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMQUIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEAMQUIT::IsInitialized() const {
  return true;
}

void CS_TEAMQUIT::InternalSwap(CS_TEAMQUIT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEAMQUIT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TEAMKICKMEMBER::InitAsDefaultInstance() {
}
class CS_TEAMKICKMEMBER::_Internal {
 public:
};

CS_TEAMKICKMEMBER::CS_TEAMKICKMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMKICKMEMBER)
}
CS_TEAMKICKMEMBER::CS_TEAMKICKMEMBER(const CS_TEAMKICKMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_id_ = from.member_id_;
  // @@protoc_insertion_point(copy_constructor:CS_TEAMKICKMEMBER)
}

void CS_TEAMKICKMEMBER::SharedCtor() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}

CS_TEAMKICKMEMBER::~CS_TEAMKICKMEMBER() {
  // @@protoc_insertion_point(destructor:CS_TEAMKICKMEMBER)
  SharedDtor();
}

void CS_TEAMKICKMEMBER::SharedDtor() {
}

void CS_TEAMKICKMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TEAMKICKMEMBER& CS_TEAMKICKMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TEAMKICKMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TEAMKICKMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMKICKMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_TEAMKICKMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TEAMKICKMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMKICKMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 member_id = 1;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_member_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMKICKMEMBER)
  return target;
}

size_t CS_TEAMKICKMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMKICKMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 member_id = 1;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TEAMKICKMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMKICKMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TEAMKICKMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TEAMKICKMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMKICKMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMKICKMEMBER)
    MergeFrom(*source);
  }
}

void CS_TEAMKICKMEMBER::MergeFrom(const CS_TEAMKICKMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMKICKMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
}

void CS_TEAMKICKMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMKICKMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMKICKMEMBER::CopyFrom(const CS_TEAMKICKMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMKICKMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEAMKICKMEMBER::IsInitialized() const {
  return true;
}

void CS_TEAMKICKMEMBER::InternalSwap(CS_TEAMKICKMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEAMKICKMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TEAMINVITEMEMBER::InitAsDefaultInstance() {
}
class CS_TEAMINVITEMEMBER::_Internal {
 public:
};

CS_TEAMINVITEMEMBER::CS_TEAMINVITEMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMINVITEMEMBER)
}
CS_TEAMINVITEMEMBER::CS_TEAMINVITEMEMBER(const CS_TEAMINVITEMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitee_id_ = from.invitee_id_;
  // @@protoc_insertion_point(copy_constructor:CS_TEAMINVITEMEMBER)
}

void CS_TEAMINVITEMEMBER::SharedCtor() {
  invitee_id_ = PROTOBUF_ULONGLONG(0);
}

CS_TEAMINVITEMEMBER::~CS_TEAMINVITEMEMBER() {
  // @@protoc_insertion_point(destructor:CS_TEAMINVITEMEMBER)
  SharedDtor();
}

void CS_TEAMINVITEMEMBER::SharedDtor() {
}

void CS_TEAMINVITEMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TEAMINVITEMEMBER& CS_TEAMINVITEMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TEAMINVITEMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMINVITEMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitee_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_TEAMINVITEMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 invitee_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          invitee_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TEAMINVITEMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMINVITEMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 invitee_id = 1;
  if (this->invitee_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_invitee_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMINVITEMEMBER)
  return target;
}

size_t CS_TEAMINVITEMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMINVITEMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 invitee_id = 1;
  if (this->invitee_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_invitee_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TEAMINVITEMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMINVITEMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TEAMINVITEMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TEAMINVITEMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMINVITEMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMINVITEMEMBER)
    MergeFrom(*source);
  }
}

void CS_TEAMINVITEMEMBER::MergeFrom(const CS_TEAMINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMINVITEMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invitee_id() != 0) {
    _internal_set_invitee_id(from._internal_invitee_id());
  }
}

void CS_TEAMINVITEMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMINVITEMEMBER::CopyFrom(const CS_TEAMINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEAMINVITEMEMBER::IsInitialized() const {
  return true;
}

void CS_TEAMINVITEMEMBER::InternalSwap(CS_TEAMINVITEMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(invitee_id_, other->invitee_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEAMINVITEMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_TEAMINVITEMEMBER::InitAsDefaultInstance() {
}
class SC_TEAMINVITEMEMBER::_Internal {
 public:
};

SC_TEAMINVITEMEMBER::SC_TEAMINVITEMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMINVITEMEMBER)
}
SC_TEAMINVITEMEMBER::SC_TEAMINVITEMEMBER(const SC_TEAMINVITEMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inviter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inviter_name().empty()) {
    inviter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&inviter_id_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(inviter_id_));
  // @@protoc_insertion_point(copy_constructor:SC_TEAMINVITEMEMBER)
}

void SC_TEAMINVITEMEMBER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto.base);
  inviter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviter_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(inviter_id_));
}

SC_TEAMINVITEMEMBER::~SC_TEAMINVITEMEMBER() {
  // @@protoc_insertion_point(destructor:SC_TEAMINVITEMEMBER)
  SharedDtor();
}

void SC_TEAMINVITEMEMBER::SharedDtor() {
  inviter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_TEAMINVITEMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_TEAMINVITEMEMBER& SC_TEAMINVITEMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_TEAMINVITEMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_TEAMINVITEMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMINVITEMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inviter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviter_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(inviter_id_));
  _internal_metadata_.Clear();
}

const char* SC_TEAMINVITEMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 inviter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inviter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inviter_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_inviter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_TEAMINVITEMEMBER.inviter_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_TEAMINVITEMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMINVITEMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_inviter_id(), target);
  }

  // string inviter_name = 3;
  if (this->inviter_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inviter_name().data(), static_cast<int>(this->_internal_inviter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMINVITEMEMBER.inviter_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inviter_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMINVITEMEMBER)
  return target;
}

size_t SC_TEAMINVITEMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMINVITEMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inviter_name = 3;
  if (this->inviter_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inviter_name());
  }

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_inviter_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_TEAMINVITEMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMINVITEMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TEAMINVITEMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_TEAMINVITEMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMINVITEMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMINVITEMEMBER)
    MergeFrom(*source);
  }
}

void SC_TEAMINVITEMEMBER::MergeFrom(const SC_TEAMINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMINVITEMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inviter_name().size() > 0) {

    inviter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
  }
  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.inviter_id() != 0) {
    _internal_set_inviter_id(from._internal_inviter_id());
  }
}

void SC_TEAMINVITEMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMINVITEMEMBER::CopyFrom(const SC_TEAMINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TEAMINVITEMEMBER::IsInitialized() const {
  return true;
}

void SC_TEAMINVITEMEMBER::InternalSwap(SC_TEAMINVITEMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inviter_name_.Swap(&other->inviter_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_id_, other->team_id_);
  swap(inviter_id_, other->inviter_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TEAMINVITEMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TEAMACCEPTINVITE::InitAsDefaultInstance() {
}
class CS_TEAMACCEPTINVITE::_Internal {
 public:
};

CS_TEAMACCEPTINVITE::CS_TEAMACCEPTINVITE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMACCEPTINVITE)
}
CS_TEAMACCEPTINVITE::CS_TEAMACCEPTINVITE(const CS_TEAMACCEPTINVITE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CS_TEAMACCEPTINVITE)
}

void CS_TEAMACCEPTINVITE::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(result_));
}

CS_TEAMACCEPTINVITE::~CS_TEAMACCEPTINVITE() {
  // @@protoc_insertion_point(destructor:CS_TEAMACCEPTINVITE)
  SharedDtor();
}

void CS_TEAMACCEPTINVITE::SharedDtor() {
}

void CS_TEAMACCEPTINVITE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TEAMACCEPTINVITE& CS_TEAMACCEPTINVITE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TEAMACCEPTINVITE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TEAMACCEPTINVITE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMACCEPTINVITE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* CS_TEAMACCEPTINVITE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 inviter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inviter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TEAMACCEPTINVITE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMACCEPTINVITE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_inviter_id(), target);
  }

  // bool result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMACCEPTINVITE)
  return target;
}

size_t CS_TEAMACCEPTINVITE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMACCEPTINVITE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_inviter_id());
  }

  // bool result = 3;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TEAMACCEPTINVITE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMACCEPTINVITE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TEAMACCEPTINVITE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TEAMACCEPTINVITE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMACCEPTINVITE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMACCEPTINVITE)
    MergeFrom(*source);
  }
}

void CS_TEAMACCEPTINVITE::MergeFrom(const CS_TEAMACCEPTINVITE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMACCEPTINVITE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.inviter_id() != 0) {
    _internal_set_inviter_id(from._internal_inviter_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CS_TEAMACCEPTINVITE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMACCEPTINVITE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMACCEPTINVITE::CopyFrom(const CS_TEAMACCEPTINVITE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMACCEPTINVITE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEAMACCEPTINVITE::IsInitialized() const {
  return true;
}

void CS_TEAMACCEPTINVITE::InternalSwap(CS_TEAMACCEPTINVITE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(inviter_id_, other->inviter_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEAMACCEPTINVITE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TEAMNEWLEADER::InitAsDefaultInstance() {
}
class CS_TEAMNEWLEADER::_Internal {
 public:
};

CS_TEAMNEWLEADER::CS_TEAMNEWLEADER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMNEWLEADER)
}
CS_TEAMNEWLEADER::CS_TEAMNEWLEADER(const CS_TEAMNEWLEADER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_leader_id_ = from.new_leader_id_;
  // @@protoc_insertion_point(copy_constructor:CS_TEAMNEWLEADER)
}

void CS_TEAMNEWLEADER::SharedCtor() {
  new_leader_id_ = PROTOBUF_ULONGLONG(0);
}

CS_TEAMNEWLEADER::~CS_TEAMNEWLEADER() {
  // @@protoc_insertion_point(destructor:CS_TEAMNEWLEADER)
  SharedDtor();
}

void CS_TEAMNEWLEADER::SharedDtor() {
}

void CS_TEAMNEWLEADER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TEAMNEWLEADER& CS_TEAMNEWLEADER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TEAMNEWLEADER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TEAMNEWLEADER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMNEWLEADER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_leader_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_TEAMNEWLEADER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 new_leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TEAMNEWLEADER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMNEWLEADER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 new_leader_id = 2;
  if (this->new_leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_new_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMNEWLEADER)
  return target;
}

size_t CS_TEAMNEWLEADER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMNEWLEADER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 new_leader_id = 2;
  if (this->new_leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_leader_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TEAMNEWLEADER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMNEWLEADER)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TEAMNEWLEADER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TEAMNEWLEADER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMNEWLEADER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMNEWLEADER)
    MergeFrom(*source);
  }
}

void CS_TEAMNEWLEADER::MergeFrom(const CS_TEAMNEWLEADER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMNEWLEADER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_leader_id() != 0) {
    _internal_set_new_leader_id(from._internal_new_leader_id());
  }
}

void CS_TEAMNEWLEADER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMNEWLEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMNEWLEADER::CopyFrom(const CS_TEAMNEWLEADER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMNEWLEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEAMNEWLEADER::IsInitialized() const {
  return true;
}

void CS_TEAMNEWLEADER::InternalSwap(CS_TEAMNEWLEADER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(new_leader_id_, other->new_leader_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEAMNEWLEADER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_TEAMMEMBER_INFO::InitAsDefaultInstance() {
}
class SC_TEAMMEMBER_INFO::_Internal {
 public:
};

void SC_TEAMMEMBER_INFO::clear_member_list() {
  member_list_.Clear();
}
SC_TEAMMEMBER_INFO::SC_TEAMMEMBER_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMMEMBER_INFO)
}
SC_TEAMMEMBER_INFO::SC_TEAMMEMBER_INFO(const SC_TEAMMEMBER_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      member_list_(from.member_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_TEAMMEMBER_INFO)
}

void SC_TEAMMEMBER_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_TEAMMEMBER_INFO_msg_2fzone_5fservice_2eproto.base);
}

SC_TEAMMEMBER_INFO::~SC_TEAMMEMBER_INFO() {
  // @@protoc_insertion_point(destructor:SC_TEAMMEMBER_INFO)
  SharedDtor();
}

void SC_TEAMMEMBER_INFO::SharedDtor() {
}

void SC_TEAMMEMBER_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_TEAMMEMBER_INFO& SC_TEAMMEMBER_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_TEAMMEMBER_INFO_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_TEAMMEMBER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMMEMBER_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_list_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_TEAMMEMBER_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TeamMemberInfo member_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_TEAMMEMBER_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMMEMBER_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TeamMemberInfo member_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_member_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMMEMBER_INFO)
  return target;
}

size_t SC_TEAMMEMBER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMMEMBER_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TeamMemberInfo member_list = 1;
  total_size += 1UL * this->_internal_member_list_size();
  for (const auto& msg : this->member_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_TEAMMEMBER_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMMEMBER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TEAMMEMBER_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_TEAMMEMBER_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMMEMBER_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMMEMBER_INFO)
    MergeFrom(*source);
  }
}

void SC_TEAMMEMBER_INFO::MergeFrom(const SC_TEAMMEMBER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMMEMBER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_list_.MergeFrom(from.member_list_);
}

void SC_TEAMMEMBER_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMMEMBER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMMEMBER_INFO::CopyFrom(const SC_TEAMMEMBER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMMEMBER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TEAMMEMBER_INFO::IsInitialized() const {
  return true;
}

void SC_TEAMMEMBER_INFO::InternalSwap(SC_TEAMMEMBER_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_list_.InternalSwap(&other->member_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TEAMMEMBER_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_TEAMMEMBER_ACTION::InitAsDefaultInstance() {
}
class SC_TEAMMEMBER_ACTION::_Internal {
 public:
};

SC_TEAMMEMBER_ACTION::SC_TEAMMEMBER_ACTION()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMMEMBER_ACTION)
}
SC_TEAMMEMBER_ACTION::SC_TEAMMEMBER_ACTION(const SC_TEAMMEMBER_ACTION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_member_name().empty()) {
    member_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_name_);
  }
  ::memcpy(&operator_id_, &from.operator_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_online_) -
    reinterpret_cast<char*>(&operator_id_)) + sizeof(member_online_));
  // @@protoc_insertion_point(copy_constructor:SC_TEAMMEMBER_ACTION)
}

void SC_TEAMMEMBER_ACTION::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_TEAMMEMBER_ACTION_msg_2fzone_5fservice_2eproto.base);
  member_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_online_) -
      reinterpret_cast<char*>(&operator_id_)) + sizeof(member_online_));
}

SC_TEAMMEMBER_ACTION::~SC_TEAMMEMBER_ACTION() {
  // @@protoc_insertion_point(destructor:SC_TEAMMEMBER_ACTION)
  SharedDtor();
}

void SC_TEAMMEMBER_ACTION::SharedDtor() {
  member_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_TEAMMEMBER_ACTION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_TEAMMEMBER_ACTION& SC_TEAMMEMBER_ACTION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_TEAMMEMBER_ACTION_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_TEAMMEMBER_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMMEMBER_ACTION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_online_) -
      reinterpret_cast<char*>(&operator_id_)) + sizeof(member_online_));
  _internal_metadata_.Clear();
}

const char* SC_TEAMMEMBER_ACTION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SC_TEAMMEMBER_ACTION.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::SC_TEAMMEMBER_ACTION_Action>(val));
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 member_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 member_lev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          member_lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string member_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_member_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_TEAMMEMBER_ACTION.member_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool member_online = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          member_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_TEAMMEMBER_ACTION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMMEMBER_ACTION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SC_TEAMMEMBER_ACTION.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  // uint64 member_id = 3;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_member_id(), target);
  }

  // uint32 member_lev = 4;
  if (this->member_lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_member_lev(), target);
  }

  // string member_name = 5;
  if (this->member_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_member_name().data(), static_cast<int>(this->_internal_member_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMMEMBER_ACTION.member_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_member_name(), target);
  }

  // bool member_online = 6;
  if (this->member_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_member_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMMEMBER_ACTION)
  return target;
}

size_t SC_TEAMMEMBER_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMMEMBER_ACTION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string member_name = 5;
  if (this->member_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_member_name());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  // .SC_TEAMMEMBER_ACTION.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 member_lev = 4;
  if (this->member_lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_member_lev());
  }

  // uint64 member_id = 3;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  // bool member_online = 6;
  if (this->member_online() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_TEAMMEMBER_ACTION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMMEMBER_ACTION)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TEAMMEMBER_ACTION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_TEAMMEMBER_ACTION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMMEMBER_ACTION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMMEMBER_ACTION)
    MergeFrom(*source);
  }
}

void SC_TEAMMEMBER_ACTION::MergeFrom(const SC_TEAMMEMBER_ACTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMMEMBER_ACTION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.member_name().size() > 0) {

    member_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_name_);
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.member_lev() != 0) {
    _internal_set_member_lev(from._internal_member_lev());
  }
  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from.member_online() != 0) {
    _internal_set_member_online(from._internal_member_online());
  }
}

void SC_TEAMMEMBER_ACTION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMMEMBER_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMMEMBER_ACTION::CopyFrom(const SC_TEAMMEMBER_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMMEMBER_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TEAMMEMBER_ACTION::IsInitialized() const {
  return true;
}

void SC_TEAMMEMBER_ACTION::InternalSwap(SC_TEAMMEMBER_ACTION* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_name_.Swap(&other->member_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operator_id_, other->operator_id_);
  swap(action_, other->action_);
  swap(member_lev_, other->member_lev_);
  swap(member_id_, other->member_id_);
  swap(member_online_, other->member_online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TEAMMEMBER_ACTION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TEAMAPPLYMEMBER::InitAsDefaultInstance() {
}
class CS_TEAMAPPLYMEMBER::_Internal {
 public:
};

CS_TEAMAPPLYMEMBER::CS_TEAMAPPLYMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMAPPLYMEMBER)
}
CS_TEAMAPPLYMEMBER::CS_TEAMAPPLYMEMBER(const CS_TEAMAPPLYMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  respondent_id_ = from.respondent_id_;
  // @@protoc_insertion_point(copy_constructor:CS_TEAMAPPLYMEMBER)
}

void CS_TEAMAPPLYMEMBER::SharedCtor() {
  respondent_id_ = PROTOBUF_ULONGLONG(0);
}

CS_TEAMAPPLYMEMBER::~CS_TEAMAPPLYMEMBER() {
  // @@protoc_insertion_point(destructor:CS_TEAMAPPLYMEMBER)
  SharedDtor();
}

void CS_TEAMAPPLYMEMBER::SharedDtor() {
}

void CS_TEAMAPPLYMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TEAMAPPLYMEMBER& CS_TEAMAPPLYMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TEAMAPPLYMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMAPPLYMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  respondent_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_TEAMAPPLYMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 respondent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          respondent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TEAMAPPLYMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMAPPLYMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 respondent_id = 1;
  if (this->respondent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_respondent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMAPPLYMEMBER)
  return target;
}

size_t CS_TEAMAPPLYMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMAPPLYMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 respondent_id = 1;
  if (this->respondent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_respondent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TEAMAPPLYMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMAPPLYMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TEAMAPPLYMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TEAMAPPLYMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMAPPLYMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMAPPLYMEMBER)
    MergeFrom(*source);
  }
}

void CS_TEAMAPPLYMEMBER::MergeFrom(const CS_TEAMAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMAPPLYMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.respondent_id() != 0) {
    _internal_set_respondent_id(from._internal_respondent_id());
  }
}

void CS_TEAMAPPLYMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMAPPLYMEMBER::CopyFrom(const CS_TEAMAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEAMAPPLYMEMBER::IsInitialized() const {
  return true;
}

void CS_TEAMAPPLYMEMBER::InternalSwap(CS_TEAMAPPLYMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(respondent_id_, other->respondent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEAMAPPLYMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_TEAMAPPLYMEMBER::InitAsDefaultInstance() {
}
class SC_TEAMAPPLYMEMBER::_Internal {
 public:
};

SC_TEAMAPPLYMEMBER::SC_TEAMAPPLYMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_TEAMAPPLYMEMBER)
}
SC_TEAMAPPLYMEMBER::SC_TEAMAPPLYMEMBER(const SC_TEAMAPPLYMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  applicant_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_applicant_name().empty()) {
    applicant_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.applicant_name_);
  }
  applicant_id_ = from.applicant_id_;
  // @@protoc_insertion_point(copy_constructor:SC_TEAMAPPLYMEMBER)
}

void SC_TEAMAPPLYMEMBER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base);
  applicant_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  applicant_id_ = PROTOBUF_ULONGLONG(0);
}

SC_TEAMAPPLYMEMBER::~SC_TEAMAPPLYMEMBER() {
  // @@protoc_insertion_point(destructor:SC_TEAMAPPLYMEMBER)
  SharedDtor();
}

void SC_TEAMAPPLYMEMBER::SharedDtor() {
  applicant_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_TEAMAPPLYMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_TEAMAPPLYMEMBER& SC_TEAMAPPLYMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_TEAMAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_TEAMAPPLYMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_TEAMAPPLYMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applicant_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  applicant_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SC_TEAMAPPLYMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 applicant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string applicant_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_applicant_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_TEAMAPPLYMEMBER.applicant_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_TEAMAPPLYMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_TEAMAPPLYMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applicant_id(), target);
  }

  // string applicant_name = 2;
  if (this->applicant_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_applicant_name().data(), static_cast<int>(this->_internal_applicant_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_TEAMAPPLYMEMBER.applicant_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_applicant_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_TEAMAPPLYMEMBER)
  return target;
}

size_t SC_TEAMAPPLYMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_TEAMAPPLYMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string applicant_name = 2;
  if (this->applicant_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applicant_name());
  }

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_applicant_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_TEAMAPPLYMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_TEAMAPPLYMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_TEAMAPPLYMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_TEAMAPPLYMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_TEAMAPPLYMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_TEAMAPPLYMEMBER)
    MergeFrom(*source);
  }
}

void SC_TEAMAPPLYMEMBER::MergeFrom(const SC_TEAMAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_TEAMAPPLYMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicant_name().size() > 0) {

    applicant_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.applicant_name_);
  }
  if (from.applicant_id() != 0) {
    _internal_set_applicant_id(from._internal_applicant_id());
  }
}

void SC_TEAMAPPLYMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_TEAMAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_TEAMAPPLYMEMBER::CopyFrom(const SC_TEAMAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_TEAMAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TEAMAPPLYMEMBER::IsInitialized() const {
  return true;
}

void SC_TEAMAPPLYMEMBER::InternalSwap(SC_TEAMAPPLYMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  applicant_name_.Swap(&other->applicant_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(applicant_id_, other->applicant_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TEAMAPPLYMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_TEAMACCEPTAPPLY::InitAsDefaultInstance() {
}
class CS_TEAMACCEPTAPPLY::_Internal {
 public:
};

CS_TEAMACCEPTAPPLY::CS_TEAMACCEPTAPPLY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_TEAMACCEPTAPPLY)
}
CS_TEAMACCEPTAPPLY::CS_TEAMACCEPTAPPLY(const CS_TEAMACCEPTAPPLY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CS_TEAMACCEPTAPPLY)
}

void CS_TEAMACCEPTAPPLY::SharedCtor() {
  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
}

CS_TEAMACCEPTAPPLY::~CS_TEAMACCEPTAPPLY() {
  // @@protoc_insertion_point(destructor:CS_TEAMACCEPTAPPLY)
  SharedDtor();
}

void CS_TEAMACCEPTAPPLY::SharedDtor() {
}

void CS_TEAMACCEPTAPPLY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_TEAMACCEPTAPPLY& CS_TEAMACCEPTAPPLY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_TEAMACCEPTAPPLY_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_TEAMACCEPTAPPLY::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_TEAMACCEPTAPPLY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* CS_TEAMACCEPTAPPLY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 applicant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_TEAMACCEPTAPPLY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_TEAMACCEPTAPPLY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applicant_id(), target);
  }

  // bool result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_TEAMACCEPTAPPLY)
  return target;
}

size_t CS_TEAMACCEPTAPPLY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_TEAMACCEPTAPPLY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_applicant_id());
  }

  // bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_TEAMACCEPTAPPLY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_TEAMACCEPTAPPLY)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_TEAMACCEPTAPPLY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_TEAMACCEPTAPPLY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_TEAMACCEPTAPPLY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_TEAMACCEPTAPPLY)
    MergeFrom(*source);
  }
}

void CS_TEAMACCEPTAPPLY::MergeFrom(const CS_TEAMACCEPTAPPLY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_TEAMACCEPTAPPLY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicant_id() != 0) {
    _internal_set_applicant_id(from._internal_applicant_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CS_TEAMACCEPTAPPLY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_TEAMACCEPTAPPLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_TEAMACCEPTAPPLY::CopyFrom(const CS_TEAMACCEPTAPPLY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_TEAMACCEPTAPPLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEAMACCEPTAPPLY::IsInitialized() const {
  return true;
}

void CS_TEAMACCEPTAPPLY::InternalSwap(CS_TEAMACCEPTAPPLY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(applicant_id_, other->applicant_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEAMACCEPTAPPLY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_GUILDCREATE::InitAsDefaultInstance() {
}
class CS_GUILDCREATE::_Internal {
 public:
};

CS_GUILDCREATE::CS_GUILDCREATE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GUILDCREATE)
}
CS_GUILDCREATE::CS_GUILDCREATE(const CS_GUILDCREATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_GUILDCREATE)
}

void CS_GUILDCREATE::SharedCtor() {
}

CS_GUILDCREATE::~CS_GUILDCREATE() {
  // @@protoc_insertion_point(destructor:CS_GUILDCREATE)
  SharedDtor();
}

void CS_GUILDCREATE::SharedDtor() {
}

void CS_GUILDCREATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_GUILDCREATE& CS_GUILDCREATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_GUILDCREATE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_GUILDCREATE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GUILDCREATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CS_GUILDCREATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_GUILDCREATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GUILDCREATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GUILDCREATE)
  return target;
}

size_t CS_GUILDCREATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GUILDCREATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_GUILDCREATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GUILDCREATE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GUILDCREATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_GUILDCREATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GUILDCREATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GUILDCREATE)
    MergeFrom(*source);
  }
}

void CS_GUILDCREATE::MergeFrom(const CS_GUILDCREATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GUILDCREATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_GUILDCREATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GUILDCREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GUILDCREATE::CopyFrom(const CS_GUILDCREATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GUILDCREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GUILDCREATE::IsInitialized() const {
  return true;
}

void CS_GUILDCREATE::InternalSwap(CS_GUILDCREATE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GUILDCREATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_GUILDQUIT::InitAsDefaultInstance() {
}
class CS_GUILDQUIT::_Internal {
 public:
};

CS_GUILDQUIT::CS_GUILDQUIT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GUILDQUIT)
}
CS_GUILDQUIT::CS_GUILDQUIT(const CS_GUILDQUIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS_GUILDQUIT)
}

void CS_GUILDQUIT::SharedCtor() {
}

CS_GUILDQUIT::~CS_GUILDQUIT() {
  // @@protoc_insertion_point(destructor:CS_GUILDQUIT)
  SharedDtor();
}

void CS_GUILDQUIT::SharedDtor() {
}

void CS_GUILDQUIT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_GUILDQUIT& CS_GUILDQUIT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_GUILDQUIT_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_GUILDQUIT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GUILDQUIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CS_GUILDQUIT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_GUILDQUIT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GUILDQUIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GUILDQUIT)
  return target;
}

size_t CS_GUILDQUIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GUILDQUIT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_GUILDQUIT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GUILDQUIT)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GUILDQUIT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_GUILDQUIT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GUILDQUIT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GUILDQUIT)
    MergeFrom(*source);
  }
}

void CS_GUILDQUIT::MergeFrom(const CS_GUILDQUIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GUILDQUIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CS_GUILDQUIT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GUILDQUIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GUILDQUIT::CopyFrom(const CS_GUILDQUIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GUILDQUIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GUILDQUIT::IsInitialized() const {
  return true;
}

void CS_GUILDQUIT::InternalSwap(CS_GUILDQUIT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GUILDQUIT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_GUILDKICKMEMBER::InitAsDefaultInstance() {
}
class CS_GUILDKICKMEMBER::_Internal {
 public:
};

CS_GUILDKICKMEMBER::CS_GUILDKICKMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GUILDKICKMEMBER)
}
CS_GUILDKICKMEMBER::CS_GUILDKICKMEMBER(const CS_GUILDKICKMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_id_ = from.member_id_;
  // @@protoc_insertion_point(copy_constructor:CS_GUILDKICKMEMBER)
}

void CS_GUILDKICKMEMBER::SharedCtor() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}

CS_GUILDKICKMEMBER::~CS_GUILDKICKMEMBER() {
  // @@protoc_insertion_point(destructor:CS_GUILDKICKMEMBER)
  SharedDtor();
}

void CS_GUILDKICKMEMBER::SharedDtor() {
}

void CS_GUILDKICKMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_GUILDKICKMEMBER& CS_GUILDKICKMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_GUILDKICKMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_GUILDKICKMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GUILDKICKMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_GUILDKICKMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_GUILDKICKMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GUILDKICKMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 member_id = 1;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_member_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GUILDKICKMEMBER)
  return target;
}

size_t CS_GUILDKICKMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GUILDKICKMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 member_id = 1;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_GUILDKICKMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GUILDKICKMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GUILDKICKMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_GUILDKICKMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GUILDKICKMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GUILDKICKMEMBER)
    MergeFrom(*source);
  }
}

void CS_GUILDKICKMEMBER::MergeFrom(const CS_GUILDKICKMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GUILDKICKMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
}

void CS_GUILDKICKMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GUILDKICKMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GUILDKICKMEMBER::CopyFrom(const CS_GUILDKICKMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GUILDKICKMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GUILDKICKMEMBER::IsInitialized() const {
  return true;
}

void CS_GUILDKICKMEMBER::InternalSwap(CS_GUILDKICKMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GUILDKICKMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_GUILDINVITEMEMBER::InitAsDefaultInstance() {
}
class CS_GUILDINVITEMEMBER::_Internal {
 public:
};

CS_GUILDINVITEMEMBER::CS_GUILDINVITEMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GUILDINVITEMEMBER)
}
CS_GUILDINVITEMEMBER::CS_GUILDINVITEMEMBER(const CS_GUILDINVITEMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitee_id_ = from.invitee_id_;
  // @@protoc_insertion_point(copy_constructor:CS_GUILDINVITEMEMBER)
}

void CS_GUILDINVITEMEMBER::SharedCtor() {
  invitee_id_ = PROTOBUF_ULONGLONG(0);
}

CS_GUILDINVITEMEMBER::~CS_GUILDINVITEMEMBER() {
  // @@protoc_insertion_point(destructor:CS_GUILDINVITEMEMBER)
  SharedDtor();
}

void CS_GUILDINVITEMEMBER::SharedDtor() {
}

void CS_GUILDINVITEMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_GUILDINVITEMEMBER& CS_GUILDINVITEMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_GUILDINVITEMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GUILDINVITEMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitee_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_GUILDINVITEMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 invitee_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          invitee_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_GUILDINVITEMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GUILDINVITEMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 invitee_id = 1;
  if (this->invitee_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_invitee_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GUILDINVITEMEMBER)
  return target;
}

size_t CS_GUILDINVITEMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GUILDINVITEMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 invitee_id = 1;
  if (this->invitee_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_invitee_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_GUILDINVITEMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GUILDINVITEMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GUILDINVITEMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_GUILDINVITEMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GUILDINVITEMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GUILDINVITEMEMBER)
    MergeFrom(*source);
  }
}

void CS_GUILDINVITEMEMBER::MergeFrom(const CS_GUILDINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GUILDINVITEMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invitee_id() != 0) {
    _internal_set_invitee_id(from._internal_invitee_id());
  }
}

void CS_GUILDINVITEMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GUILDINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GUILDINVITEMEMBER::CopyFrom(const CS_GUILDINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GUILDINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GUILDINVITEMEMBER::IsInitialized() const {
  return true;
}

void CS_GUILDINVITEMEMBER::InternalSwap(CS_GUILDINVITEMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(invitee_id_, other->invitee_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GUILDINVITEMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_GUILDINVITEMEMBER::InitAsDefaultInstance() {
}
class SC_GUILDINVITEMEMBER::_Internal {
 public:
};

SC_GUILDINVITEMEMBER::SC_GUILDINVITEMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_GUILDINVITEMEMBER)
}
SC_GUILDINVITEMEMBER::SC_GUILDINVITEMEMBER(const SC_GUILDINVITEMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inviter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inviter_name().empty()) {
    inviter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&inviter_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(inviter_id_));
  // @@protoc_insertion_point(copy_constructor:SC_GUILDINVITEMEMBER)
}

void SC_GUILDINVITEMEMBER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto.base);
  inviter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviter_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(inviter_id_));
}

SC_GUILDINVITEMEMBER::~SC_GUILDINVITEMEMBER() {
  // @@protoc_insertion_point(destructor:SC_GUILDINVITEMEMBER)
  SharedDtor();
}

void SC_GUILDINVITEMEMBER::SharedDtor() {
  inviter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_GUILDINVITEMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_GUILDINVITEMEMBER& SC_GUILDINVITEMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_GUILDINVITEMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_GUILDINVITEMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_GUILDINVITEMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inviter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inviter_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(inviter_id_));
  _internal_metadata_.Clear();
}

const char* SC_GUILDINVITEMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 inviter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inviter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inviter_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_inviter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_GUILDINVITEMEMBER.inviter_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_GUILDINVITEMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_GUILDINVITEMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_inviter_id(), target);
  }

  // string inviter_name = 3;
  if (this->inviter_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inviter_name().data(), static_cast<int>(this->_internal_inviter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_GUILDINVITEMEMBER.inviter_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inviter_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_GUILDINVITEMEMBER)
  return target;
}

size_t SC_GUILDINVITEMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_GUILDINVITEMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inviter_name = 3;
  if (this->inviter_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inviter_name());
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_inviter_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_GUILDINVITEMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_GUILDINVITEMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_GUILDINVITEMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_GUILDINVITEMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_GUILDINVITEMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_GUILDINVITEMEMBER)
    MergeFrom(*source);
  }
}

void SC_GUILDINVITEMEMBER::MergeFrom(const SC_GUILDINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_GUILDINVITEMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inviter_name().size() > 0) {

    inviter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.inviter_id() != 0) {
    _internal_set_inviter_id(from._internal_inviter_id());
  }
}

void SC_GUILDINVITEMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_GUILDINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_GUILDINVITEMEMBER::CopyFrom(const SC_GUILDINVITEMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_GUILDINVITEMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_GUILDINVITEMEMBER::IsInitialized() const {
  return true;
}

void SC_GUILDINVITEMEMBER::InternalSwap(SC_GUILDINVITEMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inviter_name_.Swap(&other->inviter_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
  swap(inviter_id_, other->inviter_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_GUILDINVITEMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_GUILDACCEPTINVITE::InitAsDefaultInstance() {
}
class CS_GUILDACCEPTINVITE::_Internal {
 public:
};

CS_GUILDACCEPTINVITE::CS_GUILDACCEPTINVITE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GUILDACCEPTINVITE)
}
CS_GUILDACCEPTINVITE::CS_GUILDACCEPTINVITE(const CS_GUILDACCEPTINVITE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CS_GUILDACCEPTINVITE)
}

void CS_GUILDACCEPTINVITE::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(result_));
}

CS_GUILDACCEPTINVITE::~CS_GUILDACCEPTINVITE() {
  // @@protoc_insertion_point(destructor:CS_GUILDACCEPTINVITE)
  SharedDtor();
}

void CS_GUILDACCEPTINVITE::SharedDtor() {
}

void CS_GUILDACCEPTINVITE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_GUILDACCEPTINVITE& CS_GUILDACCEPTINVITE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_GUILDACCEPTINVITE_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_GUILDACCEPTINVITE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GUILDACCEPTINVITE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* CS_GUILDACCEPTINVITE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 inviter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inviter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_GUILDACCEPTINVITE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GUILDACCEPTINVITE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_inviter_id(), target);
  }

  // bool result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GUILDACCEPTINVITE)
  return target;
}

size_t CS_GUILDACCEPTINVITE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GUILDACCEPTINVITE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_inviter_id());
  }

  // bool result = 3;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_GUILDACCEPTINVITE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GUILDACCEPTINVITE)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GUILDACCEPTINVITE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_GUILDACCEPTINVITE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GUILDACCEPTINVITE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GUILDACCEPTINVITE)
    MergeFrom(*source);
  }
}

void CS_GUILDACCEPTINVITE::MergeFrom(const CS_GUILDACCEPTINVITE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GUILDACCEPTINVITE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.inviter_id() != 0) {
    _internal_set_inviter_id(from._internal_inviter_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CS_GUILDACCEPTINVITE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GUILDACCEPTINVITE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GUILDACCEPTINVITE::CopyFrom(const CS_GUILDACCEPTINVITE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GUILDACCEPTINVITE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GUILDACCEPTINVITE::IsInitialized() const {
  return true;
}

void CS_GUILDACCEPTINVITE::InternalSwap(CS_GUILDACCEPTINVITE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
  swap(inviter_id_, other->inviter_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GUILDACCEPTINVITE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_GUILDNEWLEADER::InitAsDefaultInstance() {
}
class CS_GUILDNEWLEADER::_Internal {
 public:
};

CS_GUILDNEWLEADER::CS_GUILDNEWLEADER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GUILDNEWLEADER)
}
CS_GUILDNEWLEADER::CS_GUILDNEWLEADER(const CS_GUILDNEWLEADER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_leader_id_ = from.new_leader_id_;
  // @@protoc_insertion_point(copy_constructor:CS_GUILDNEWLEADER)
}

void CS_GUILDNEWLEADER::SharedCtor() {
  new_leader_id_ = PROTOBUF_ULONGLONG(0);
}

CS_GUILDNEWLEADER::~CS_GUILDNEWLEADER() {
  // @@protoc_insertion_point(destructor:CS_GUILDNEWLEADER)
  SharedDtor();
}

void CS_GUILDNEWLEADER::SharedDtor() {
}

void CS_GUILDNEWLEADER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_GUILDNEWLEADER& CS_GUILDNEWLEADER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_GUILDNEWLEADER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_GUILDNEWLEADER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GUILDNEWLEADER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_leader_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_GUILDNEWLEADER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 new_leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_GUILDNEWLEADER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GUILDNEWLEADER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 new_leader_id = 2;
  if (this->new_leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_new_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GUILDNEWLEADER)
  return target;
}

size_t CS_GUILDNEWLEADER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GUILDNEWLEADER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 new_leader_id = 2;
  if (this->new_leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_leader_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_GUILDNEWLEADER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GUILDNEWLEADER)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GUILDNEWLEADER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_GUILDNEWLEADER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GUILDNEWLEADER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GUILDNEWLEADER)
    MergeFrom(*source);
  }
}

void CS_GUILDNEWLEADER::MergeFrom(const CS_GUILDNEWLEADER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GUILDNEWLEADER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_leader_id() != 0) {
    _internal_set_new_leader_id(from._internal_new_leader_id());
  }
}

void CS_GUILDNEWLEADER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GUILDNEWLEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GUILDNEWLEADER::CopyFrom(const CS_GUILDNEWLEADER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GUILDNEWLEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GUILDNEWLEADER::IsInitialized() const {
  return true;
}

void CS_GUILDNEWLEADER::InternalSwap(CS_GUILDNEWLEADER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(new_leader_id_, other->new_leader_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GUILDNEWLEADER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_GUILDMEMBER_INFO::InitAsDefaultInstance() {
}
class SC_GUILDMEMBER_INFO::_Internal {
 public:
};

void SC_GUILDMEMBER_INFO::clear_member_list() {
  member_list_.Clear();
}
SC_GUILDMEMBER_INFO::SC_GUILDMEMBER_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_GUILDMEMBER_INFO)
}
SC_GUILDMEMBER_INFO::SC_GUILDMEMBER_INFO(const SC_GUILDMEMBER_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      member_list_(from.member_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_GUILDMEMBER_INFO)
}

void SC_GUILDMEMBER_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_GUILDMEMBER_INFO_msg_2fzone_5fservice_2eproto.base);
}

SC_GUILDMEMBER_INFO::~SC_GUILDMEMBER_INFO() {
  // @@protoc_insertion_point(destructor:SC_GUILDMEMBER_INFO)
  SharedDtor();
}

void SC_GUILDMEMBER_INFO::SharedDtor() {
}

void SC_GUILDMEMBER_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_GUILDMEMBER_INFO& SC_GUILDMEMBER_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_GUILDMEMBER_INFO_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_GUILDMEMBER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_GUILDMEMBER_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_list_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_GUILDMEMBER_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GuildMemberInfo member_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_GUILDMEMBER_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_GUILDMEMBER_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GuildMemberInfo member_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_member_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_GUILDMEMBER_INFO)
  return target;
}

size_t SC_GUILDMEMBER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_GUILDMEMBER_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GuildMemberInfo member_list = 1;
  total_size += 1UL * this->_internal_member_list_size();
  for (const auto& msg : this->member_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_GUILDMEMBER_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_GUILDMEMBER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_GUILDMEMBER_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_GUILDMEMBER_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_GUILDMEMBER_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_GUILDMEMBER_INFO)
    MergeFrom(*source);
  }
}

void SC_GUILDMEMBER_INFO::MergeFrom(const SC_GUILDMEMBER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_GUILDMEMBER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_list_.MergeFrom(from.member_list_);
}

void SC_GUILDMEMBER_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_GUILDMEMBER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_GUILDMEMBER_INFO::CopyFrom(const SC_GUILDMEMBER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_GUILDMEMBER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_GUILDMEMBER_INFO::IsInitialized() const {
  return true;
}

void SC_GUILDMEMBER_INFO::InternalSwap(SC_GUILDMEMBER_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_list_.InternalSwap(&other->member_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_GUILDMEMBER_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_GUILDMEMBER_ACTION::InitAsDefaultInstance() {
}
class SC_GUILDMEMBER_ACTION::_Internal {
 public:
};

SC_GUILDMEMBER_ACTION::SC_GUILDMEMBER_ACTION()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_GUILDMEMBER_ACTION)
}
SC_GUILDMEMBER_ACTION::SC_GUILDMEMBER_ACTION(const SC_GUILDMEMBER_ACTION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  member_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_member_name().empty()) {
    member_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_name_);
  }
  ::memcpy(&operator_id_, &from.operator_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_last_logout_) -
    reinterpret_cast<char*>(&operator_id_)) + sizeof(member_last_logout_));
  // @@protoc_insertion_point(copy_constructor:SC_GUILDMEMBER_ACTION)
}

void SC_GUILDMEMBER_ACTION::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_GUILDMEMBER_ACTION_msg_2fzone_5fservice_2eproto.base);
  member_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_last_logout_) -
      reinterpret_cast<char*>(&operator_id_)) + sizeof(member_last_logout_));
}

SC_GUILDMEMBER_ACTION::~SC_GUILDMEMBER_ACTION() {
  // @@protoc_insertion_point(destructor:SC_GUILDMEMBER_ACTION)
  SharedDtor();
}

void SC_GUILDMEMBER_ACTION::SharedDtor() {
  member_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_GUILDMEMBER_ACTION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_GUILDMEMBER_ACTION& SC_GUILDMEMBER_ACTION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_GUILDMEMBER_ACTION_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_GUILDMEMBER_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_GUILDMEMBER_ACTION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_last_logout_) -
      reinterpret_cast<char*>(&operator_id_)) + sizeof(member_last_logout_));
  _internal_metadata_.Clear();
}

const char* SC_GUILDMEMBER_ACTION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SC_GUILDMEMBER_ACTION.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::SC_GUILDMEMBER_ACTION_Action>(val));
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 member_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 member_lev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          member_lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string member_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_member_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_GUILDMEMBER_ACTION.member_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool member_online = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          member_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 member_rank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          member_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 member_score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          member_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 member_last_logout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          member_last_logout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_GUILDMEMBER_ACTION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_GUILDMEMBER_ACTION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SC_GUILDMEMBER_ACTION.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  // uint64 member_id = 3;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_member_id(), target);
  }

  // uint32 member_lev = 4;
  if (this->member_lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_member_lev(), target);
  }

  // string member_name = 5;
  if (this->member_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_member_name().data(), static_cast<int>(this->_internal_member_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_GUILDMEMBER_ACTION.member_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_member_name(), target);
  }

  // bool member_online = 6;
  if (this->member_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_member_online(), target);
  }

  // uint32 member_rank = 7;
  if (this->member_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_member_rank(), target);
  }

  // uint32 member_score = 8;
  if (this->member_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_member_score(), target);
  }

  // uint32 member_last_logout = 9;
  if (this->member_last_logout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_member_last_logout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_GUILDMEMBER_ACTION)
  return target;
}

size_t SC_GUILDMEMBER_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_GUILDMEMBER_ACTION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string member_name = 5;
  if (this->member_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_member_name());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  // .SC_GUILDMEMBER_ACTION.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // uint32 member_lev = 4;
  if (this->member_lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_member_lev());
  }

  // uint64 member_id = 3;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  // bool member_online = 6;
  if (this->member_online() != 0) {
    total_size += 1 + 1;
  }

  // uint32 member_rank = 7;
  if (this->member_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_member_rank());
  }

  // uint32 member_score = 8;
  if (this->member_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_member_score());
  }

  // uint32 member_last_logout = 9;
  if (this->member_last_logout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_member_last_logout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_GUILDMEMBER_ACTION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_GUILDMEMBER_ACTION)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_GUILDMEMBER_ACTION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_GUILDMEMBER_ACTION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_GUILDMEMBER_ACTION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_GUILDMEMBER_ACTION)
    MergeFrom(*source);
  }
}

void SC_GUILDMEMBER_ACTION::MergeFrom(const SC_GUILDMEMBER_ACTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_GUILDMEMBER_ACTION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.member_name().size() > 0) {

    member_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_name_);
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.member_lev() != 0) {
    _internal_set_member_lev(from._internal_member_lev());
  }
  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from.member_online() != 0) {
    _internal_set_member_online(from._internal_member_online());
  }
  if (from.member_rank() != 0) {
    _internal_set_member_rank(from._internal_member_rank());
  }
  if (from.member_score() != 0) {
    _internal_set_member_score(from._internal_member_score());
  }
  if (from.member_last_logout() != 0) {
    _internal_set_member_last_logout(from._internal_member_last_logout());
  }
}

void SC_GUILDMEMBER_ACTION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_GUILDMEMBER_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_GUILDMEMBER_ACTION::CopyFrom(const SC_GUILDMEMBER_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_GUILDMEMBER_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_GUILDMEMBER_ACTION::IsInitialized() const {
  return true;
}

void SC_GUILDMEMBER_ACTION::InternalSwap(SC_GUILDMEMBER_ACTION* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_name_.Swap(&other->member_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operator_id_, other->operator_id_);
  swap(action_, other->action_);
  swap(member_lev_, other->member_lev_);
  swap(member_id_, other->member_id_);
  swap(member_online_, other->member_online_);
  swap(member_rank_, other->member_rank_);
  swap(member_score_, other->member_score_);
  swap(member_last_logout_, other->member_last_logout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_GUILDMEMBER_ACTION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_GUILDAPPLYMEMBER::InitAsDefaultInstance() {
}
class CS_GUILDAPPLYMEMBER::_Internal {
 public:
};

CS_GUILDAPPLYMEMBER::CS_GUILDAPPLYMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GUILDAPPLYMEMBER)
}
CS_GUILDAPPLYMEMBER::CS_GUILDAPPLYMEMBER(const CS_GUILDAPPLYMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  respondent_id_ = from.respondent_id_;
  // @@protoc_insertion_point(copy_constructor:CS_GUILDAPPLYMEMBER)
}

void CS_GUILDAPPLYMEMBER::SharedCtor() {
  respondent_id_ = PROTOBUF_ULONGLONG(0);
}

CS_GUILDAPPLYMEMBER::~CS_GUILDAPPLYMEMBER() {
  // @@protoc_insertion_point(destructor:CS_GUILDAPPLYMEMBER)
  SharedDtor();
}

void CS_GUILDAPPLYMEMBER::SharedDtor() {
}

void CS_GUILDAPPLYMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_GUILDAPPLYMEMBER& CS_GUILDAPPLYMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_GUILDAPPLYMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GUILDAPPLYMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  respondent_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CS_GUILDAPPLYMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 respondent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          respondent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_GUILDAPPLYMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GUILDAPPLYMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 respondent_id = 1;
  if (this->respondent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_respondent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GUILDAPPLYMEMBER)
  return target;
}

size_t CS_GUILDAPPLYMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GUILDAPPLYMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 respondent_id = 1;
  if (this->respondent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_respondent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_GUILDAPPLYMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GUILDAPPLYMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GUILDAPPLYMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_GUILDAPPLYMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GUILDAPPLYMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GUILDAPPLYMEMBER)
    MergeFrom(*source);
  }
}

void CS_GUILDAPPLYMEMBER::MergeFrom(const CS_GUILDAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GUILDAPPLYMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.respondent_id() != 0) {
    _internal_set_respondent_id(from._internal_respondent_id());
  }
}

void CS_GUILDAPPLYMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GUILDAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GUILDAPPLYMEMBER::CopyFrom(const CS_GUILDAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GUILDAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GUILDAPPLYMEMBER::IsInitialized() const {
  return true;
}

void CS_GUILDAPPLYMEMBER::InternalSwap(CS_GUILDAPPLYMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(respondent_id_, other->respondent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GUILDAPPLYMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_GUILDAPPLYMEMBER::InitAsDefaultInstance() {
}
class SC_GUILDAPPLYMEMBER::_Internal {
 public:
};

SC_GUILDAPPLYMEMBER::SC_GUILDAPPLYMEMBER()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_GUILDAPPLYMEMBER)
}
SC_GUILDAPPLYMEMBER::SC_GUILDAPPLYMEMBER(const SC_GUILDAPPLYMEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  applicant_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_applicant_name().empty()) {
    applicant_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.applicant_name_);
  }
  applicant_id_ = from.applicant_id_;
  // @@protoc_insertion_point(copy_constructor:SC_GUILDAPPLYMEMBER)
}

void SC_GUILDAPPLYMEMBER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base);
  applicant_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  applicant_id_ = PROTOBUF_ULONGLONG(0);
}

SC_GUILDAPPLYMEMBER::~SC_GUILDAPPLYMEMBER() {
  // @@protoc_insertion_point(destructor:SC_GUILDAPPLYMEMBER)
  SharedDtor();
}

void SC_GUILDAPPLYMEMBER::SharedDtor() {
  applicant_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_GUILDAPPLYMEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_GUILDAPPLYMEMBER& SC_GUILDAPPLYMEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_GUILDAPPLYMEMBER_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_GUILDAPPLYMEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_GUILDAPPLYMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applicant_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  applicant_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SC_GUILDAPPLYMEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 applicant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string applicant_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_applicant_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_GUILDAPPLYMEMBER.applicant_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_GUILDAPPLYMEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_GUILDAPPLYMEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applicant_id(), target);
  }

  // string applicant_name = 2;
  if (this->applicant_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_applicant_name().data(), static_cast<int>(this->_internal_applicant_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_GUILDAPPLYMEMBER.applicant_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_applicant_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_GUILDAPPLYMEMBER)
  return target;
}

size_t SC_GUILDAPPLYMEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_GUILDAPPLYMEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string applicant_name = 2;
  if (this->applicant_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applicant_name());
  }

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_applicant_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_GUILDAPPLYMEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_GUILDAPPLYMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_GUILDAPPLYMEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_GUILDAPPLYMEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_GUILDAPPLYMEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_GUILDAPPLYMEMBER)
    MergeFrom(*source);
  }
}

void SC_GUILDAPPLYMEMBER::MergeFrom(const SC_GUILDAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_GUILDAPPLYMEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicant_name().size() > 0) {

    applicant_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.applicant_name_);
  }
  if (from.applicant_id() != 0) {
    _internal_set_applicant_id(from._internal_applicant_id());
  }
}

void SC_GUILDAPPLYMEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_GUILDAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_GUILDAPPLYMEMBER::CopyFrom(const SC_GUILDAPPLYMEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_GUILDAPPLYMEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_GUILDAPPLYMEMBER::IsInitialized() const {
  return true;
}

void SC_GUILDAPPLYMEMBER::InternalSwap(SC_GUILDAPPLYMEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  applicant_name_.Swap(&other->applicant_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(applicant_id_, other->applicant_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_GUILDAPPLYMEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_GUILDACCEPTAPPLY::InitAsDefaultInstance() {
}
class CS_GUILDACCEPTAPPLY::_Internal {
 public:
};

CS_GUILDACCEPTAPPLY::CS_GUILDACCEPTAPPLY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_GUILDACCEPTAPPLY)
}
CS_GUILDACCEPTAPPLY::CS_GUILDACCEPTAPPLY(const CS_GUILDACCEPTAPPLY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CS_GUILDACCEPTAPPLY)
}

void CS_GUILDACCEPTAPPLY::SharedCtor() {
  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
}

CS_GUILDACCEPTAPPLY::~CS_GUILDACCEPTAPPLY() {
  // @@protoc_insertion_point(destructor:CS_GUILDACCEPTAPPLY)
  SharedDtor();
}

void CS_GUILDACCEPTAPPLY::SharedDtor() {
}

void CS_GUILDACCEPTAPPLY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_GUILDACCEPTAPPLY& CS_GUILDACCEPTAPPLY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_GUILDACCEPTAPPLY_msg_2fzone_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_GUILDACCEPTAPPLY::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_GUILDACCEPTAPPLY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* CS_GUILDACCEPTAPPLY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 applicant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_GUILDACCEPTAPPLY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_GUILDACCEPTAPPLY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applicant_id(), target);
  }

  // bool result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_GUILDACCEPTAPPLY)
  return target;
}

size_t CS_GUILDACCEPTAPPLY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_GUILDACCEPTAPPLY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_applicant_id());
  }

  // bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_GUILDACCEPTAPPLY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_GUILDACCEPTAPPLY)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_GUILDACCEPTAPPLY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_GUILDACCEPTAPPLY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_GUILDACCEPTAPPLY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_GUILDACCEPTAPPLY)
    MergeFrom(*source);
  }
}

void CS_GUILDACCEPTAPPLY::MergeFrom(const CS_GUILDACCEPTAPPLY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_GUILDACCEPTAPPLY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicant_id() != 0) {
    _internal_set_applicant_id(from._internal_applicant_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CS_GUILDACCEPTAPPLY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_GUILDACCEPTAPPLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_GUILDACCEPTAPPLY::CopyFrom(const CS_GUILDACCEPTAPPLY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_GUILDACCEPTAPPLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GUILDACCEPTAPPLY::IsInitialized() const {
  return true;
}

void CS_GUILDACCEPTAPPLY::InternalSwap(CS_GUILDACCEPTAPPLY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(applicant_id_, other->applicant_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GUILDACCEPTAPPLY::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SC_LOADMAP* Arena::CreateMaybeMessage< ::SC_LOADMAP >(Arena* arena) {
  return Arena::CreateInternal< ::SC_LOADMAP >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_LOADMAP_SUCC* Arena::CreateMaybeMessage< ::CS_LOADMAP_SUCC >(Arena* arena) {
  return Arena::CreateInternal< ::CS_LOADMAP_SUCC >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_PLAYERINFO* Arena::CreateMaybeMessage< ::SC_PLAYERINFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_PLAYERINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ACTORATTRIB* Arena::CreateMaybeMessage< ::SC_ACTORATTRIB >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ACTORATTRIB >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_COMMONDATA_Data* Arena::CreateMaybeMessage< ::SC_COMMONDATA_Data >(Arena* arena) {
  return Arena::CreateInternal< ::SC_COMMONDATA_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_COMMONDATA* Arena::CreateMaybeMessage< ::SC_COMMONDATA >(Arena* arena) {
  return Arena::CreateInternal< ::SC_COMMONDATA >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_DATACOUNT_Data* Arena::CreateMaybeMessage< ::SC_DATACOUNT_Data >(Arena* arena) {
  return Arena::CreateInternal< ::SC_DATACOUNT_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_DATACOUNT* Arena::CreateMaybeMessage< ::SC_DATACOUNT >(Arena* arena) {
  return Arena::CreateInternal< ::SC_DATACOUNT >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_COOLDOWN_Data* Arena::CreateMaybeMessage< ::SC_COOLDOWN_Data >(Arena* arena) {
  return Arena::CreateInternal< ::SC_COOLDOWN_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_COOLDOWN* Arena::CreateMaybeMessage< ::SC_COOLDOWN >(Arena* arena) {
  return Arena::CreateInternal< ::SC_COOLDOWN >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_SYSVAR_Data* Arena::CreateMaybeMessage< ::SC_SYSVAR_Data >(Arena* arena) {
  return Arena::CreateInternal< ::SC_SYSVAR_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_SYSVAR* Arena::CreateMaybeMessage< ::SC_SYSVAR >(Arena* arena) {
  return Arena::CreateInternal< ::SC_SYSVAR >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ENTERMAP* Arena::CreateMaybeMessage< ::SC_ENTERMAP >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ENTERMAP >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_AOI_NEW* Arena::CreateMaybeMessage< ::SC_AOI_NEW >(Arena* arena) {
  return Arena::CreateInternal< ::SC_AOI_NEW >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_AOI_REMOVE* Arena::CreateMaybeMessage< ::SC_AOI_REMOVE >(Arena* arena) {
  return Arena::CreateInternal< ::SC_AOI_REMOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_AOI_UPDATE* Arena::CreateMaybeMessage< ::SC_AOI_UPDATE >(Arena* arena) {
  return Arena::CreateInternal< ::SC_AOI_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_MAPVAL_MapVal* Arena::CreateMaybeMessage< ::SC_MAPVAL_MapVal >(Arena* arena) {
  return Arena::CreateInternal< ::SC_MAPVAL_MapVal >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_MAPVAL* Arena::CreateMaybeMessage< ::SC_MAPVAL >(Arena* arena) {
  return Arena::CreateInternal< ::SC_MAPVAL >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ATTRIB_CHANGE_Data* Arena::CreateMaybeMessage< ::SC_ATTRIB_CHANGE_Data >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ATTRIB_CHANGE_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ATTRIB_CHANGE* Arena::CreateMaybeMessage< ::SC_ATTRIB_CHANGE >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ATTRIB_CHANGE >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_STATUS_LIST_Data* Arena::CreateMaybeMessage< ::SC_STATUS_LIST_Data >(Arena* arena) {
  return Arena::CreateInternal< ::SC_STATUS_LIST_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_STATUS_LIST* Arena::CreateMaybeMessage< ::SC_STATUS_LIST >(Arena* arena) {
  return Arena::CreateInternal< ::SC_STATUS_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_STATUS_INFO_Data* Arena::CreateMaybeMessage< ::SC_STATUS_INFO_Data >(Arena* arena) {
  return Arena::CreateInternal< ::SC_STATUS_INFO_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_STATUS_INFO* Arena::CreateMaybeMessage< ::SC_STATUS_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_STATUS_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_STATUS_ACTION* Arena::CreateMaybeMessage< ::SC_STATUS_ACTION >(Arena* arena) {
  return Arena::CreateInternal< ::SC_STATUS_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_MOVE* Arena::CreateMaybeMessage< ::CS_MOVE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_CHANGEMAP* Arena::CreateMaybeMessage< ::CS_CHANGEMAP >(Arena* arena) {
  return Arena::CreateInternal< ::CS_CHANGEMAP >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_CASTSKILL* Arena::CreateMaybeMessage< ::CS_CASTSKILL >(Arena* arena) {
  return Arena::CreateInternal< ::CS_CASTSKILL >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_CASTSKILL* Arena::CreateMaybeMessage< ::SC_CASTSKILL >(Arena* arena) {
  return Arena::CreateInternal< ::SC_CASTSKILL >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_SKILL_DAMAGE_DamageInfo* Arena::CreateMaybeMessage< ::SC_SKILL_DAMAGE_DamageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SC_SKILL_DAMAGE_DamageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_SKILL_DAMAGE* Arena::CreateMaybeMessage< ::SC_SKILL_DAMAGE >(Arena* arena) {
  return Arena::CreateInternal< ::SC_SKILL_DAMAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_SKILL_BREAK* Arena::CreateMaybeMessage< ::CS_SKILL_BREAK >(Arena* arena) {
  return Arena::CreateInternal< ::CS_SKILL_BREAK >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_SKILL_BREAK* Arena::CreateMaybeMessage< ::SC_SKILL_BREAK >(Arena* arena) {
  return Arena::CreateInternal< ::SC_SKILL_BREAK >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_SKILL_CHGTARGETPOS* Arena::CreateMaybeMessage< ::CS_SKILL_CHGTARGETPOS >(Arena* arena) {
  return Arena::CreateInternal< ::CS_SKILL_CHGTARGETPOS >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_SKILL_STUN* Arena::CreateMaybeMessage< ::SC_SKILL_STUN >(Arena* arena) {
  return Arena::CreateInternal< ::SC_SKILL_STUN >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_SKILL_EFFACT* Arena::CreateMaybeMessage< ::SC_SKILL_EFFACT >(Arena* arena) {
  return Arena::CreateInternal< ::SC_SKILL_EFFACT >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_DAMAGE* Arena::CreateMaybeMessage< ::SC_DAMAGE >(Arena* arena) {
  return Arena::CreateInternal< ::SC_DAMAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_DEAD* Arena::CreateMaybeMessage< ::SC_DEAD >(Arena* arena) {
  return Arena::CreateInternal< ::SC_DEAD >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_CHANGE_PKMODE* Arena::CreateMaybeMessage< ::CS_CHANGE_PKMODE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_CHANGE_PKMODE >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_CHANGE_PKMODE* Arena::CreateMaybeMessage< ::SC_CHANGE_PKMODE >(Arena* arena) {
  return Arena::CreateInternal< ::SC_CHANGE_PKMODE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_REBORN* Arena::CreateMaybeMessage< ::CS_REBORN >(Arena* arena) {
  return Arena::CreateInternal< ::CS_REBORN >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ITEM_INFO* Arena::CreateMaybeMessage< ::SC_ITEM_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ITEM_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ITEM_CHANGE_ChangeData* Arena::CreateMaybeMessage< ::SC_ITEM_CHANGE_ChangeData >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ITEM_CHANGE_ChangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ITEM_CHANGE* Arena::CreateMaybeMessage< ::SC_ITEM_CHANGE >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ITEM_CHANGE >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ITEM_DELETE* Arena::CreateMaybeMessage< ::SC_ITEM_DELETE >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ITEM_DELETE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ITEM_SWAP* Arena::CreateMaybeMessage< ::CS_ITEM_SWAP >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ITEM_SWAP >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ITEM_SPLIT* Arena::CreateMaybeMessage< ::CS_ITEM_SPLIT >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ITEM_SPLIT >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ITEM_COMBINE* Arena::CreateMaybeMessage< ::CS_ITEM_COMBINE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ITEM_COMBINE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ITEM_TIDY* Arena::CreateMaybeMessage< ::CS_ITEM_TIDY >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ITEM_TIDY >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ITEM_USE* Arena::CreateMaybeMessage< ::CS_ITEM_USE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ITEM_USE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ITEM_STORAGE_OPEN* Arena::CreateMaybeMessage< ::CS_ITEM_STORAGE_OPEN >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ITEM_STORAGE_OPEN >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ITEM_STORAGE_CHECKOUT* Arena::CreateMaybeMessage< ::CS_ITEM_STORAGE_CHECKOUT >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ITEM_STORAGE_CHECKOUT >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ITEM_STORAGE_CHECKIN* Arena::CreateMaybeMessage< ::CS_ITEM_STORAGE_CHECKIN >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ITEM_STORAGE_CHECKIN >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_EQUIP* Arena::CreateMaybeMessage< ::CS_EQUIP >(Arena* arena) {
  return Arena::CreateInternal< ::CS_EQUIP >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_UNEQUIP* Arena::CreateMaybeMessage< ::CS_UNEQUIP >(Arena* arena) {
  return Arena::CreateInternal< ::CS_UNEQUIP >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TALK* Arena::CreateMaybeMessage< ::CS_TALK >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TALK >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_TALK* Arena::CreateMaybeMessage< ::SC_TALK >(Arena* arena) {
  return Arena::CreateInternal< ::SC_TALK >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_TASK_INFO_Info* Arena::CreateMaybeMessage< ::SC_TASK_INFO_Info >(Arena* arena) {
  return Arena::CreateInternal< ::SC_TASK_INFO_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_TASK_INFO* Arena::CreateMaybeMessage< ::SC_TASK_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_TASK_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_TASK_DATA* Arena::CreateMaybeMessage< ::SC_TASK_DATA >(Arena* arena) {
  return Arena::CreateInternal< ::SC_TASK_DATA >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TASK_SUBMIT* Arena::CreateMaybeMessage< ::CS_TASK_SUBMIT >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TASK_SUBMIT >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ACTIVE_NPC* Arena::CreateMaybeMessage< ::CS_ACTIVE_NPC >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ACTIVE_NPC >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_DIALOG_dialog_link* Arena::CreateMaybeMessage< ::SC_DIALOG_dialog_link >(Arena* arena) {
  return Arena::CreateInternal< ::SC_DIALOG_dialog_link >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_DIALOG* Arena::CreateMaybeMessage< ::SC_DIALOG >(Arena* arena) {
  return Arena::CreateInternal< ::SC_DIALOG >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_DIALOG_CLICK* Arena::CreateMaybeMessage< ::CS_DIALOG_CLICK >(Arena* arena) {
  return Arena::CreateInternal< ::CS_DIALOG_CLICK >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ACHI_INFO_Info* Arena::CreateMaybeMessage< ::SC_ACHI_INFO_Info >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ACHI_INFO_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ACHI_INFO* Arena::CreateMaybeMessage< ::SC_ACHI_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ACHI_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_ACHI_TAKE* Arena::CreateMaybeMessage< ::CS_ACHI_TAKE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_ACHI_TAKE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TEAMCREATE* Arena::CreateMaybeMessage< ::CS_TEAMCREATE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TEAMCREATE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TEAMQUIT* Arena::CreateMaybeMessage< ::CS_TEAMQUIT >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TEAMQUIT >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TEAMKICKMEMBER* Arena::CreateMaybeMessage< ::CS_TEAMKICKMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TEAMKICKMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TEAMINVITEMEMBER* Arena::CreateMaybeMessage< ::CS_TEAMINVITEMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TEAMINVITEMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_TEAMINVITEMEMBER* Arena::CreateMaybeMessage< ::SC_TEAMINVITEMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::SC_TEAMINVITEMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TEAMACCEPTINVITE* Arena::CreateMaybeMessage< ::CS_TEAMACCEPTINVITE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TEAMACCEPTINVITE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TEAMNEWLEADER* Arena::CreateMaybeMessage< ::CS_TEAMNEWLEADER >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TEAMNEWLEADER >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_TEAMMEMBER_INFO* Arena::CreateMaybeMessage< ::SC_TEAMMEMBER_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_TEAMMEMBER_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_TEAMMEMBER_ACTION* Arena::CreateMaybeMessage< ::SC_TEAMMEMBER_ACTION >(Arena* arena) {
  return Arena::CreateInternal< ::SC_TEAMMEMBER_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TEAMAPPLYMEMBER* Arena::CreateMaybeMessage< ::CS_TEAMAPPLYMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TEAMAPPLYMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_TEAMAPPLYMEMBER* Arena::CreateMaybeMessage< ::SC_TEAMAPPLYMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::SC_TEAMAPPLYMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_TEAMACCEPTAPPLY* Arena::CreateMaybeMessage< ::CS_TEAMACCEPTAPPLY >(Arena* arena) {
  return Arena::CreateInternal< ::CS_TEAMACCEPTAPPLY >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_GUILDCREATE* Arena::CreateMaybeMessage< ::CS_GUILDCREATE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_GUILDCREATE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_GUILDQUIT* Arena::CreateMaybeMessage< ::CS_GUILDQUIT >(Arena* arena) {
  return Arena::CreateInternal< ::CS_GUILDQUIT >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_GUILDKICKMEMBER* Arena::CreateMaybeMessage< ::CS_GUILDKICKMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::CS_GUILDKICKMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_GUILDINVITEMEMBER* Arena::CreateMaybeMessage< ::CS_GUILDINVITEMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::CS_GUILDINVITEMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_GUILDINVITEMEMBER* Arena::CreateMaybeMessage< ::SC_GUILDINVITEMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::SC_GUILDINVITEMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_GUILDACCEPTINVITE* Arena::CreateMaybeMessage< ::CS_GUILDACCEPTINVITE >(Arena* arena) {
  return Arena::CreateInternal< ::CS_GUILDACCEPTINVITE >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_GUILDNEWLEADER* Arena::CreateMaybeMessage< ::CS_GUILDNEWLEADER >(Arena* arena) {
  return Arena::CreateInternal< ::CS_GUILDNEWLEADER >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_GUILDMEMBER_INFO* Arena::CreateMaybeMessage< ::SC_GUILDMEMBER_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_GUILDMEMBER_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_GUILDMEMBER_ACTION* Arena::CreateMaybeMessage< ::SC_GUILDMEMBER_ACTION >(Arena* arena) {
  return Arena::CreateInternal< ::SC_GUILDMEMBER_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_GUILDAPPLYMEMBER* Arena::CreateMaybeMessage< ::CS_GUILDAPPLYMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::CS_GUILDAPPLYMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_GUILDAPPLYMEMBER* Arena::CreateMaybeMessage< ::SC_GUILDAPPLYMEMBER >(Arena* arena) {
  return Arena::CreateInternal< ::SC_GUILDAPPLYMEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_GUILDACCEPTAPPLY* Arena::CreateMaybeMessage< ::CS_GUILDACCEPTAPPLY >(Arena* arena) {
  return Arena::CreateInternal< ::CS_GUILDACCEPTAPPLY >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
