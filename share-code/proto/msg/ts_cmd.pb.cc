// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/ts_cmd.proto

#include "msg/ts_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_2fts_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdOptions_msg_2fts_5fcmd_2eproto;
class CmdOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdOptions> _instance;
} _CmdOptions_default_instance_;
class SC_KEYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_KEY> _instance;
} _SC_KEY_default_instance_;
static void InitDefaultsscc_info_CmdOptions_msg_2fts_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CmdOptions_default_instance_;
    new (ptr) ::CmdOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CmdOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdOptions_msg_2fts_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmdOptions_msg_2fts_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_SC_KEY_msg_2fts_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_KEY_default_instance_;
    new (ptr) ::SC_KEY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_KEY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_KEY_msg_2fts_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_KEY_msg_2fts_5fcmd_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2fts_5fcmd_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2fts_5fcmd_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2fts_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_2fts_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CmdOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CmdOptions, ts_cmd_),
  PROTOBUF_FIELD_OFFSET(::CmdOptions, cs_cmd_),
  PROTOBUF_FIELD_OFFSET(::CmdOptions, sc_cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_KEY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_KEY, key_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CmdOptions)},
  { 8, -1, sizeof(::SC_KEY)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CmdOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_KEY_default_instance_),
};

const char descriptor_table_protodef_msg_2fts_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020msg/ts_cmd.proto\032 google/protobuf/desc"
  "riptor.proto\"W\n\nCmdOptions\022\027\n\006ts_cmd\030\001 \001"
  "(\0162\007.TS_CMD\022\027\n\006cs_cmd\030\002 \001(\0162\007.CS_CMD\022\027\n\006"
  "sc_cmd\030\003 \001(\0162\007.SC_CMD\"\034\n\006SC_KEY\022\013\n\003key\030\001"
  " \001(\r:\005\232\?\002\010\001*\266\001\n\006TS_CMD\022\r\n\tCMD_BEGIN\020\000\022\016\n"
  "\nCMD_SC_KEY\020\001\022\014\n\010CMD_PING\020\002\022\014\n\010CMD_PONG\020"
  "\003\022\023\n\017CMD_WORLD_BEGIN\020\n\022\022\n\rCMD_WORLD_END\020"
  "\347\007\022\023\n\016CMD_ZONE_BEGIN\020\350\007\022\021\n\014CMD_ZONE_END\020"
  "\237\037\022\022\n\rCMD_INTERRUPT\020\217N\022\014\n\007CMD_MAX\020\220N*\321\010\n"
  "\006CS_CMD\022\017\n\013CS_CMD_NONE\020\000\022\020\n\014CMD_CS_LOGIN"
  "\020\n\022\026\n\022CMD_CS_CREATEACTOR\020\013\022\026\n\022CMD_CS_SEL"
  "ECTACTOR\020\014\022\030\n\023CMD_CS_LOADMAP_SUCC\020\351\007\022\020\n\013"
  "CMD_CS_MOVE\020\352\007\022\025\n\020CMD_CS_CHANGEMAP\020\353\007\022\025\n"
  "\020CMD_CS_CASTSKILL\020\354\007\022\027\n\022CMD_CS_SKILL_BRE"
  "AK\020\355\007\022\036\n\031CMD_CS_SKILL_CHGTARGETPOS\020\356\007\022\031\n"
  "\024CMD_CS_CHANGE_PKMODE\020\357\007\022\022\n\rCMD_CS_REBOR"
  "N\020\360\007\022\025\n\020CMD_CS_ITEM_SWAP\020\374\007\022\026\n\021CMD_CS_IT"
  "EM_SPLIT\020\375\007\022\030\n\023CMD_CS_ITEM_COMBINE\020\376\007\022\025\n"
  "\020CMD_CS_ITEM_TIDY\020\377\007\022\024\n\017CMD_CS_ITEM_USE\020"
  "\200\010\022\035\n\030CMD_CS_ITEM_STORAGE_OPEN\020\201\010\022 \n\033CMD"
  "_CS_ITEM_STORAGE_CHECKIN\020\202\010\022!\n\034CMD_CS_IT"
  "EM_STORAGE_CHECKOUT\020\203\010\022\021\n\014CMD_CS_EQUIP\020\206"
  "\010\022\023\n\016CMD_CS_UNEQUIP\020\207\010\022\020\n\013CMD_CS_TALK\020\220\010"
  "\022\027\n\022CMD_CS_TASK_SUBMIT\020\221\010\022\026\n\021CMD_CS_ACTI"
  "VE_NPC\020\222\010\022\030\n\023CMD_CS_DIALOG_CLICK\020\223\010\022\025\n\020C"
  "MD_CS_ACHI_TAKE\020\224\010\022\026\n\021CMD_CS_TEAMCREATE\020"
  "\232\010\022\024\n\017CMD_CS_TEAMQUIT\020\233\010\022\032\n\025CMD_CS_TEAMK"
  "ICKMEMBER\020\234\010\022\034\n\027CMD_CS_TEAMINVITEMEMBER\020"
  "\235\010\022\034\n\027CMD_CS_TEAMACCEPTINVITE\020\236\010\022\031\n\024CMD_"
  "CS_TEAMNEWLEADER\020\237\010\022\033\n\026CMD_CS_TEAMAPPLYM"
  "EMBER\020\240\010\022\033\n\026CMD_CS_TEAMACCEPTAPPLY\020\241\010\022\027\n"
  "\022CMD_CS_GUILDCREATE\020\256\010\022\025\n\020CMD_CS_GUILDQU"
  "IT\020\257\010\022\033\n\026CMD_CS_GUILDKICKMEMBER\020\260\010\022\035\n\030CM"
  "D_CS_GUILDINVITEMEMBER\020\261\010\022\035\n\030CMD_CS_GUIL"
  "DACCEPTINVITE\020\262\010\022\032\n\025CMD_CS_GUILDNEWLEADE"
  "R\020\263\010\022\034\n\027CMD_CS_GUILDAPPLYMEMBER\020\264\010\022\034\n\027CM"
  "D_CS_GUILDACCEPTAPPLY\020\265\010*\343\010\n\006SC_CMD\022\017\n\013S"
  "C_CMD_NONE\020\000\022\020\n\014CMD_SC_LOGIN\020\n\022\030\n\024CMD_SC"
  "_ACTORINFOLIST\020\013\022\023\n\017CMD_SC_WAITINFO\020\014\022\026\n"
  "\022CMD_SC_CREATEACTOR\020\r\022\026\n\022CMD_SC_SELECTAC"
  "TOR\020\016\022\023\n\016CMD_SC_LOADMAP\020\351\007\022\024\n\017CMD_SC_ENT"
  "ERMAP\020\352\007\022\026\n\021CMD_SC_PLAYERINFO\020\353\007\022\027\n\022CMD_"
  "SC_ACTORATTRIB\020\354\007\022\026\n\021CMD_SC_COMMONDATA\020\355"
  "\007\022\025\n\020CMD_SC_DATACOUNT\020\356\007\022\022\n\rCMD_SC_SYSVA"
  "R\020\357\007\022\024\n\017CMD_SC_COOLDOWN\020\360\007\022\022\n\rCMD_SC_MAP"
  "VAL\020\361\007\022\023\n\016CMD_SC_AOI_NEW\020\374\007\022\026\n\021CMD_SC_AO"
  "I_REMOVE\020\375\007\022\026\n\021CMD_SC_AOI_UPDATE\020\376\007\022\025\n\020C"
  "MD_SC_CASTSKILL\020\207\010\022\027\n\022CMD_SC_SKILL_BREAK"
  "\020\210\010\022\030\n\023CMD_SC_SKILL_DAMAGE\020\211\010\022\026\n\021CMD_SC_"
  "SKILL_STUN\020\212\010\022\030\n\023CMD_SC_SKILL_EFFACT\020\213\010\022"
  "\022\n\rCMD_SC_DAMAGE\020\214\010\022\020\n\013CMD_SC_DEAD\020\215\010\022\031\n"
  "\024CMD_SC_ATTRIB_CHANGE\020\216\010\022\031\n\024CMD_SC_CHANG"
  "E_PKMODE\020\220\010\022\027\n\022CMD_SC_STATUS_LIST\020\221\010\022\027\n\022"
  "CMD_SC_STATUS_INFO\020\223\010\022\031\n\024CMD_SC_STATUS_A"
  "CTION\020\224\010\022\027\n\022CMD_SC_ITEM_DELETE\020\232\010\022\025\n\020CMD"
  "_SC_ITEM_INFO\020\233\010\022\027\n\022CMD_SC_ITEM_CHANGE\020\234"
  "\010\022\020\n\013CMD_SC_TALK\020\235\010\022\025\n\020CMD_SC_TASK_INFO\020"
  "\244\010\022\025\n\020CMD_SC_TASK_DATA\020\245\010\022\022\n\rCMD_SC_DIAL"
  "OG\020\246\010\022\025\n\020CMD_SC_ACHI_INFO\020\247\010\022\033\n\026CMD_SC_T"
  "EAMMEMBER_INFO\020\256\010\022\035\n\030CMD_SC_TEAMMEMBER_A"
  "CTION\020\257\010\022\034\n\027CMD_SC_TEAMINVITEMEMBER\020\260\010\022\033"
  "\n\026CMD_SC_TEAMAPPLYMEMBER\020\261\010\022\035\n\030CMD_SC_GU"
  "ILDINVITEMEMBER\020\270\010\022\034\n\027CMD_SC_GUILDMEMBER"
  "_INFO\020\271\010\022\036\n\031CMD_SC_GUILDMEMBER_ACTION\020\272\010"
  "\022\034\n\027CMD_SC_GUILDAPPLYMEMBER\020\273\010::\n\003cmd\022\037."
  "google.protobuf.MessageOptions\030\363\007 \001(\0132\013."
  "CmdOptionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_2fts_5fcmd_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_2fts_5fcmd_2eproto_sccs[2] = {
  &scc_info_CmdOptions_msg_2fts_5fcmd_2eproto.base,
  &scc_info_SC_KEY_msg_2fts_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2fts_5fcmd_2eproto_once;
static bool descriptor_table_msg_2fts_5fcmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2fts_5fcmd_2eproto = {
  &descriptor_table_msg_2fts_5fcmd_2eproto_initialized, descriptor_table_protodef_msg_2fts_5fcmd_2eproto, "msg/ts_cmd.proto", 2658,
  &descriptor_table_msg_2fts_5fcmd_2eproto_once, descriptor_table_msg_2fts_5fcmd_2eproto_sccs, descriptor_table_msg_2fts_5fcmd_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_msg_2fts_5fcmd_2eproto::offsets,
  file_level_metadata_msg_2fts_5fcmd_2eproto, 2, file_level_enum_descriptors_msg_2fts_5fcmd_2eproto, file_level_service_descriptors_msg_2fts_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_2fts_5fcmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_2fts_5fcmd_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TS_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fts_5fcmd_2eproto);
  return file_level_enum_descriptors_msg_2fts_5fcmd_2eproto[0];
}
bool TS_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 999:
    case 1000:
    case 3999:
    case 9999:
    case 10000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CS_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fts_5fcmd_2eproto);
  return file_level_enum_descriptors_msg_2fts_5fcmd_2eproto[1];
}
bool CS_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1030:
    case 1031:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fts_5fcmd_2eproto);
  return file_level_enum_descriptors_msg_2fts_5fcmd_2eproto[2];
}
bool SC_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1020:
    case 1021:
    case 1022:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1040:
    case 1041:
    case 1043:
    case 1044:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CmdOptions::InitAsDefaultInstance() {
}
class CmdOptions::_Internal {
 public:
};

CmdOptions::CmdOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CmdOptions)
}
CmdOptions::CmdOptions(const CmdOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ts_cmd_, &from.ts_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&sc_cmd_) -
    reinterpret_cast<char*>(&ts_cmd_)) + sizeof(sc_cmd_));
  // @@protoc_insertion_point(copy_constructor:CmdOptions)
}

void CmdOptions::SharedCtor() {
  ::memset(&ts_cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_cmd_) -
      reinterpret_cast<char*>(&ts_cmd_)) + sizeof(sc_cmd_));
}

CmdOptions::~CmdOptions() {
  // @@protoc_insertion_point(destructor:CmdOptions)
  SharedDtor();
}

void CmdOptions::SharedDtor() {
}

void CmdOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdOptions& CmdOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdOptions_msg_2fts_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void CmdOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:CmdOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ts_cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_cmd_) -
      reinterpret_cast<char*>(&ts_cmd_)) + sizeof(sc_cmd_));
  _internal_metadata_.Clear();
}

const char* CmdOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TS_CMD ts_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ts_cmd(static_cast<::TS_CMD>(val));
        } else goto handle_unusual;
        continue;
      // .CS_CMD cs_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_cs_cmd(static_cast<::CS_CMD>(val));
        } else goto handle_unusual;
        continue;
      // .SC_CMD sc_cmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_sc_cmd(static_cast<::SC_CMD>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CmdOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TS_CMD ts_cmd = 1;
  if (this->ts_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_cmd(), target);
  }

  // .CS_CMD cs_cmd = 2;
  if (this->cs_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cs_cmd(), target);
  }

  // .SC_CMD sc_cmd = 3;
  if (this->sc_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_sc_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CmdOptions)
  return target;
}

size_t CmdOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CmdOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TS_CMD ts_cmd = 1;
  if (this->ts_cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_cmd());
  }

  // .CS_CMD cs_cmd = 2;
  if (this->cs_cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cs_cmd());
  }

  // .SC_CMD sc_cmd = 3;
  if (this->sc_cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sc_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CmdOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CmdOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CmdOptions)
    MergeFrom(*source);
  }
}

void CmdOptions::MergeFrom(const CmdOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CmdOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ts_cmd() != 0) {
    _internal_set_ts_cmd(from._internal_ts_cmd());
  }
  if (from.cs_cmd() != 0) {
    _internal_set_cs_cmd(from._internal_cs_cmd());
  }
  if (from.sc_cmd() != 0) {
    _internal_set_sc_cmd(from._internal_sc_cmd());
  }
}

void CmdOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CmdOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdOptions::CopyFrom(const CmdOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CmdOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdOptions::IsInitialized() const {
  return true;
}

void CmdOptions::InternalSwap(CmdOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ts_cmd_, other->ts_cmd_);
  swap(cs_cmd_, other->cs_cmd_);
  swap(sc_cmd_, other->sc_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_KEY::InitAsDefaultInstance() {
}
class SC_KEY::_Internal {
 public:
};

SC_KEY::SC_KEY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_KEY)
}
SC_KEY::SC_KEY(const SC_KEY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:SC_KEY)
}

void SC_KEY::SharedCtor() {
  key_ = 0u;
}

SC_KEY::~SC_KEY() {
  // @@protoc_insertion_point(destructor:SC_KEY)
  SharedDtor();
}

void SC_KEY::SharedDtor() {
}

void SC_KEY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_KEY& SC_KEY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_KEY_msg_2fts_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void SC_KEY::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_KEY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_ = 0u;
  _internal_metadata_.Clear();
}

const char* SC_KEY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_KEY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_KEY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_KEY)
  return target;
}

size_t SC_KEY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_KEY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_KEY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_KEY)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_KEY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_KEY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_KEY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_KEY)
    MergeFrom(*source);
  }
}

void SC_KEY::MergeFrom(const SC_KEY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_KEY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void SC_KEY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_KEY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_KEY::CopyFrom(const SC_KEY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_KEY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_KEY::IsInitialized() const {
  return true;
}

void SC_KEY::InternalSwap(SC_KEY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_KEY::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::CmdOptions >, 11, false >
  cmd(kCmdFieldNumber, *::CmdOptions::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CmdOptions* Arena::CreateMaybeMessage< ::CmdOptions >(Arena* arena) {
  return Arena::CreateInternal< ::CmdOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_KEY* Arena::CreateMaybeMessage< ::SC_KEY >(Arena* arena) {
  return Arena::CreateInternal< ::SC_KEY >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
