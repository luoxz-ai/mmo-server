// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/world_service.proto

#include "msg/world_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_2fworld_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ACTORINFOLIST_SC_ACTOR_INFO_msg_2fworld_5fservice_2eproto;
class CS_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_LOGIN> _instance;
} _CS_LOGIN_default_instance_;
class SC_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_LOGIN> _instance;
} _SC_LOGIN_default_instance_;
class SC_WAITINFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_WAITINFO> _instance;
} _SC_WAITINFO_default_instance_;
class SC_ACTORINFOLIST_SC_ACTOR_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ACTORINFOLIST_SC_ACTOR_INFO> _instance;
} _SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_;
class SC_ACTORINFOLISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ACTORINFOLIST> _instance;
} _SC_ACTORINFOLIST_default_instance_;
class CS_CREATEACTORDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_CREATEACTOR> _instance;
} _CS_CREATEACTOR_default_instance_;
class SC_CREATEACTORDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_CREATEACTOR> _instance;
} _SC_CREATEACTOR_default_instance_;
class CS_SELECTACTORDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_SELECTACTOR> _instance;
} _CS_SELECTACTOR_default_instance_;
class SC_SELECTACTORDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SELECTACTOR> _instance;
} _SC_SELECTACTOR_default_instance_;
static void InitDefaultsscc_info_CS_CREATEACTOR_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_CREATEACTOR_default_instance_;
    new (ptr) ::CS_CREATEACTOR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_CREATEACTOR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_CREATEACTOR_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_CREATEACTOR_msg_2fworld_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_LOGIN_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_LOGIN_default_instance_;
    new (ptr) ::CS_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_LOGIN_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_LOGIN_msg_2fworld_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CS_SELECTACTOR_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CS_SELECTACTOR_default_instance_;
    new (ptr) ::CS_SELECTACTOR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CS_SELECTACTOR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_SELECTACTOR_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_SELECTACTOR_msg_2fworld_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_ACTORINFOLIST_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ACTORINFOLIST_default_instance_;
    new (ptr) ::SC_ACTORINFOLIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ACTORINFOLIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_ACTORINFOLIST_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_ACTORINFOLIST_msg_2fworld_5fservice_2eproto}, {
      &scc_info_SC_ACTORINFOLIST_SC_ACTOR_INFO_msg_2fworld_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SC_ACTORINFOLIST_SC_ACTOR_INFO_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_;
    new (ptr) ::SC_ACTORINFOLIST_SC_ACTOR_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_ACTORINFOLIST_SC_ACTOR_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ACTORINFOLIST_SC_ACTOR_INFO_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ACTORINFOLIST_SC_ACTOR_INFO_msg_2fworld_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_CREATEACTOR_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_CREATEACTOR_default_instance_;
    new (ptr) ::SC_CREATEACTOR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_CREATEACTOR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_CREATEACTOR_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_CREATEACTOR_msg_2fworld_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_LOGIN_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_LOGIN_default_instance_;
    new (ptr) ::SC_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_LOGIN_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_LOGIN_msg_2fworld_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_SELECTACTOR_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_SELECTACTOR_default_instance_;
    new (ptr) ::SC_SELECTACTOR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_SELECTACTOR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SELECTACTOR_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SELECTACTOR_msg_2fworld_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SC_WAITINFO_msg_2fworld_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SC_WAITINFO_default_instance_;
    new (ptr) ::SC_WAITINFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC_WAITINFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_WAITINFO_msg_2fworld_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_WAITINFO_msg_2fworld_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2fworld_5fservice_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2fworld_5fservice_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2fworld_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_2fworld_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_LOGIN, openid_),
  PROTOBUF_FIELD_OFFSET(::CS_LOGIN, auth_),
  PROTOBUF_FIELD_OFFSET(::CS_LOGIN, last_succ_key_),
  PROTOBUF_FIELD_OFFSET(::CS_LOGIN, prog_ver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_LOGIN, result_code_),
  PROTOBUF_FIELD_OFFSET(::SC_LOGIN, detail_),
  PROTOBUF_FIELD_OFFSET(::SC_LOGIN, last_succ_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_WAITINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ACTORINFOLIST_SC_ACTOR_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ACTORINFOLIST_SC_ACTOR_INFO, name_),
  PROTOBUF_FIELD_OFFSET(::SC_ACTORINFOLIST_SC_ACTOR_INFO, prof_),
  PROTOBUF_FIELD_OFFSET(::SC_ACTORINFOLIST_SC_ACTOR_INFO, baselook_),
  PROTOBUF_FIELD_OFFSET(::SC_ACTORINFOLIST_SC_ACTOR_INFO, lev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_ACTORINFOLIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_ACTORINFOLIST, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_CREATEACTOR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_CREATEACTOR, name_),
  PROTOBUF_FIELD_OFFSET(::CS_CREATEACTOR, prof_),
  PROTOBUF_FIELD_OFFSET(::CS_CREATEACTOR, baselook_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_CREATEACTOR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_CREATEACTOR, result_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS_SELECTACTOR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CS_SELECTACTOR, actor_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC_SELECTACTOR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SC_SELECTACTOR, result_code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CS_LOGIN)},
  { 9, -1, sizeof(::SC_LOGIN)},
  { 17, -1, sizeof(::SC_WAITINFO)},
  { 22, -1, sizeof(::SC_ACTORINFOLIST_SC_ACTOR_INFO)},
  { 31, -1, sizeof(::SC_ACTORINFOLIST)},
  { 37, -1, sizeof(::CS_CREATEACTOR)},
  { 45, -1, sizeof(::SC_CREATEACTOR)},
  { 51, -1, sizeof(::CS_SELECTACTOR)},
  { 57, -1, sizeof(::SC_SELECTACTOR)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_WAITINFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ACTORINFOLIST_SC_ACTOR_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_ACTORINFOLIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_CREATEACTOR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_CREATEACTOR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CS_SELECTACTOR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SC_SELECTACTOR_default_instance_),
};

const char descriptor_table_protodef_msg_2fworld_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027msg/world_service.proto\032\020msg/ts_cmd.pr"
  "oto\032\023common/Common.proto\"X\n\010CS_LOGIN\022\016\n\006"
  "openid\030\001 \001(\t\022\014\n\004auth\030\002 \001(\t\022\025\n\rlast_succ_"
  "key\030\003 \001(\t\022\020\n\010prog_ver\030\004 \001(\t:\005\222\?\002\020\n\"\275\001\n\010S"
  "C_LOGIN\022(\n\013result_code\030\001 \001(\0162\023.SC_LOGIN."
  "ErrorCode\022\016\n\006detail\030\002 \001(\t\022\025\n\rlast_succ_k"
  "ey\030\003 \001(\t\"Y\n\tErrorCode\022\013\n\007EC_SUCC\020\000\022\017\n\013EC"
  "_PROG_VER\020\001\022\017\n\013EC_LAST_KEY\020\002\022\013\n\007EC_AUTH\020"
  "\003\022\020\n\014EC_WAIT_AUTH\020\004:\005\222\?\002\030\n\"\024\n\013SC_WAITINF"
  "O:\005\222\?\002\030\014\"\224\001\n\020SC_ACTORINFOLIST\022-\n\004list\030\001 "
  "\003(\0132\037.SC_ACTORINFOLIST.SC_ACTOR_INFO\032J\n\r"
  "SC_ACTOR_INFO\022\014\n\004name\030\001 \001(\t\022\014\n\004prof\030\002 \001("
  "\r\022\020\n\010baselook\030\003 \001(\r\022\013\n\003lev\030\004 \001(\r:\005\222\?\002\030\013\""
  "E\n\016CS_CREATEACTOR\022\014\n\004name\030\001 \001(\t\022\014\n\004prof\030"
  "\002 \001(\r\022\020\n\010baselook\030\003 \001(\r:\005\222\?\002\020\013\"\307\001\n\016SC_CR"
  "EATEACTOR\022.\n\013result_code\030\001 \001(\0162\031.SC_CREA"
  "TEACTOR.ErrorCode\"~\n\tErrorCode\022\013\n\007EC_SUC"
  "C\020\000\022\020\n\014EC_SAME_NAME\020\001\022\024\n\020EC_NAME_TOO_LON"
  "G\020\002\022\025\n\021EC_NAME_TOO_SHORT\020\003\022\023\n\017EC_NAME_IL"
  "LEGAL\020\004\022\020\n\014EC_MAX_ACTOR\020\005:\005\222\?\002\030\r\"*\n\016CS_S"
  "ELECTACTOR\022\021\n\tactor_idx\030\001 \001(\r:\005\222\?\002\020\014\"a\n\016"
  "SC_SELECTACTOR\022.\n\013result_code\030\001 \001(\0162\031.SC"
  "_SELECTACTOR.ErrorCode\"\030\n\tErrorCode\022\013\n\007E"
  "C_SUCC\020\000:\005\222\?\002\030\016b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_2fworld_5fservice_2eproto_deps[2] = {
  &::descriptor_table_common_2fCommon_2eproto,
  &::descriptor_table_msg_2fts_5fcmd_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_2fworld_5fservice_2eproto_sccs[9] = {
  &scc_info_CS_CREATEACTOR_msg_2fworld_5fservice_2eproto.base,
  &scc_info_CS_LOGIN_msg_2fworld_5fservice_2eproto.base,
  &scc_info_CS_SELECTACTOR_msg_2fworld_5fservice_2eproto.base,
  &scc_info_SC_ACTORINFOLIST_msg_2fworld_5fservice_2eproto.base,
  &scc_info_SC_ACTORINFOLIST_SC_ACTOR_INFO_msg_2fworld_5fservice_2eproto.base,
  &scc_info_SC_CREATEACTOR_msg_2fworld_5fservice_2eproto.base,
  &scc_info_SC_LOGIN_msg_2fworld_5fservice_2eproto.base,
  &scc_info_SC_SELECTACTOR_msg_2fworld_5fservice_2eproto.base,
  &scc_info_SC_WAITINFO_msg_2fworld_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2fworld_5fservice_2eproto_once;
static bool descriptor_table_msg_2fworld_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2fworld_5fservice_2eproto = {
  &descriptor_table_msg_2fworld_5fservice_2eproto_initialized, descriptor_table_protodef_msg_2fworld_5fservice_2eproto, "msg/world_service.proto", 943,
  &descriptor_table_msg_2fworld_5fservice_2eproto_once, descriptor_table_msg_2fworld_5fservice_2eproto_sccs, descriptor_table_msg_2fworld_5fservice_2eproto_deps, 9, 2,
  schemas, file_default_instances, TableStruct_msg_2fworld_5fservice_2eproto::offsets,
  file_level_metadata_msg_2fworld_5fservice_2eproto, 9, file_level_enum_descriptors_msg_2fworld_5fservice_2eproto, file_level_service_descriptors_msg_2fworld_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_2fworld_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_2fworld_5fservice_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_LOGIN_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fworld_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fworld_5fservice_2eproto[0];
}
bool SC_LOGIN_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SC_LOGIN_ErrorCode SC_LOGIN::EC_SUCC;
constexpr SC_LOGIN_ErrorCode SC_LOGIN::EC_PROG_VER;
constexpr SC_LOGIN_ErrorCode SC_LOGIN::EC_LAST_KEY;
constexpr SC_LOGIN_ErrorCode SC_LOGIN::EC_AUTH;
constexpr SC_LOGIN_ErrorCode SC_LOGIN::EC_WAIT_AUTH;
constexpr SC_LOGIN_ErrorCode SC_LOGIN::ErrorCode_MIN;
constexpr SC_LOGIN_ErrorCode SC_LOGIN::ErrorCode_MAX;
constexpr int SC_LOGIN::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_CREATEACTOR_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fworld_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fworld_5fservice_2eproto[1];
}
bool SC_CREATEACTOR_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_SUCC;
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_SAME_NAME;
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_NAME_TOO_LONG;
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_NAME_TOO_SHORT;
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_NAME_ILLEGAL;
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::EC_MAX_ACTOR;
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::ErrorCode_MIN;
constexpr SC_CREATEACTOR_ErrorCode SC_CREATEACTOR::ErrorCode_MAX;
constexpr int SC_CREATEACTOR::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SC_SELECTACTOR_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fworld_5fservice_2eproto);
  return file_level_enum_descriptors_msg_2fworld_5fservice_2eproto[2];
}
bool SC_SELECTACTOR_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::EC_SUCC;
constexpr SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::ErrorCode_MIN;
constexpr SC_SELECTACTOR_ErrorCode SC_SELECTACTOR::ErrorCode_MAX;
constexpr int SC_SELECTACTOR::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CS_LOGIN::InitAsDefaultInstance() {
}
class CS_LOGIN::_Internal {
 public:
};

CS_LOGIN::CS_LOGIN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LOGIN)
}
CS_LOGIN::CS_LOGIN(const CS_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openid().empty()) {
    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth().empty()) {
    auth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  last_succ_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_succ_key().empty()) {
    last_succ_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_succ_key_);
  }
  prog_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prog_ver().empty()) {
    prog_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prog_ver_);
  }
  // @@protoc_insertion_point(copy_constructor:CS_LOGIN)
}

void CS_LOGIN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CS_LOGIN_msg_2fworld_5fservice_2eproto.base);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prog_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CS_LOGIN::~CS_LOGIN() {
  // @@protoc_insertion_point(destructor:CS_LOGIN)
  SharedDtor();
}

void CS_LOGIN::SharedDtor() {
  openid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prog_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CS_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_LOGIN& CS_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_LOGIN_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prog_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CS_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string openid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_openid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CS_LOGIN.openid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_auth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CS_LOGIN.auth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_succ_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_succ_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CS_LOGIN.last_succ_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prog_ver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prog_ver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CS_LOGIN.prog_ver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string openid = 1;
  if (this->openid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.openid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_openid(), target);
  }

  // string auth = 2;
  if (this->auth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth().data(), static_cast<int>(this->_internal_auth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.auth");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_auth(), target);
  }

  // string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_succ_key().data(), static_cast<int>(this->_internal_last_succ_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.last_succ_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_succ_key(), target);
  }

  // string prog_ver = 4;
  if (this->prog_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prog_ver().data(), static_cast<int>(this->_internal_prog_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CS_LOGIN.prog_ver");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prog_ver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LOGIN)
  return target;
}

size_t CS_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openid = 1;
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // string auth = 2;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth());
  }

  // string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_succ_key());
  }

  // string prog_ver = 4;
  if (this->prog_ver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prog_ver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LOGIN)
    MergeFrom(*source);
  }
}

void CS_LOGIN::MergeFrom(const CS_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.auth().size() > 0) {

    auth_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  if (from.last_succ_key().size() > 0) {

    last_succ_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_succ_key_);
  }
  if (from.prog_ver().size() > 0) {

    prog_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prog_ver_);
  }
}

void CS_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LOGIN::CopyFrom(const CS_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LOGIN::IsInitialized() const {
  return true;
}

void CS_LOGIN::InternalSwap(CS_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  openid_.Swap(&other->openid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_.Swap(&other->auth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_succ_key_.Swap(&other->last_succ_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prog_ver_.Swap(&other->prog_ver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_LOGIN::InitAsDefaultInstance() {
}
class SC_LOGIN::_Internal {
 public:
};

SC_LOGIN::SC_LOGIN()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LOGIN)
}
SC_LOGIN::SC_LOGIN(const SC_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  last_succ_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_succ_key().empty()) {
    last_succ_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_succ_key_);
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:SC_LOGIN)
}

void SC_LOGIN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_LOGIN_msg_2fworld_5fservice_2eproto.base);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0;
}

SC_LOGIN::~SC_LOGIN() {
  // @@protoc_insertion_point(destructor:SC_LOGIN)
  SharedDtor();
}

void SC_LOGIN::SharedDtor() {
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_LOGIN& SC_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_LOGIN_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_succ_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0;
  _internal_metadata_.Clear();
}

const char* SC_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SC_LOGIN.ErrorCode result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::SC_LOGIN_ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_LOGIN.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_succ_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_succ_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_LOGIN.last_succ_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SC_LOGIN.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result_code(), target);
  }

  // string detail = 2;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_LOGIN.detail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail(), target);
  }

  // string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_succ_key().data(), static_cast<int>(this->_internal_last_succ_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_LOGIN.last_succ_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_succ_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_LOGIN)
  return target;
}

size_t SC_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 2;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // string last_succ_key = 3;
  if (this->last_succ_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_succ_key());
  }

  // .SC_LOGIN.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LOGIN)
    MergeFrom(*source);
  }
}

void SC_LOGIN::MergeFrom(const SC_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.last_succ_key().size() > 0) {

    last_succ_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_succ_key_);
  }
  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void SC_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LOGIN::CopyFrom(const SC_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LOGIN::IsInitialized() const {
  return true;
}

void SC_LOGIN::InternalSwap(SC_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_succ_key_.Swap(&other->last_succ_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_code_, other->result_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_WAITINFO::InitAsDefaultInstance() {
}
class SC_WAITINFO::_Internal {
 public:
};

SC_WAITINFO::SC_WAITINFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_WAITINFO)
}
SC_WAITINFO::SC_WAITINFO(const SC_WAITINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_WAITINFO)
}

void SC_WAITINFO::SharedCtor() {
}

SC_WAITINFO::~SC_WAITINFO() {
  // @@protoc_insertion_point(destructor:SC_WAITINFO)
  SharedDtor();
}

void SC_WAITINFO::SharedDtor() {
}

void SC_WAITINFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_WAITINFO& SC_WAITINFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_WAITINFO_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_WAITINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_WAITINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SC_WAITINFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_WAITINFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_WAITINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_WAITINFO)
  return target;
}

size_t SC_WAITINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_WAITINFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_WAITINFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_WAITINFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_WAITINFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_WAITINFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_WAITINFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_WAITINFO)
    MergeFrom(*source);
  }
}

void SC_WAITINFO::MergeFrom(const SC_WAITINFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_WAITINFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SC_WAITINFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_WAITINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_WAITINFO::CopyFrom(const SC_WAITINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_WAITINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_WAITINFO::IsInitialized() const {
  return true;
}

void SC_WAITINFO::InternalSwap(SC_WAITINFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_WAITINFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ACTORINFOLIST_SC_ACTOR_INFO::InitAsDefaultInstance() {
}
class SC_ACTORINFOLIST_SC_ACTOR_INFO::_Internal {
 public:
};

SC_ACTORINFOLIST_SC_ACTOR_INFO::SC_ACTORINFOLIST_SC_ACTOR_INFO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACTORINFOLIST.SC_ACTOR_INFO)
}
SC_ACTORINFOLIST_SC_ACTOR_INFO::SC_ACTORINFOLIST_SC_ACTOR_INFO(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&prof_, &from.prof_,
    static_cast<size_t>(reinterpret_cast<char*>(&lev_) -
    reinterpret_cast<char*>(&prof_)) + sizeof(lev_));
  // @@protoc_insertion_point(copy_constructor:SC_ACTORINFOLIST.SC_ACTOR_INFO)
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_ACTORINFOLIST_SC_ACTOR_INFO_msg_2fworld_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lev_) -
      reinterpret_cast<char*>(&prof_)) + sizeof(lev_));
}

SC_ACTORINFOLIST_SC_ACTOR_INFO::~SC_ACTORINFOLIST_SC_ACTOR_INFO() {
  // @@protoc_insertion_point(destructor:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  SharedDtor();
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ACTORINFOLIST_SC_ACTOR_INFO& SC_ACTORINFOLIST_SC_ACTOR_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ACTORINFOLIST_SC_ACTOR_INFO_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ACTORINFOLIST_SC_ACTOR_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lev_) -
      reinterpret_cast<char*>(&prof_)) + sizeof(lev_));
  _internal_metadata_.Clear();
}

const char* SC_ACTORINFOLIST_SC_ACTOR_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SC_ACTORINFOLIST.SC_ACTOR_INFO.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 baselook = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          baselook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ACTORINFOLIST_SC_ACTOR_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SC_ACTORINFOLIST.SC_ACTOR_INFO.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 prof = 2;
  if (this->prof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prof(), target);
  }

  // uint32 baselook = 3;
  if (this->baselook() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_baselook(), target);
  }

  // uint32 lev = 4;
  if (this->lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  return target;
}

size_t SC_ACTORINFOLIST_SC_ACTOR_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 prof = 2;
  if (this->prof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prof());
  }

  // uint32 baselook = 3;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baselook());
  }

  // uint32 lev = 4;
  if (this->lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lev());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ACTORINFOLIST_SC_ACTOR_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ACTORINFOLIST_SC_ACTOR_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACTORINFOLIST.SC_ACTOR_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACTORINFOLIST.SC_ACTOR_INFO)
    MergeFrom(*source);
  }
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::MergeFrom(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.prof() != 0) {
    _internal_set_prof(from._internal_prof());
  }
  if (from.baselook() != 0) {
    _internal_set_baselook(from._internal_baselook());
  }
  if (from.lev() != 0) {
    _internal_set_lev(from._internal_lev());
  }
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::CopyFrom(const SC_ACTORINFOLIST_SC_ACTOR_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACTORINFOLIST.SC_ACTOR_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ACTORINFOLIST_SC_ACTOR_INFO::IsInitialized() const {
  return true;
}

void SC_ACTORINFOLIST_SC_ACTOR_INFO::InternalSwap(SC_ACTORINFOLIST_SC_ACTOR_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prof_, other->prof_);
  swap(baselook_, other->baselook_);
  swap(lev_, other->lev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ACTORINFOLIST_SC_ACTOR_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ACTORINFOLIST::InitAsDefaultInstance() {
}
class SC_ACTORINFOLIST::_Internal {
 public:
};

SC_ACTORINFOLIST::SC_ACTORINFOLIST()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_ACTORINFOLIST)
}
SC_ACTORINFOLIST::SC_ACTORINFOLIST(const SC_ACTORINFOLIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC_ACTORINFOLIST)
}

void SC_ACTORINFOLIST::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_ACTORINFOLIST_msg_2fworld_5fservice_2eproto.base);
}

SC_ACTORINFOLIST::~SC_ACTORINFOLIST() {
  // @@protoc_insertion_point(destructor:SC_ACTORINFOLIST)
  SharedDtor();
}

void SC_ACTORINFOLIST::SharedDtor() {
}

void SC_ACTORINFOLIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ACTORINFOLIST& SC_ACTORINFOLIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ACTORINFOLIST_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_ACTORINFOLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_ACTORINFOLIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SC_ACTORINFOLIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ACTORINFOLIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_ACTORINFOLIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_ACTORINFOLIST)
  return target;
}

size_t SC_ACTORINFOLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_ACTORINFOLIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC_ACTORINFOLIST.SC_ACTOR_INFO list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ACTORINFOLIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_ACTORINFOLIST)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ACTORINFOLIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ACTORINFOLIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_ACTORINFOLIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_ACTORINFOLIST)
    MergeFrom(*source);
  }
}

void SC_ACTORINFOLIST::MergeFrom(const SC_ACTORINFOLIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_ACTORINFOLIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SC_ACTORINFOLIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_ACTORINFOLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ACTORINFOLIST::CopyFrom(const SC_ACTORINFOLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_ACTORINFOLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ACTORINFOLIST::IsInitialized() const {
  return true;
}

void SC_ACTORINFOLIST::InternalSwap(SC_ACTORINFOLIST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ACTORINFOLIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_CREATEACTOR::InitAsDefaultInstance() {
}
class CS_CREATEACTOR::_Internal {
 public:
};

CS_CREATEACTOR::CS_CREATEACTOR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_CREATEACTOR)
}
CS_CREATEACTOR::CS_CREATEACTOR(const CS_CREATEACTOR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&prof_, &from.prof_,
    static_cast<size_t>(reinterpret_cast<char*>(&baselook_) -
    reinterpret_cast<char*>(&prof_)) + sizeof(baselook_));
  // @@protoc_insertion_point(copy_constructor:CS_CREATEACTOR)
}

void CS_CREATEACTOR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CS_CREATEACTOR_msg_2fworld_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baselook_) -
      reinterpret_cast<char*>(&prof_)) + sizeof(baselook_));
}

CS_CREATEACTOR::~CS_CREATEACTOR() {
  // @@protoc_insertion_point(destructor:CS_CREATEACTOR)
  SharedDtor();
}

void CS_CREATEACTOR::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CS_CREATEACTOR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_CREATEACTOR& CS_CREATEACTOR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_CREATEACTOR_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_CREATEACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CREATEACTOR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baselook_) -
      reinterpret_cast<char*>(&prof_)) + sizeof(baselook_));
  _internal_metadata_.Clear();
}

const char* CS_CREATEACTOR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CS_CREATEACTOR.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 baselook = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          baselook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_CREATEACTOR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_CREATEACTOR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CS_CREATEACTOR.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 prof = 2;
  if (this->prof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prof(), target);
  }

  // uint32 baselook = 3;
  if (this->baselook() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_baselook(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_CREATEACTOR)
  return target;
}

size_t CS_CREATEACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CREATEACTOR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 prof = 2;
  if (this->prof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prof());
  }

  // uint32 baselook = 3;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baselook());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_CREATEACTOR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_CREATEACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_CREATEACTOR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_CREATEACTOR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_CREATEACTOR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_CREATEACTOR)
    MergeFrom(*source);
  }
}

void CS_CREATEACTOR::MergeFrom(const CS_CREATEACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_CREATEACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.prof() != 0) {
    _internal_set_prof(from._internal_prof());
  }
  if (from.baselook() != 0) {
    _internal_set_baselook(from._internal_baselook());
  }
}

void CS_CREATEACTOR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_CREATEACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_CREATEACTOR::CopyFrom(const CS_CREATEACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CREATEACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CREATEACTOR::IsInitialized() const {
  return true;
}

void CS_CREATEACTOR::InternalSwap(CS_CREATEACTOR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prof_, other->prof_);
  swap(baselook_, other->baselook_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CREATEACTOR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_CREATEACTOR::InitAsDefaultInstance() {
}
class SC_CREATEACTOR::_Internal {
 public:
};

SC_CREATEACTOR::SC_CREATEACTOR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_CREATEACTOR)
}
SC_CREATEACTOR::SC_CREATEACTOR(const SC_CREATEACTOR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:SC_CREATEACTOR)
}

void SC_CREATEACTOR::SharedCtor() {
  result_code_ = 0;
}

SC_CREATEACTOR::~SC_CREATEACTOR() {
  // @@protoc_insertion_point(destructor:SC_CREATEACTOR)
  SharedDtor();
}

void SC_CREATEACTOR::SharedDtor() {
}

void SC_CREATEACTOR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_CREATEACTOR& SC_CREATEACTOR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_CREATEACTOR_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_CREATEACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CREATEACTOR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_code_ = 0;
  _internal_metadata_.Clear();
}

const char* SC_CREATEACTOR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SC_CREATEACTOR.ErrorCode result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::SC_CREATEACTOR_ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_CREATEACTOR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_CREATEACTOR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SC_CREATEACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CREATEACTOR)
  return target;
}

size_t SC_CREATEACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CREATEACTOR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SC_CREATEACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_CREATEACTOR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_CREATEACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_CREATEACTOR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_CREATEACTOR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_CREATEACTOR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_CREATEACTOR)
    MergeFrom(*source);
  }
}

void SC_CREATEACTOR::MergeFrom(const SC_CREATEACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_CREATEACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void SC_CREATEACTOR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_CREATEACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_CREATEACTOR::CopyFrom(const SC_CREATEACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CREATEACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CREATEACTOR::IsInitialized() const {
  return true;
}

void SC_CREATEACTOR::InternalSwap(SC_CREATEACTOR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_code_, other->result_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CREATEACTOR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_SELECTACTOR::InitAsDefaultInstance() {
}
class CS_SELECTACTOR::_Internal {
 public:
};

CS_SELECTACTOR::CS_SELECTACTOR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_SELECTACTOR)
}
CS_SELECTACTOR::CS_SELECTACTOR(const CS_SELECTACTOR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actor_idx_ = from.actor_idx_;
  // @@protoc_insertion_point(copy_constructor:CS_SELECTACTOR)
}

void CS_SELECTACTOR::SharedCtor() {
  actor_idx_ = 0u;
}

CS_SELECTACTOR::~CS_SELECTACTOR() {
  // @@protoc_insertion_point(destructor:CS_SELECTACTOR)
  SharedDtor();
}

void CS_SELECTACTOR::SharedDtor() {
}

void CS_SELECTACTOR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_SELECTACTOR& CS_SELECTACTOR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_SELECTACTOR_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CS_SELECTACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_SELECTACTOR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actor_idx_ = 0u;
  _internal_metadata_.Clear();
}

const char* CS_SELECTACTOR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 actor_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_SELECTACTOR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_SELECTACTOR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 actor_idx = 1;
  if (this->actor_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_actor_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_SELECTACTOR)
  return target;
}

size_t CS_SELECTACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_SELECTACTOR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 actor_idx = 1;
  if (this->actor_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_actor_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_SELECTACTOR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_SELECTACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_SELECTACTOR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_SELECTACTOR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_SELECTACTOR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_SELECTACTOR)
    MergeFrom(*source);
  }
}

void CS_SELECTACTOR::MergeFrom(const CS_SELECTACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_SELECTACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_idx() != 0) {
    _internal_set_actor_idx(from._internal_actor_idx());
  }
}

void CS_SELECTACTOR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_SELECTACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_SELECTACTOR::CopyFrom(const CS_SELECTACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_SELECTACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SELECTACTOR::IsInitialized() const {
  return true;
}

void CS_SELECTACTOR::InternalSwap(CS_SELECTACTOR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_idx_, other->actor_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_SELECTACTOR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_SELECTACTOR::InitAsDefaultInstance() {
}
class SC_SELECTACTOR::_Internal {
 public:
};

SC_SELECTACTOR::SC_SELECTACTOR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_SELECTACTOR)
}
SC_SELECTACTOR::SC_SELECTACTOR(const SC_SELECTACTOR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:SC_SELECTACTOR)
}

void SC_SELECTACTOR::SharedCtor() {
  result_code_ = 0;
}

SC_SELECTACTOR::~SC_SELECTACTOR() {
  // @@protoc_insertion_point(destructor:SC_SELECTACTOR)
  SharedDtor();
}

void SC_SELECTACTOR::SharedDtor() {
}

void SC_SELECTACTOR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SELECTACTOR& SC_SELECTACTOR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SELECTACTOR_msg_2fworld_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SC_SELECTACTOR::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_SELECTACTOR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_code_ = 0;
  _internal_metadata_.Clear();
}

const char* SC_SELECTACTOR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SC_SELECTACTOR.ErrorCode result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::SC_SELECTACTOR_ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SELECTACTOR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_SELECTACTOR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SC_SELECTACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_SELECTACTOR)
  return target;
}

size_t SC_SELECTACTOR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_SELECTACTOR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SC_SELECTACTOR.ErrorCode result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SELECTACTOR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_SELECTACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SELECTACTOR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SELECTACTOR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_SELECTACTOR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_SELECTACTOR)
    MergeFrom(*source);
  }
}

void SC_SELECTACTOR::MergeFrom(const SC_SELECTACTOR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_SELECTACTOR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void SC_SELECTACTOR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_SELECTACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SELECTACTOR::CopyFrom(const SC_SELECTACTOR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_SELECTACTOR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SELECTACTOR::IsInitialized() const {
  return true;
}

void SC_SELECTACTOR::InternalSwap(SC_SELECTACTOR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_code_, other->result_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SELECTACTOR::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CS_LOGIN* Arena::CreateMaybeMessage< ::CS_LOGIN >(Arena* arena) {
  return Arena::CreateInternal< ::CS_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_LOGIN* Arena::CreateMaybeMessage< ::SC_LOGIN >(Arena* arena) {
  return Arena::CreateInternal< ::SC_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_WAITINFO* Arena::CreateMaybeMessage< ::SC_WAITINFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_WAITINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ACTORINFOLIST_SC_ACTOR_INFO* Arena::CreateMaybeMessage< ::SC_ACTORINFOLIST_SC_ACTOR_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ACTORINFOLIST_SC_ACTOR_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_ACTORINFOLIST* Arena::CreateMaybeMessage< ::SC_ACTORINFOLIST >(Arena* arena) {
  return Arena::CreateInternal< ::SC_ACTORINFOLIST >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_CREATEACTOR* Arena::CreateMaybeMessage< ::CS_CREATEACTOR >(Arena* arena) {
  return Arena::CreateInternal< ::CS_CREATEACTOR >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_CREATEACTOR* Arena::CreateMaybeMessage< ::SC_CREATEACTOR >(Arena* arena) {
  return Arena::CreateInternal< ::SC_CREATEACTOR >(arena);
}
template<> PROTOBUF_NOINLINE ::CS_SELECTACTOR* Arena::CreateMaybeMessage< ::CS_SELECTACTOR >(Arena* arena) {
  return Arena::CreateInternal< ::CS_SELECTACTOR >(arena);
}
template<> PROTOBUF_NOINLINE ::SC_SELECTACTOR* Arena::CreateMaybeMessage< ::SC_SELECTACTOR >(Arena* arena) {
  return Arena::CreateInternal< ::SC_SELECTACTOR >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
