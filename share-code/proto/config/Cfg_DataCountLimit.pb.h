// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config/Cfg_DataCountLimit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fDataCountLimit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fDataCountLimit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2fCfg_5fDataCountLimit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2fCfg_5fDataCountLimit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2fCfg_5fDataCountLimit_2eproto;
class Cfg_DataCountLimit;
class Cfg_DataCountLimitDefaultTypeInternal;
extern Cfg_DataCountLimitDefaultTypeInternal _Cfg_DataCountLimit_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Cfg_DataCountLimit* Arena::CreateMaybeMessage<::Cfg_DataCountLimit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Cfg_DataCountLimit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cfg_DataCountLimit) */ {
 public:
  Cfg_DataCountLimit();
  virtual ~Cfg_DataCountLimit();

  Cfg_DataCountLimit(const Cfg_DataCountLimit& from);
  Cfg_DataCountLimit(Cfg_DataCountLimit&& from) noexcept
    : Cfg_DataCountLimit() {
    *this = ::std::move(from);
  }

  inline Cfg_DataCountLimit& operator=(const Cfg_DataCountLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cfg_DataCountLimit& operator=(Cfg_DataCountLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cfg_DataCountLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cfg_DataCountLimit* internal_default_instance() {
    return reinterpret_cast<const Cfg_DataCountLimit*>(
               &_Cfg_DataCountLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cfg_DataCountLimit& a, Cfg_DataCountLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(Cfg_DataCountLimit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cfg_DataCountLimit* New() const final {
    return CreateMaybeMessage<Cfg_DataCountLimit>(nullptr);
  }

  Cfg_DataCountLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cfg_DataCountLimit>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cfg_DataCountLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cfg_DataCountLimit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2fCfg_5fDataCountLimit_2eproto);
    return ::descriptor_table_config_2fCfg_5fDataCountLimit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kKeyidxFieldNumber = 2,
    kMaxCountFieldNumber = 3,
    kResetTypeFieldNumber = 4,
    kResetTimeFieldNumber = 5,
  };
  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 keyidx = 2;
  void clear_keyidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 keyidx() const;
  void set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keyidx() const;
  void _internal_set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_count = 3;
  void clear_max_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_count() const;
  void set_max_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_count() const;
  void _internal_set_max_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reset_type = 4;
  void clear_reset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 reset_type() const;
  void set_reset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reset_type() const;
  void _internal_set_reset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reset_time = 5;
  void clear_reset_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 reset_time() const;
  void set_reset_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reset_time() const;
  void _internal_set_reset_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Cfg_DataCountLimit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keyidx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reset_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reset_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2fCfg_5fDataCountLimit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cfg_DataCountLimit

// uint32 type = 1;
inline void Cfg_DataCountLimit::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::type() const {
  // @@protoc_insertion_point(field_get:Cfg_DataCountLimit.type)
  return _internal_type();
}
inline void Cfg_DataCountLimit::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Cfg_DataCountLimit::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Cfg_DataCountLimit.type)
}

// uint32 keyidx = 2;
inline void Cfg_DataCountLimit::clear_keyidx() {
  keyidx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::_internal_keyidx() const {
  return keyidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::keyidx() const {
  // @@protoc_insertion_point(field_get:Cfg_DataCountLimit.keyidx)
  return _internal_keyidx();
}
inline void Cfg_DataCountLimit::_internal_set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keyidx_ = value;
}
inline void Cfg_DataCountLimit::set_keyidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keyidx(value);
  // @@protoc_insertion_point(field_set:Cfg_DataCountLimit.keyidx)
}

// uint32 max_count = 3;
inline void Cfg_DataCountLimit::clear_max_count() {
  max_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::_internal_max_count() const {
  return max_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::max_count() const {
  // @@protoc_insertion_point(field_get:Cfg_DataCountLimit.max_count)
  return _internal_max_count();
}
inline void Cfg_DataCountLimit::_internal_set_max_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_count_ = value;
}
inline void Cfg_DataCountLimit::set_max_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_count(value);
  // @@protoc_insertion_point(field_set:Cfg_DataCountLimit.max_count)
}

// uint32 reset_type = 4;
inline void Cfg_DataCountLimit::clear_reset_type() {
  reset_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::_internal_reset_type() const {
  return reset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::reset_type() const {
  // @@protoc_insertion_point(field_get:Cfg_DataCountLimit.reset_type)
  return _internal_reset_type();
}
inline void Cfg_DataCountLimit::_internal_set_reset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reset_type_ = value;
}
inline void Cfg_DataCountLimit::set_reset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reset_type(value);
  // @@protoc_insertion_point(field_set:Cfg_DataCountLimit.reset_type)
}

// uint32 reset_time = 5;
inline void Cfg_DataCountLimit::clear_reset_time() {
  reset_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::_internal_reset_time() const {
  return reset_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cfg_DataCountLimit::reset_time() const {
  // @@protoc_insertion_point(field_get:Cfg_DataCountLimit.reset_time)
  return _internal_reset_time();
}
inline void Cfg_DataCountLimit::_internal_set_reset_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reset_time_ = value;
}
inline void Cfg_DataCountLimit::set_reset_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reset_time(value);
  // @@protoc_insertion_point(field_set:Cfg_DataCountLimit.reset_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2fCfg_5fDataCountLimit_2eproto
