syntax = "proto3";

import "common/Common.proto";

package ServerMSG;

enum OMsgID
{
    OMSGID_NONE = 0;
    MsgID_BEGIN = 20000;
    //内部消息id
    MsgID_ServiceCmd          = 20001;
    MsgID_ServiceHttpRequest  = 20002;
    MsgID_ServiceHttpResponse = 20003;
    MsgID_ServiceReady        = 20010;
    MsgID_ServiceRegister     = 20011;

    MsgID_SocketConnect     = 20012; // sck->other 一个socket连接上来了
    MsgID_SocketClose       = 20013; // sck->other socket关闭
    MsgID_SocketChangeDest  = 20014; // other->sck 切换socket对应的服务器
    MsgID_SocketAuth        = 20015; // other->sck 设置socket的认证信息
    MsgID_SocketStartAccept = 20016; // world->sck 开始监听
    MsgID_SocketStopAccept  = 20017; // world->sck 关闭监听
    MsgID_SocketLogin       = 20018; // auth->world login

    MsgID_PlayerEnterZone       = 20021;
    MsgID_PlayerChangeZone      = 20022;
    MsgID_PlayerChangeZone_Data = 20023;
    MsgID_PlayerLogout          = 20024;

    MsgID_SystemVarChange = 20030;
    MsgID_SceneCreate     = 20031;
    MsgID_PhaseCreate     = 20032;
    MsgID_PhaseDestory    = 20033;

    MsgID_MonsterGen      = 20041;
    MsgID_MonsterDestory  = 20042;
    MsgID_ActiveGen       = 20043;
    MsgID_KillGen         = 20044;
    MsgID_MonsterGenOnce  = 20045;
    MsgID_MonsterGenMulti = 20046;

    MsgID_ActorCreate         = 20100;
    MsgID_ActorDestory        = 20101;
    MsgID_ActorMove           = 20102;
    MsgID_ActorCastSkill      = 20103;
    MsgID_ActorCastSkill_Fail = 20104;
    MsgID_ActorSetHide        = 20105;
    MsgID_SyncTaskPhase       = 20106;
    MsgID_AddTaskPhase        = 20107;
    MsgID_RemoveTaskPhase     = 20108;
    MsgID_ActorFlyTo          = 20109;

    MsgID_TeamCreate       = 20110;
    MsgID_TeamDestory      = 20111;
    MsgID_TeamQuit         = 20112;
    MsgID_TeamKickMember   = 20113;
    MsgID_TeamInviteMember = 20114;
    MsgID_TeamAcceptInvite = 20115;
    MsgID_TeamApplyMember  = 20116;
    MsgID_TeamAcceptApply  = 20117;
    MsgID_TeamNewLeader    = 20118;
    MsgID_TeamMemberInfoList   = 20119;
    MsgID_TeamAddMember    = 20120;
    MsgID_TeamDelMember    = 20121;

    MsgID_GuildCreate       = 20140;
    MsgID_GuildDestory      = 20141;
    MsgID_GuildQuit         = 20142;
    MsgID_GuildKickMember   = 20143;
    MsgID_GuildInviteMember = 20144;
    MsgID_GuildAcceptInvite = 20145;
    MsgID_GuildApplyMember  = 20146;
    MsgID_GuildAcceptApply  = 20147;
    MsgID_GuildNewLeader    = 20148;
    MsgID_GuildMemberInfoList   = 20149;
    MsgID_GuildAddMember    = 20150;
    MsgID_GuildDelMember    = 20151;

    MsgID_END = 30000;
};

message ServiceCmd
{
    repeated string cmds = 1;
};

message ServiceHttpRequest
{
    uint64              uid   = 1;
    map<string, string> kvmap = 2;
};

message ServiceHttpResponse
{
    uint64 uid             = 1;
    int32  response_code   = 2;
    string response_reason = 3;
    bytes  response_txt    = 4;
};

message ServiceReady
{
    uint32 serverport = 1;
    bool   ready      = 2;
};

message ServiceRegister
{
    uint32 serverport  = 1;
    uint64 update_time = 2;
}

message SocketConnect
{
    uint64 vs = 1;
}

message SocketClose
{
    uint64 vs = 1;
}

message SocketChangeDest
{
    uint64 vs       = 1;
    uint32 destport = 2;
}

message SocketAuth
{
    uint64 vs = 1;
}

message SocketLogin
{
    uint64 vs = 1;
    bytes openid = 2;
}

message SocketStartAccept {}

message SocketStopAccept {}

message PlayerEnterZone
{
    uint64 idplayer = 1;
    uint64 socket   = 2;
    uint64 target_scene_idx = 4;
    float  posx     = 5;
    float  posy     = 6;
    float  face     = 7;
}

message PlayerChangeZone
{
    uint64 idplayer = 1;
    uint64 socket   = 2;
    uint32 idzone   = 3;
    uint64 target_scene     = 4;

    float  posx     = 6;
    float  posy     = 7;
    float  range    = 8;
    float  face     = 9;
}

message PlayerChangeZone_Data
{
    uint64 idplayer = 1;
    uint64 socket   = 2;
    //其他的内存数据
}

message PlayerLogout
{
    uint64 idplayer = 1;
    uint64 socket   = 2;
}

message SystemVarChange
{
    uint32 keyidx = 1;
    uint32 idx    = 2;
    uint32 val    = 3;
    string str    = 4;
    enum SystemVarChangeType
    {
        SVCT_CREATE   = 0;
        SVCT_SET_DATA = 1;
        SVCT_ADD_DATA = 2;
        SVCT_SET_STR  = 3;
    };
    SystemVarChangeType type = 5;
}

message SceneCreate
{
    uint64 scene_id = 1;
};

message PhaseCreate
{
    uint64 scene_id = 1;
    uint64 phase_id = 2;
};

message PhaseDestory
{
    uint64 scene_id = 1;
    uint64 phase_id = 2;
};

message MonsterGen
{
    uint64 scene_id     = 1;
    uint64 phase_id     = 2;
    uint32 gen_id       = 3;
    uint32 monster_type = 4;
    float  posx         = 5;
    float  posy         = 6;
    uint32 camp_id      = 7;
    uint32 monster_id   = 8;
};

message MonsterGenMulti
{
    uint64 scene_id     = 1;
    uint64 phase_id     = 2;
    uint32 gen_id       = 3;
    uint32 monster_type = 4;
    float  posx         = 5;
    float  posy         = 6;
    uint32 camp_id      = 7;
    uint32 monster_id   = 8;
    uint32 num          = 9;
    float  range        = 10;
};

message MonsterDestory
{
    repeated uint64 monster_id = 1;
};

message MonsterGenOnce
{
    uint64 scene_id = 1;
    uint32 gen_id   = 2;
    uint64 phase_id = 3;
};

message ActiveGen
{
    uint64 scene_id = 1;
    uint32 gen_id   = 2;
    bool   active   = 3;
};

message KillGen
{
    uint64 scene_id = 1;
    uint32 gen_id   = 2;
};

message ActorCreate
{
    uint64 actor_id  = 1;
    uint64 scene_id  = 2;
    string name      = 4;
    uint32 actortype = 5; // ACTOR_TYPE
    uint32 baselook  = 6; //基本外观数据
    uint32 prof      = 7; //玩家代表职业, 怪物/宠物/NPC代表类型ID
    uint32 lev       = 8;
    uint32 campid    = 9;
    uint32 hp        = 10;
    uint32 hpmax     = 11;
    uint32 mp        = 12;
    uint32 mpmax     = 13;
    uint32 movespd   = 14;
    uint64 ownerid   = 15;

    float posx = 16;
    float posy = 17;
    float face = 18;

    uint32 monster_gen_id = 20;
    uint64 phase_id       = 21;
};

message ActorDestory
{
    uint64 actor_id = 1;
    bool dead = 2;
};

message ActorMove
{
    uint64 actor_id = 1;
    float  x        = 2;
    float  y        = 3;
};

message ActorFlyTo
{
    uint64 actor_id = 1;
    float  x        = 2;
    float  y        = 3;
};

message ActorCastSkill
{
    uint64 actor_id  = 1;
    uint64 target_id = 2;
    uint32 skill_id  = 3;
};

message ActorCastSkill_Fail
{
    uint64 actor_id = 1;
};

message ActorSetHide
{
    uint64 actor_id   = 1;
    int32  hide_count = 2;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

message TeamCreate
{
    uint64 team_id   = 1;
    uint64 leader_id = 2;
};

message TeamDestory
{
    uint64 team_id = 1;
};

message TeamQuit
{
    uint64 team_id     = 1;
    uint64 operator_id = 2;
};
message TeamKickMember
{
    uint64 team_id     = 1;
    uint64 operator_id = 2;
    uint64 kick_id     = 3;
};

message TeamInviteMember
{
    uint64 team_id     = 1;
    uint64 operator_id = 2;
    uint64 invitee_id  = 3;
};
message TeamAcceptInvite
{
    uint64 team_id    = 1;
    uint64 inviter_id = 2;
    uint64 invitee_id = 3;
    bool   result     = 4;
};

message TeamApplyMember
{
    uint64 applicant_id  = 1;
    uint64 respondent_id = 2;
};
message TeamAcceptApply
{
    uint64 applicant_id  = 1;
    uint64 respondent_id = 2;
    bool   result        = 3;
};

message TeamNewLeader
{
    uint64 team_id       = 1;
    uint64 operator_id   = 2;
    uint64 new_leader_id = 3;
};

message TeamAddMember
{
    uint64 team_id   = 1;
    uint64 member_id = 2;
};

message TeamDelMember
{
    uint64 team_id   = 1;
    uint64 member_id = 2;
};

message TeamMemberInfoList
{
    repeated TeamMemberInfo member_list = 1;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


message GuildCreate
{
    uint64 guild_id   = 1;
    uint64 leader_id = 2;
    string guild_name = 3;
    string leader_name = 4;
    uint32 create_time = 5;
};

message GuildDestory
{
    uint64 guild_id = 1;
};

message GuildQuit
{
    uint64 guild_id     = 1;
    uint64 operator_id = 2;
};
message GuildKickMember
{
    uint64 guild_id     = 1;
    uint64 operator_id = 2;
    uint64 kick_id     = 3;
};

message GuildInviteMember
{
    uint64 guild_id     = 1;
    uint64 operator_id = 2;
    uint64 invitee_id  = 3;
};
message GuildAcceptInvite
{
    uint64 guild_id    = 1;
    uint64 inviter_id = 2;
    uint64 invitee_id = 3;
    bool   result     = 4;
};

message GuildApplyMember
{
    uint64 applicant_id  = 1;
    uint64 respondent_id = 2;
};
message GuildAcceptApply
{
    uint64 applicant_id  = 1;
    uint64 respondent_id = 2;
    bool   result        = 3;
};

message GuildNewLeader
{
    uint64 guild_id       = 1;
    uint64 operator_id   = 2;
    uint64 new_leader_id = 3;
    string new_leader_name = 4;
};

message GuildAddMember
{
    uint64 guild_id   = 1;
    uint64 member_id = 2;
};

message GuildDelMember
{
    uint64 guild_id   = 1;
    uint64 member_id = 2;
};

message GuildMemberInfoList
{
    repeated GuildMemberInfo member_list = 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
message SyncTaskPhase
{
    uint64          player_id     = 1;
    repeated uint64 task_phase_id = 2;
}

message AddTaskPhase
{
    uint64 player_id     = 1;
    uint64 task_phase_id = 2;
}

message RemoveTaskPhase
{
    uint64 player_id     = 1;
    uint64 task_phase_id = 2;
}