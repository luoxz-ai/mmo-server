// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_msg/server_side.proto

#include "server_msg/server_side.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildMemberInfo_common_2fCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmsg_2fserver_5fside_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerSideMessageOptions_server_5fmsg_2fserver_5fside_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fmsg_2fserver_5fside_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceHttpRequest_KvmapEntry_DoNotUse_server_5fmsg_2fserver_5fside_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamMemberInfo_common_2fCommon_2eproto;
namespace ServerMSG {
class ServerSideMessageOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerSideMessageOptions> _instance;
} _ServerSideMessageOptions_default_instance_;
class ServiceCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceCmd> _instance;
} _ServiceCmd_default_instance_;
class ServiceHttpRequest_KvmapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceHttpRequest_KvmapEntry_DoNotUse> _instance;
} _ServiceHttpRequest_KvmapEntry_DoNotUse_default_instance_;
class ServiceHttpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceHttpRequest> _instance;
} _ServiceHttpRequest_default_instance_;
class ServiceHttpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceHttpResponse> _instance;
} _ServiceHttpResponse_default_instance_;
class MessageTransmitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageTransmit> _instance;
} _MessageTransmit_default_instance_;
class ServiceReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceReady> _instance;
} _ServiceReady_default_instance_;
class ServiceRegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRegister> _instance;
} _ServiceRegister_default_instance_;
class SocketConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocketConnect> _instance;
} _SocketConnect_default_instance_;
class SocketCloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocketClose> _instance;
} _SocketClose_default_instance_;
class SocketChangeDestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocketChangeDest> _instance;
} _SocketChangeDest_default_instance_;
class SocketAuthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocketAuth> _instance;
} _SocketAuth_default_instance_;
class SocketLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocketLogin> _instance;
} _SocketLogin_default_instance_;
class SocketStartAcceptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocketStartAccept> _instance;
} _SocketStartAccept_default_instance_;
class SocketStopAcceptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocketStopAccept> _instance;
} _SocketStopAccept_default_instance_;
class PlayerEnterZoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerEnterZone> _instance;
} _PlayerEnterZone_default_instance_;
class PlayerChangeZoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerChangeZone> _instance;
} _PlayerChangeZone_default_instance_;
class PlayerChangeZone_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerChangeZone_Data> _instance;
} _PlayerChangeZone_Data_default_instance_;
class PlayerLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerLogout> _instance;
} _PlayerLogout_default_instance_;
class SystemVarChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemVarChange> _instance;
} _SystemVarChange_default_instance_;
class SceneCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneCreate> _instance;
} _SceneCreate_default_instance_;
class PhaseCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhaseCreate> _instance;
} _PhaseCreate_default_instance_;
class PhaseDestoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhaseDestory> _instance;
} _PhaseDestory_default_instance_;
class MonsterGenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonsterGen> _instance;
} _MonsterGen_default_instance_;
class MonsterGenMultiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonsterGenMulti> _instance;
} _MonsterGenMulti_default_instance_;
class MonsterDestoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonsterDestory> _instance;
} _MonsterDestory_default_instance_;
class MonsterGenOnceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonsterGenOnce> _instance;
} _MonsterGenOnce_default_instance_;
class ActiveGenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveGen> _instance;
} _ActiveGen_default_instance_;
class KillGenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KillGen> _instance;
} _KillGen_default_instance_;
class ActorCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorCreate> _instance;
} _ActorCreate_default_instance_;
class ActorDestoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorDestory> _instance;
} _ActorDestory_default_instance_;
class ActorMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorMove> _instance;
} _ActorMove_default_instance_;
class ActorFlyToDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorFlyTo> _instance;
} _ActorFlyTo_default_instance_;
class ActorCastSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorCastSkill> _instance;
} _ActorCastSkill_default_instance_;
class ActorCastSkill_FailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorCastSkill_Fail> _instance;
} _ActorCastSkill_Fail_default_instance_;
class ActorSetHideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorSetHide> _instance;
} _ActorSetHide_default_instance_;
class TeamCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamCreate> _instance;
} _TeamCreate_default_instance_;
class TeamDestoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamDestory> _instance;
} _TeamDestory_default_instance_;
class TeamQuitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamQuit> _instance;
} _TeamQuit_default_instance_;
class TeamKickMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamKickMember> _instance;
} _TeamKickMember_default_instance_;
class TeamInviteMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamInviteMember> _instance;
} _TeamInviteMember_default_instance_;
class TeamAcceptInviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamAcceptInvite> _instance;
} _TeamAcceptInvite_default_instance_;
class TeamApplyMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamApplyMember> _instance;
} _TeamApplyMember_default_instance_;
class TeamAcceptApplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamAcceptApply> _instance;
} _TeamAcceptApply_default_instance_;
class TeamNewLeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamNewLeader> _instance;
} _TeamNewLeader_default_instance_;
class TeamAddMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamAddMember> _instance;
} _TeamAddMember_default_instance_;
class TeamDelMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamDelMember> _instance;
} _TeamDelMember_default_instance_;
class TeamMemberInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamMemberInfoList> _instance;
} _TeamMemberInfoList_default_instance_;
class GuildCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildCreate> _instance;
} _GuildCreate_default_instance_;
class GuildDestoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildDestory> _instance;
} _GuildDestory_default_instance_;
class GuildQuitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildQuit> _instance;
} _GuildQuit_default_instance_;
class GuildKickMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildKickMember> _instance;
} _GuildKickMember_default_instance_;
class GuildInviteMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildInviteMember> _instance;
} _GuildInviteMember_default_instance_;
class GuildAcceptInviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildAcceptInvite> _instance;
} _GuildAcceptInvite_default_instance_;
class GuildApplyMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildApplyMember> _instance;
} _GuildApplyMember_default_instance_;
class GuildAcceptApplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildAcceptApply> _instance;
} _GuildAcceptApply_default_instance_;
class GuildNewLeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildNewLeader> _instance;
} _GuildNewLeader_default_instance_;
class GuildAddMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildAddMember> _instance;
} _GuildAddMember_default_instance_;
class GuildDelMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildDelMember> _instance;
} _GuildDelMember_default_instance_;
class GuildMemberInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildMemberInfoList> _instance;
} _GuildMemberInfoList_default_instance_;
class SyncTaskPhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncTaskPhase> _instance;
} _SyncTaskPhase_default_instance_;
class AddTaskPhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTaskPhase> _instance;
} _AddTaskPhase_default_instance_;
class RemoveTaskPhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveTaskPhase> _instance;
} _RemoveTaskPhase_default_instance_;
}  // namespace ServerMSG
static void InitDefaultsscc_info_ActiveGen_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ActiveGen_default_instance_;
    new (ptr) ::ServerMSG::ActiveGen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ActiveGen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveGen_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActiveGen_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ActorCastSkill_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ActorCastSkill_default_instance_;
    new (ptr) ::ServerMSG::ActorCastSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ActorCastSkill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorCastSkill_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorCastSkill_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ActorCastSkill_Fail_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ActorCastSkill_Fail_default_instance_;
    new (ptr) ::ServerMSG::ActorCastSkill_Fail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ActorCastSkill_Fail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorCastSkill_Fail_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorCastSkill_Fail_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ActorCreate_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ActorCreate_default_instance_;
    new (ptr) ::ServerMSG::ActorCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ActorCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorCreate_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorCreate_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ActorDestory_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ActorDestory_default_instance_;
    new (ptr) ::ServerMSG::ActorDestory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ActorDestory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorDestory_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorDestory_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ActorFlyTo_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ActorFlyTo_default_instance_;
    new (ptr) ::ServerMSG::ActorFlyTo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ActorFlyTo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorFlyTo_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorFlyTo_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ActorMove_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ActorMove_default_instance_;
    new (ptr) ::ServerMSG::ActorMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ActorMove::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorMove_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorMove_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ActorSetHide_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ActorSetHide_default_instance_;
    new (ptr) ::ServerMSG::ActorSetHide();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ActorSetHide::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActorSetHide_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActorSetHide_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_AddTaskPhase_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_AddTaskPhase_default_instance_;
    new (ptr) ::ServerMSG::AddTaskPhase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::AddTaskPhase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddTaskPhase_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddTaskPhase_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildAcceptApply_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildAcceptApply_default_instance_;
    new (ptr) ::ServerMSG::GuildAcceptApply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildAcceptApply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildAcceptApply_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildAcceptApply_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildAcceptInvite_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildAcceptInvite_default_instance_;
    new (ptr) ::ServerMSG::GuildAcceptInvite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildAcceptInvite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildAcceptInvite_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildAcceptInvite_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildAddMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildAddMember_default_instance_;
    new (ptr) ::ServerMSG::GuildAddMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildAddMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildAddMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildAddMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildApplyMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildApplyMember_default_instance_;
    new (ptr) ::ServerMSG::GuildApplyMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildApplyMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildApplyMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildApplyMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildCreate_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildCreate_default_instance_;
    new (ptr) ::ServerMSG::GuildCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildCreate_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildCreate_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildDelMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildDelMember_default_instance_;
    new (ptr) ::ServerMSG::GuildDelMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildDelMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildDelMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildDelMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildDestory_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildDestory_default_instance_;
    new (ptr) ::ServerMSG::GuildDestory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildDestory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildDestory_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildDestory_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildInviteMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildInviteMember_default_instance_;
    new (ptr) ::ServerMSG::GuildInviteMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildInviteMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildInviteMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildInviteMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildKickMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildKickMember_default_instance_;
    new (ptr) ::ServerMSG::GuildKickMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildKickMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildKickMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildKickMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildMemberInfoList_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildMemberInfoList_default_instance_;
    new (ptr) ::ServerMSG::GuildMemberInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildMemberInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuildMemberInfoList_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GuildMemberInfoList_server_5fmsg_2fserver_5fside_2eproto}, {
      &scc_info_GuildMemberInfo_common_2fCommon_2eproto.base,}};

static void InitDefaultsscc_info_GuildNewLeader_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildNewLeader_default_instance_;
    new (ptr) ::ServerMSG::GuildNewLeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildNewLeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildNewLeader_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildNewLeader_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_GuildQuit_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_GuildQuit_default_instance_;
    new (ptr) ::ServerMSG::GuildQuit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::GuildQuit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildQuit_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildQuit_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_KillGen_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_KillGen_default_instance_;
    new (ptr) ::ServerMSG::KillGen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::KillGen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KillGen_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KillGen_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_MessageTransmit_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_MessageTransmit_default_instance_;
    new (ptr) ::ServerMSG::MessageTransmit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::MessageTransmit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageTransmit_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageTransmit_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_MonsterDestory_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_MonsterDestory_default_instance_;
    new (ptr) ::ServerMSG::MonsterDestory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::MonsterDestory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonsterDestory_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonsterDestory_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_MonsterGen_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_MonsterGen_default_instance_;
    new (ptr) ::ServerMSG::MonsterGen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::MonsterGen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonsterGen_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonsterGen_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_MonsterGenMulti_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_MonsterGenMulti_default_instance_;
    new (ptr) ::ServerMSG::MonsterGenMulti();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::MonsterGenMulti::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonsterGenMulti_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonsterGenMulti_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_MonsterGenOnce_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_MonsterGenOnce_default_instance_;
    new (ptr) ::ServerMSG::MonsterGenOnce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::MonsterGenOnce::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonsterGenOnce_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonsterGenOnce_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_PhaseCreate_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_PhaseCreate_default_instance_;
    new (ptr) ::ServerMSG::PhaseCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::PhaseCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhaseCreate_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhaseCreate_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_PhaseDestory_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_PhaseDestory_default_instance_;
    new (ptr) ::ServerMSG::PhaseDestory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::PhaseDestory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhaseDestory_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhaseDestory_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_PlayerChangeZone_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_PlayerChangeZone_default_instance_;
    new (ptr) ::ServerMSG::PlayerChangeZone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::PlayerChangeZone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerChangeZone_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerChangeZone_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_PlayerChangeZone_Data_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_PlayerChangeZone_Data_default_instance_;
    new (ptr) ::ServerMSG::PlayerChangeZone_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::PlayerChangeZone_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerChangeZone_Data_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerChangeZone_Data_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_PlayerEnterZone_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_PlayerEnterZone_default_instance_;
    new (ptr) ::ServerMSG::PlayerEnterZone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::PlayerEnterZone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerEnterZone_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerEnterZone_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_PlayerLogout_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_PlayerLogout_default_instance_;
    new (ptr) ::ServerMSG::PlayerLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::PlayerLogout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerLogout_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerLogout_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_RemoveTaskPhase_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_RemoveTaskPhase_default_instance_;
    new (ptr) ::ServerMSG::RemoveTaskPhase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::RemoveTaskPhase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveTaskPhase_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveTaskPhase_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SceneCreate_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SceneCreate_default_instance_;
    new (ptr) ::ServerMSG::SceneCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SceneCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneCreate_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneCreate_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ServerSideMessageOptions_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ServerSideMessageOptions_default_instance_;
    new (ptr) ::ServerMSG::ServerSideMessageOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ServerSideMessageOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerSideMessageOptions_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerSideMessageOptions_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ServiceCmd_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ServiceCmd_default_instance_;
    new (ptr) ::ServerMSG::ServiceCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ServiceCmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceCmd_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceCmd_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ServiceHttpRequest_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ServiceHttpRequest_default_instance_;
    new (ptr) ::ServerMSG::ServiceHttpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ServiceHttpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceHttpRequest_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceHttpRequest_server_5fmsg_2fserver_5fside_2eproto}, {
      &scc_info_ServiceHttpRequest_KvmapEntry_DoNotUse_server_5fmsg_2fserver_5fside_2eproto.base,}};

static void InitDefaultsscc_info_ServiceHttpRequest_KvmapEntry_DoNotUse_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ServiceHttpRequest_KvmapEntry_DoNotUse_default_instance_;
    new (ptr) ::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse();
  }
  ::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceHttpRequest_KvmapEntry_DoNotUse_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceHttpRequest_KvmapEntry_DoNotUse_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ServiceHttpResponse_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ServiceHttpResponse_default_instance_;
    new (ptr) ::ServerMSG::ServiceHttpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ServiceHttpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceHttpResponse_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceHttpResponse_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ServiceReady_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ServiceReady_default_instance_;
    new (ptr) ::ServerMSG::ServiceReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ServiceReady::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceReady_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceReady_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_ServiceRegister_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_ServiceRegister_default_instance_;
    new (ptr) ::ServerMSG::ServiceRegister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::ServiceRegister::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceRegister_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceRegister_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SocketAuth_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SocketAuth_default_instance_;
    new (ptr) ::ServerMSG::SocketAuth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SocketAuth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketAuth_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocketAuth_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SocketChangeDest_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SocketChangeDest_default_instance_;
    new (ptr) ::ServerMSG::SocketChangeDest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SocketChangeDest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketChangeDest_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocketChangeDest_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SocketClose_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SocketClose_default_instance_;
    new (ptr) ::ServerMSG::SocketClose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SocketClose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketClose_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocketClose_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SocketConnect_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SocketConnect_default_instance_;
    new (ptr) ::ServerMSG::SocketConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SocketConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketConnect_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocketConnect_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SocketLogin_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SocketLogin_default_instance_;
    new (ptr) ::ServerMSG::SocketLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SocketLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketLogin_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocketLogin_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SocketStartAccept_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SocketStartAccept_default_instance_;
    new (ptr) ::ServerMSG::SocketStartAccept();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SocketStartAccept::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketStartAccept_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocketStartAccept_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SocketStopAccept_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SocketStopAccept_default_instance_;
    new (ptr) ::ServerMSG::SocketStopAccept();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SocketStopAccept::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketStopAccept_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocketStopAccept_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SyncTaskPhase_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SyncTaskPhase_default_instance_;
    new (ptr) ::ServerMSG::SyncTaskPhase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SyncTaskPhase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncTaskPhase_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncTaskPhase_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_SystemVarChange_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_SystemVarChange_default_instance_;
    new (ptr) ::ServerMSG::SystemVarChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::SystemVarChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemVarChange_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemVarChange_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamAcceptApply_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamAcceptApply_default_instance_;
    new (ptr) ::ServerMSG::TeamAcceptApply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamAcceptApply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamAcceptApply_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamAcceptApply_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamAcceptInvite_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamAcceptInvite_default_instance_;
    new (ptr) ::ServerMSG::TeamAcceptInvite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamAcceptInvite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamAcceptInvite_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamAcceptInvite_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamAddMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamAddMember_default_instance_;
    new (ptr) ::ServerMSG::TeamAddMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamAddMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamAddMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamAddMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamApplyMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamApplyMember_default_instance_;
    new (ptr) ::ServerMSG::TeamApplyMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamApplyMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamApplyMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamApplyMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamCreate_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamCreate_default_instance_;
    new (ptr) ::ServerMSG::TeamCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamCreate_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamCreate_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamDelMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamDelMember_default_instance_;
    new (ptr) ::ServerMSG::TeamDelMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamDelMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamDelMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamDelMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamDestory_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamDestory_default_instance_;
    new (ptr) ::ServerMSG::TeamDestory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamDestory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamDestory_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamDestory_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamInviteMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamInviteMember_default_instance_;
    new (ptr) ::ServerMSG::TeamInviteMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamInviteMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamInviteMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamInviteMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamKickMember_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamKickMember_default_instance_;
    new (ptr) ::ServerMSG::TeamKickMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamKickMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamKickMember_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamKickMember_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamMemberInfoList_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamMemberInfoList_default_instance_;
    new (ptr) ::ServerMSG::TeamMemberInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamMemberInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamMemberInfoList_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeamMemberInfoList_server_5fmsg_2fserver_5fside_2eproto}, {
      &scc_info_TeamMemberInfo_common_2fCommon_2eproto.base,}};

static void InitDefaultsscc_info_TeamNewLeader_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamNewLeader_default_instance_;
    new (ptr) ::ServerMSG::TeamNewLeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamNewLeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamNewLeader_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamNewLeader_server_5fmsg_2fserver_5fside_2eproto}, {}};

static void InitDefaultsscc_info_TeamQuit_server_5fmsg_2fserver_5fside_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerMSG::_TeamQuit_default_instance_;
    new (ptr) ::ServerMSG::TeamQuit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMSG::TeamQuit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamQuit_server_5fmsg_2fserver_5fside_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamQuit_server_5fmsg_2fserver_5fside_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_5fmsg_2fserver_5fside_2eproto[63];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_5fmsg_2fserver_5fside_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_5fmsg_2fserver_5fside_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_5fmsg_2fserver_5fside_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServerSideMessageOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServerSideMessageOptions, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceCmd, cmds_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpRequest, kvmap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpResponse, uid_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpResponse, response_code_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpResponse, response_reason_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceHttpResponse, response_txt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MessageTransmit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MessageTransmit, raw_message_head_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MessageTransmit, raw_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceReady, serverport_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceReady, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceRegister, serverport_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ServiceRegister, update_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketConnect, vs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketClose, vs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketChangeDest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketChangeDest, vs_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketChangeDest, destport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketAuth, vs_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketAuth, open_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketLogin, vs_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketLogin, open_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketStartAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SocketStopAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerEnterZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerEnterZone, idplayer_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerEnterZone, socket_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerEnterZone, target_scene_idx_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerEnterZone, posx_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerEnterZone, posy_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerEnterZone, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, idplayer_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, socket_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, idzone_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, target_scene_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, posx_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, posy_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, range_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone_Data, idplayer_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerChangeZone_Data, socket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerLogout, idplayer_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PlayerLogout, socket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SystemVarChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SystemVarChange, keyidx_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SystemVarChange, idx_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SystemVarChange, val_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SystemVarChange, str_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SystemVarChange, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SceneCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SceneCreate, scene_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PhaseCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PhaseCreate, scene_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PhaseCreate, phase_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PhaseDestory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PhaseDestory, scene_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::PhaseDestory, phase_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, scene_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, phase_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, gen_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, monster_type_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, posx_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, posy_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, camp_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGen, monster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, scene_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, phase_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, gen_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, monster_type_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, posx_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, posy_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, camp_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, monster_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, num_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenMulti, range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterDestory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterDestory, monster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenOnce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenOnce, scene_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenOnce, gen_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::MonsterGenOnce, phase_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActiveGen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActiveGen, scene_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActiveGen, gen_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActiveGen, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::KillGen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::KillGen, scene_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::KillGen, gen_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, actor_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, scene_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, name_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, actortype_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, baselook_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, prof_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, lev_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, campid_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, hp_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, hpmax_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, mp_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, mpmax_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, movespd_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, ownerid_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, posx_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, posy_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, face_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, monster_gen_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCreate, phase_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorDestory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorDestory, actor_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorDestory, dead_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorMove, actor_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorMove, x_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorMove, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorFlyTo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorFlyTo, actor_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorFlyTo, x_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorFlyTo, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCastSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCastSkill, actor_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCastSkill, target_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCastSkill, skill_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCastSkill_Fail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorCastSkill_Fail, actor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorSetHide, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorSetHide, actor_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::ActorSetHide, hide_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamCreate, team_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamCreate, leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamDestory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamDestory, team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamQuit, team_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamQuit, operator_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamKickMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamKickMember, team_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamKickMember, operator_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamKickMember, kick_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamInviteMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamInviteMember, team_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamInviteMember, operator_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamInviteMember, invitee_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptInvite, team_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptInvite, inviter_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptInvite, invitee_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptInvite, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamApplyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamApplyMember, applicant_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamApplyMember, respondent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptApply, applicant_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptApply, respondent_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAcceptApply, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamNewLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamNewLeader, team_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamNewLeader, operator_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamNewLeader, new_leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAddMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAddMember, team_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamAddMember, member_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamDelMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamDelMember, team_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamDelMember, member_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamMemberInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::TeamMemberInfoList, member_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildCreate, guild_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildCreate, leader_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildCreate, guild_name_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildCreate, leader_name_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildCreate, create_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildDestory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildDestory, guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildQuit, guild_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildQuit, operator_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildKickMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildKickMember, guild_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildKickMember, operator_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildKickMember, kick_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildInviteMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildInviteMember, guild_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildInviteMember, operator_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildInviteMember, invitee_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptInvite, guild_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptInvite, inviter_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptInvite, invitee_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptInvite, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildApplyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildApplyMember, applicant_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildApplyMember, respondent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptApply, applicant_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptApply, respondent_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAcceptApply, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildNewLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildNewLeader, guild_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildNewLeader, operator_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildNewLeader, new_leader_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildNewLeader, new_leader_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAddMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAddMember, guild_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildAddMember, member_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildDelMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildDelMember, guild_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildDelMember, member_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildMemberInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::GuildMemberInfoList, member_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SyncTaskPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SyncTaskPhase, player_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::SyncTaskPhase, task_phase_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::AddTaskPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::AddTaskPhase, player_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::AddTaskPhase, task_phase_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::RemoveTaskPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMSG::RemoveTaskPhase, player_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMSG::RemoveTaskPhase, task_phase_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ServerMSG::ServerSideMessageOptions)},
  { 6, -1, sizeof(::ServerMSG::ServiceCmd)},
  { 12, 19, sizeof(::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse)},
  { 21, -1, sizeof(::ServerMSG::ServiceHttpRequest)},
  { 28, -1, sizeof(::ServerMSG::ServiceHttpResponse)},
  { 37, -1, sizeof(::ServerMSG::MessageTransmit)},
  { 44, -1, sizeof(::ServerMSG::ServiceReady)},
  { 51, -1, sizeof(::ServerMSG::ServiceRegister)},
  { 58, -1, sizeof(::ServerMSG::SocketConnect)},
  { 64, -1, sizeof(::ServerMSG::SocketClose)},
  { 70, -1, sizeof(::ServerMSG::SocketChangeDest)},
  { 77, -1, sizeof(::ServerMSG::SocketAuth)},
  { 84, -1, sizeof(::ServerMSG::SocketLogin)},
  { 91, -1, sizeof(::ServerMSG::SocketStartAccept)},
  { 96, -1, sizeof(::ServerMSG::SocketStopAccept)},
  { 101, -1, sizeof(::ServerMSG::PlayerEnterZone)},
  { 112, -1, sizeof(::ServerMSG::PlayerChangeZone)},
  { 125, -1, sizeof(::ServerMSG::PlayerChangeZone_Data)},
  { 132, -1, sizeof(::ServerMSG::PlayerLogout)},
  { 139, -1, sizeof(::ServerMSG::SystemVarChange)},
  { 149, -1, sizeof(::ServerMSG::SceneCreate)},
  { 155, -1, sizeof(::ServerMSG::PhaseCreate)},
  { 162, -1, sizeof(::ServerMSG::PhaseDestory)},
  { 169, -1, sizeof(::ServerMSG::MonsterGen)},
  { 182, -1, sizeof(::ServerMSG::MonsterGenMulti)},
  { 197, -1, sizeof(::ServerMSG::MonsterDestory)},
  { 203, -1, sizeof(::ServerMSG::MonsterGenOnce)},
  { 211, -1, sizeof(::ServerMSG::ActiveGen)},
  { 219, -1, sizeof(::ServerMSG::KillGen)},
  { 226, -1, sizeof(::ServerMSG::ActorCreate)},
  { 250, -1, sizeof(::ServerMSG::ActorDestory)},
  { 257, -1, sizeof(::ServerMSG::ActorMove)},
  { 265, -1, sizeof(::ServerMSG::ActorFlyTo)},
  { 273, -1, sizeof(::ServerMSG::ActorCastSkill)},
  { 281, -1, sizeof(::ServerMSG::ActorCastSkill_Fail)},
  { 287, -1, sizeof(::ServerMSG::ActorSetHide)},
  { 294, -1, sizeof(::ServerMSG::TeamCreate)},
  { 301, -1, sizeof(::ServerMSG::TeamDestory)},
  { 307, -1, sizeof(::ServerMSG::TeamQuit)},
  { 314, -1, sizeof(::ServerMSG::TeamKickMember)},
  { 322, -1, sizeof(::ServerMSG::TeamInviteMember)},
  { 330, -1, sizeof(::ServerMSG::TeamAcceptInvite)},
  { 339, -1, sizeof(::ServerMSG::TeamApplyMember)},
  { 346, -1, sizeof(::ServerMSG::TeamAcceptApply)},
  { 354, -1, sizeof(::ServerMSG::TeamNewLeader)},
  { 362, -1, sizeof(::ServerMSG::TeamAddMember)},
  { 369, -1, sizeof(::ServerMSG::TeamDelMember)},
  { 376, -1, sizeof(::ServerMSG::TeamMemberInfoList)},
  { 382, -1, sizeof(::ServerMSG::GuildCreate)},
  { 392, -1, sizeof(::ServerMSG::GuildDestory)},
  { 398, -1, sizeof(::ServerMSG::GuildQuit)},
  { 405, -1, sizeof(::ServerMSG::GuildKickMember)},
  { 413, -1, sizeof(::ServerMSG::GuildInviteMember)},
  { 421, -1, sizeof(::ServerMSG::GuildAcceptInvite)},
  { 430, -1, sizeof(::ServerMSG::GuildApplyMember)},
  { 437, -1, sizeof(::ServerMSG::GuildAcceptApply)},
  { 445, -1, sizeof(::ServerMSG::GuildNewLeader)},
  { 454, -1, sizeof(::ServerMSG::GuildAddMember)},
  { 461, -1, sizeof(::ServerMSG::GuildDelMember)},
  { 468, -1, sizeof(::ServerMSG::GuildMemberInfoList)},
  { 474, -1, sizeof(::ServerMSG::SyncTaskPhase)},
  { 481, -1, sizeof(::ServerMSG::AddTaskPhase)},
  { 488, -1, sizeof(::ServerMSG::RemoveTaskPhase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ServerSideMessageOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ServiceCmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ServiceHttpRequest_KvmapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ServiceHttpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ServiceHttpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_MessageTransmit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ServiceReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ServiceRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SocketConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SocketClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SocketChangeDest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SocketAuth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SocketLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SocketStartAccept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SocketStopAccept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_PlayerEnterZone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_PlayerChangeZone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_PlayerChangeZone_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_PlayerLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SystemVarChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SceneCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_PhaseCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_PhaseDestory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_MonsterGen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_MonsterGenMulti_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_MonsterDestory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_MonsterGenOnce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ActiveGen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_KillGen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ActorCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ActorDestory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ActorMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ActorFlyTo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ActorCastSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ActorCastSkill_Fail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_ActorSetHide_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamDestory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamQuit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamKickMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamInviteMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamAcceptInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamApplyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamAcceptApply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamNewLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamAddMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamDelMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_TeamMemberInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildDestory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildQuit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildKickMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildInviteMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildAcceptInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildApplyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildAcceptApply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildNewLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildAddMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildDelMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_GuildMemberInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_SyncTaskPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_AddTaskPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServerMSG::_RemoveTaskPhase_default_instance_),
};

const char descriptor_table_protodef_server_5fmsg_2fserver_5fside_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034server_msg/server_side.proto\022\tServerMS"
  "G\032\023common/Common.proto\032 google/protobuf/"
  "descriptor.proto\"9\n\030ServerSideMessageOpt"
  "ions\022\035\n\002id\030\001 \001(\0162\021.ServerMSG.OMsgID\"#\n\nS"
  "erviceCmd\022\014\n\004cmds\030\001 \003(\t:\007\242\?\004\010\241\234\001\"\221\001\n\022Ser"
  "viceHttpRequest\022\013\n\003uid\030\001 \001(\004\0227\n\005kvmap\030\002 "
  "\003(\0132(.ServerMSG.ServiceHttpRequest.Kvmap"
  "Entry\032,\n\nKvmapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001:\007\242\?\004\010\242\234\001\"q\n\023ServiceHttpRespo"
  "nse\022\013\n\003uid\030\001 \001(\004\022\025\n\rresponse_code\030\002 \001(\005\022"
  "\027\n\017response_reason\030\003 \001(\t\022\024\n\014response_txt"
  "\030\004 \001(\014:\007\242\?\004\010\243\234\001\"I\n\017MessageTransmit\022\030\n\020ra"
  "w_message_head\030\003 \001(\014\022\023\n\013raw_message\030\004 \001("
  "\014:\007\242\?\004\010\247\234\001\":\n\014ServiceReady\022\022\n\nserverport"
  "\030\001 \001(\r\022\r\n\005ready\030\002 \001(\010:\007\242\?\004\010\252\234\001\"C\n\017Servic"
  "eRegister\022\022\n\nserverport\030\001 \001(\r\022\023\n\013update_"
  "time\030\002 \001(\004:\007\242\?\004\010\253\234\001\"$\n\rSocketConnect\022\n\n\002"
  "vs\030\001 \001(\004:\007\242\?\004\010\254\234\001\"\"\n\013SocketClose\022\n\n\002vs\030\001"
  " \001(\004:\007\242\?\004\010\255\234\001\"9\n\020SocketChangeDest\022\n\n\002vs\030"
  "\001 \001(\004\022\020\n\010destport\030\002 \001(\r:\007\242\?\004\010\256\234\001\"2\n\nSock"
  "etAuth\022\n\n\002vs\030\001 \001(\004\022\017\n\007open_id\030\002 \001(\014:\007\242\?\004"
  "\010\257\234\001\"3\n\013SocketLogin\022\n\n\002vs\030\001 \001(\004\022\017\n\007open_"
  "id\030\002 \001(\014:\007\242\?\004\010\262\234\001\"\034\n\021SocketStartAccept:\007"
  "\242\?\004\010\260\234\001\"\033\n\020SocketStopAccept:\007\242\?\004\010\261\234\001\"\200\001\n"
  "\017PlayerEnterZone\022\020\n\010idplayer\030\001 \001(\004\022\016\n\006so"
  "cket\030\002 \001(\004\022\030\n\020target_scene_idx\030\004 \001(\004\022\014\n\004"
  "posx\030\005 \001(\002\022\014\n\004posy\030\006 \001(\002\022\014\n\004face\030\007 \001(\002:\007"
  "\242\?\004\010\265\234\001\"\234\001\n\020PlayerChangeZone\022\020\n\010idplayer"
  "\030\001 \001(\004\022\016\n\006socket\030\002 \001(\004\022\016\n\006idzone\030\003 \001(\r\022\024"
  "\n\014target_scene\030\004 \001(\004\022\014\n\004posx\030\006 \001(\002\022\014\n\004po"
  "sy\030\007 \001(\002\022\r\n\005range\030\010 \001(\002\022\014\n\004face\030\t \001(\002:\007\242"
  "\?\004\010\266\234\001\"B\n\025PlayerChangeZone_Data\022\020\n\010idpla"
  "yer\030\001 \001(\004\022\016\n\006socket\030\002 \001(\004:\007\242\?\004\010\267\234\001\"9\n\014Pl"
  "ayerLogout\022\020\n\010idplayer\030\001 \001(\004\022\016\n\006socket\030\002"
  " \001(\004:\007\242\?\004\010\270\234\001\"\357\001\n\017SystemVarChange\022\016\n\006key"
  "idx\030\001 \001(\r\022\013\n\003idx\030\002 \001(\r\022\013\n\003val\030\003 \001(\r\022\013\n\003s"
  "tr\030\004 \001(\t\022<\n\004type\030\005 \001(\0162..ServerMSG.Syste"
  "mVarChange.SystemVarChangeType\"^\n\023System"
  "VarChangeType\022\017\n\013SVCT_CREATE\020\000\022\021\n\rSVCT_S"
  "ET_DATA\020\001\022\021\n\rSVCT_ADD_DATA\020\002\022\020\n\014SVCT_SET"
  "_STR\020\003:\007\242\?\004\010\276\234\001\"(\n\013SceneCreate\022\020\n\010scene_"
  "id\030\001 \001(\004:\007\242\?\004\010\277\234\001\":\n\013PhaseCreate\022\020\n\010scen"
  "e_id\030\001 \001(\004\022\020\n\010phase_id\030\002 \001(\004:\007\242\?\004\010\300\234\001\";\n"
  "\014PhaseDestory\022\020\n\010scene_id\030\001 \001(\004\022\020\n\010phase"
  "_id\030\002 \001(\004:\007\242\?\004\010\301\234\001\"\240\001\n\nMonsterGen\022\020\n\010sce"
  "ne_id\030\001 \001(\004\022\020\n\010phase_id\030\002 \001(\004\022\016\n\006gen_id\030"
  "\003 \001(\r\022\024\n\014monster_type\030\004 \001(\r\022\014\n\004posx\030\005 \001("
  "\002\022\014\n\004posy\030\006 \001(\002\022\017\n\007camp_id\030\007 \001(\r\022\022\n\nmons"
  "ter_id\030\010 \001(\r:\007\242\?\004\010\311\234\001\"\301\001\n\017MonsterGenMult"
  "i\022\020\n\010scene_id\030\001 \001(\004\022\020\n\010phase_id\030\002 \001(\004\022\016\n"
  "\006gen_id\030\003 \001(\r\022\024\n\014monster_type\030\004 \001(\r\022\014\n\004p"
  "osx\030\005 \001(\002\022\014\n\004posy\030\006 \001(\002\022\017\n\007camp_id\030\007 \001(\r"
  "\022\022\n\nmonster_id\030\010 \001(\r\022\013\n\003num\030\t \001(\r\022\r\n\005ran"
  "ge\030\n \001(\002:\007\242\?\004\010\316\234\001\"-\n\016MonsterDestory\022\022\n\nm"
  "onster_id\030\001 \003(\004:\007\242\?\004\010\312\234\001\"M\n\016MonsterGenOn"
  "ce\022\020\n\010scene_id\030\001 \001(\004\022\016\n\006gen_id\030\002 \001(\r\022\020\n\010"
  "phase_id\030\003 \001(\004:\007\242\?\004\010\315\234\001\"F\n\tActiveGen\022\020\n\010"
  "scene_id\030\001 \001(\004\022\016\n\006gen_id\030\002 \001(\r\022\016\n\006active"
  "\030\003 \001(\010:\007\242\?\004\010\313\234\001\"4\n\007KillGen\022\020\n\010scene_id\030\001"
  " \001(\004\022\016\n\006gen_id\030\002 \001(\r:\007\242\?\004\010\314\234\001\"\304\002\n\013ActorC"
  "reate\022\020\n\010actor_id\030\001 \001(\004\022\020\n\010scene_id\030\002 \001("
  "\004\022\014\n\004name\030\004 \001(\t\022\021\n\tactortype\030\005 \001(\r\022\020\n\010ba"
  "selook\030\006 \001(\r\022\014\n\004prof\030\007 \001(\r\022\013\n\003lev\030\010 \001(\r\022"
  "\016\n\006campid\030\t \001(\r\022\n\n\002hp\030\n \001(\r\022\r\n\005hpmax\030\013 \001"
  "(\r\022\n\n\002mp\030\014 \001(\r\022\r\n\005mpmax\030\r \001(\r\022\017\n\007movespd"
  "\030\016 \001(\r\022\017\n\007ownerid\030\017 \001(\004\022\014\n\004posx\030\020 \001(\002\022\014\n"
  "\004posy\030\021 \001(\002\022\014\n\004face\030\022 \001(\002\022\026\n\016monster_gen"
  "_id\030\024 \001(\r\022\020\n\010phase_id\030\025 \001(\004:\007\242\?\004\010\204\235\001\"7\n\014"
  "ActorDestory\022\020\n\010actor_id\030\001 \001(\004\022\014\n\004dead\030\002"
  " \001(\010:\007\242\?\004\010\205\235\001\"<\n\tActorMove\022\020\n\010actor_id\030\001"
  " \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002:\007\242\?\004\010\206\235\001\"=\n\nA"
  "ctorFlyTo\022\020\n\010actor_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t"
  "\n\001y\030\003 \001(\002:\007\242\?\004\010\215\235\001\"P\n\016ActorCastSkill\022\020\n\010"
  "actor_id\030\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\022\020\n\010ski"
  "ll_id\030\003 \001(\r:\007\242\?\004\010\207\235\001\"0\n\023ActorCastSkill_F"
  "ail\022\020\n\010actor_id\030\001 \001(\004:\007\242\?\004\010\210\235\001\"=\n\014ActorS"
  "etHide\022\020\n\010actor_id\030\001 \001(\004\022\022\n\nhide_count\030\002"
  " \001(\005:\007\242\?\004\010\211\235\001\"9\n\nTeamCreate\022\017\n\007team_id\030\001"
  " \001(\004\022\021\n\tleader_id\030\002 \001(\004:\007\242\?\004\010\216\235\001\"\'\n\013Team"
  "Destory\022\017\n\007team_id\030\001 \001(\004:\007\242\?\004\010\217\235\001\"9\n\010Tea"
  "mQuit\022\017\n\007team_id\030\001 \001(\004\022\023\n\013operator_id\030\002 "
  "\001(\004:\007\242\?\004\010\220\235\001\"P\n\016TeamKickMember\022\017\n\007team_i"
  "d\030\001 \001(\004\022\023\n\013operator_id\030\002 \001(\004\022\017\n\007kick_id\030"
  "\003 \001(\004:\007\242\?\004\010\221\235\001\"U\n\020TeamInviteMember\022\017\n\007te"
  "am_id\030\001 \001(\004\022\023\n\013operator_id\030\002 \001(\004\022\022\n\ninvi"
  "tee_id\030\003 \001(\004:\007\242\?\004\010\222\235\001\"d\n\020TeamAcceptInvit"
  "e\022\017\n\007team_id\030\001 \001(\004\022\022\n\ninviter_id\030\002 \001(\004\022\022"
  "\n\ninvitee_id\030\003 \001(\004\022\016\n\006result\030\004 \001(\010:\007\242\?\004\010"
  "\223\235\001\"G\n\017TeamApplyMember\022\024\n\014applicant_id\030\001"
  " \001(\004\022\025\n\rrespondent_id\030\002 \001(\004:\007\242\?\004\010\224\235\001\"W\n\017"
  "TeamAcceptApply\022\024\n\014applicant_id\030\001 \001(\004\022\025\n"
  "\rrespondent_id\030\002 \001(\004\022\016\n\006result\030\003 \001(\010:\007\242\?"
  "\004\010\225\235\001\"U\n\rTeamNewLeader\022\017\n\007team_id\030\001 \001(\004\022"
  "\023\n\013operator_id\030\002 \001(\004\022\025\n\rnew_leader_id\030\003 "
  "\001(\004:\007\242\?\004\010\226\235\001\"<\n\rTeamAddMember\022\017\n\007team_id"
  "\030\001 \001(\004\022\021\n\tmember_id\030\002 \001(\004:\007\242\?\004\010\230\235\001\"<\n\rTe"
  "amDelMember\022\017\n\007team_id\030\001 \001(\004\022\021\n\tmember_i"
  "d\030\002 \001(\004:\007\242\?\004\010\231\235\001\"C\n\022TeamMemberInfoList\022$"
  "\n\013member_list\030\001 \003(\0132\017.TeamMemberInfo:\007\242\?"
  "\004\010\227\235\001\"y\n\013GuildCreate\022\020\n\010guild_id\030\001 \001(\004\022\021"
  "\n\tleader_id\030\002 \001(\004\022\022\n\nguild_name\030\003 \001(\t\022\023\n"
  "\013leader_name\030\004 \001(\t\022\023\n\013create_time\030\005 \001(\r:"
  "\007\242\?\004\010\254\235\001\")\n\014GuildDestory\022\020\n\010guild_id\030\001 \001"
  "(\004:\007\242\?\004\010\255\235\001\";\n\tGuildQuit\022\020\n\010guild_id\030\001 \001"
  "(\004\022\023\n\013operator_id\030\002 \001(\004:\007\242\?\004\010\256\235\001\"R\n\017Guil"
  "dKickMember\022\020\n\010guild_id\030\001 \001(\004\022\023\n\013operato"
  "r_id\030\002 \001(\004\022\017\n\007kick_id\030\003 \001(\004:\007\242\?\004\010\257\235\001\"W\n\021"
  "GuildInviteMember\022\020\n\010guild_id\030\001 \001(\004\022\023\n\013o"
  "perator_id\030\002 \001(\004\022\022\n\ninvitee_id\030\003 \001(\004:\007\242\?"
  "\004\010\260\235\001\"f\n\021GuildAcceptInvite\022\020\n\010guild_id\030\001"
  " \001(\004\022\022\n\ninviter_id\030\002 \001(\004\022\022\n\ninvitee_id\030\003"
  " \001(\004\022\016\n\006result\030\004 \001(\010:\007\242\?\004\010\261\235\001\"H\n\020GuildAp"
  "plyMember\022\024\n\014applicant_id\030\001 \001(\004\022\025\n\rrespo"
  "ndent_id\030\002 \001(\004:\007\242\?\004\010\262\235\001\"X\n\020GuildAcceptAp"
  "ply\022\024\n\014applicant_id\030\001 \001(\004\022\025\n\rrespondent_"
  "id\030\002 \001(\004\022\016\n\006result\030\003 \001(\010:\007\242\?\004\010\263\235\001\"p\n\016Gui"
  "ldNewLeader\022\020\n\010guild_id\030\001 \001(\004\022\023\n\013operato"
  "r_id\030\002 \001(\004\022\025\n\rnew_leader_id\030\003 \001(\004\022\027\n\017new"
  "_leader_name\030\004 \001(\t:\007\242\?\004\010\264\235\001\">\n\016GuildAddM"
  "ember\022\020\n\010guild_id\030\001 \001(\004\022\021\n\tmember_id\030\002 \001"
  "(\004:\007\242\?\004\010\266\235\001\">\n\016GuildDelMember\022\020\n\010guild_i"
  "d\030\001 \001(\004\022\021\n\tmember_id\030\002 \001(\004:\007\242\?\004\010\267\235\001\"E\n\023G"
  "uildMemberInfoList\022%\n\013member_list\030\001 \003(\0132"
  "\020.GuildMemberInfo:\007\242\?\004\010\265\235\001\"B\n\rSyncTaskPh"
  "ase\022\021\n\tplayer_id\030\001 \001(\004\022\025\n\rtask_phase_id\030"
  "\002 \003(\004:\007\242\?\004\010\212\235\001\"A\n\014AddTaskPhase\022\021\n\tplayer"
  "_id\030\001 \001(\004\022\025\n\rtask_phase_id\030\002 \001(\004:\007\242\?\004\010\213\235"
  "\001\"D\n\017RemoveTaskPhase\022\021\n\tplayer_id\030\001 \001(\004\022"
  "\025\n\rtask_phase_id\030\002 \001(\004:\007\242\?\004\010\214\235\001*\317\r\n\006OMsg"
  "ID\022\017\n\013OMSGID_NONE\020\000\022\021\n\013MsgID_BEGIN\020\240\234\001\022\026"
  "\n\020MsgID_ServiceCmd\020\241\234\001\022\036\n\030MsgID_ServiceH"
  "ttpRequest\020\242\234\001\022\037\n\031MsgID_ServiceHttpRespo"
  "nse\020\243\234\001\022\033\n\025MsgID_MessageTransmit\020\247\234\001\022\030\n\022"
  "MsgID_ServiceReady\020\252\234\001\022\033\n\025MsgID_ServiceR"
  "egister\020\253\234\001\022\031\n\023MsgID_SocketConnect\020\254\234\001\022\027"
  "\n\021MsgID_SocketClose\020\255\234\001\022\034\n\026MsgID_SocketC"
  "hangeDest\020\256\234\001\022\026\n\020MsgID_SocketAuth\020\257\234\001\022\035\n"
  "\027MsgID_SocketStartAccept\020\260\234\001\022\034\n\026MsgID_So"
  "cketStopAccept\020\261\234\001\022\027\n\021MsgID_SocketLogin\020"
  "\262\234\001\022\033\n\025MsgID_PlayerEnterZone\020\265\234\001\022\034\n\026MsgI"
  "D_PlayerChangeZone\020\266\234\001\022!\n\033MsgID_PlayerCh"
  "angeZone_Data\020\267\234\001\022\030\n\022MsgID_PlayerLogout\020"
  "\270\234\001\022\033\n\025MsgID_SystemVarChange\020\276\234\001\022\027\n\021MsgI"
  "D_SceneCreate\020\277\234\001\022\027\n\021MsgID_PhaseCreate\020\300"
  "\234\001\022\030\n\022MsgID_PhaseDestory\020\301\234\001\022\026\n\020MsgID_Mo"
  "nsterGen\020\311\234\001\022\032\n\024MsgID_MonsterDestory\020\312\234\001"
  "\022\025\n\017MsgID_ActiveGen\020\313\234\001\022\023\n\rMsgID_KillGen"
  "\020\314\234\001\022\032\n\024MsgID_MonsterGenOnce\020\315\234\001\022\033\n\025MsgI"
  "D_MonsterGenMulti\020\316\234\001\022\027\n\021MsgID_ActorCrea"
  "te\020\204\235\001\022\030\n\022MsgID_ActorDestory\020\205\235\001\022\025\n\017MsgI"
  "D_ActorMove\020\206\235\001\022\032\n\024MsgID_ActorCastSkill\020"
  "\207\235\001\022\037\n\031MsgID_ActorCastSkill_Fail\020\210\235\001\022\030\n\022"
  "MsgID_ActorSetHide\020\211\235\001\022\031\n\023MsgID_SyncTask"
  "Phase\020\212\235\001\022\030\n\022MsgID_AddTaskPhase\020\213\235\001\022\033\n\025M"
  "sgID_RemoveTaskPhase\020\214\235\001\022\026\n\020MsgID_ActorF"
  "lyTo\020\215\235\001\022\026\n\020MsgID_TeamCreate\020\216\235\001\022\027\n\021MsgI"
  "D_TeamDestory\020\217\235\001\022\024\n\016MsgID_TeamQuit\020\220\235\001\022"
  "\032\n\024MsgID_TeamKickMember\020\221\235\001\022\034\n\026MsgID_Tea"
  "mInviteMember\020\222\235\001\022\034\n\026MsgID_TeamAcceptInv"
  "ite\020\223\235\001\022\033\n\025MsgID_TeamApplyMember\020\224\235\001\022\033\n\025"
  "MsgID_TeamAcceptApply\020\225\235\001\022\031\n\023MsgID_TeamN"
  "ewLeader\020\226\235\001\022\036\n\030MsgID_TeamMemberInfoList"
  "\020\227\235\001\022\031\n\023MsgID_TeamAddMember\020\230\235\001\022\031\n\023MsgID"
  "_TeamDelMember\020\231\235\001\022\027\n\021MsgID_GuildCreate\020"
  "\254\235\001\022\030\n\022MsgID_GuildDestory\020\255\235\001\022\025\n\017MsgID_G"
  "uildQuit\020\256\235\001\022\033\n\025MsgID_GuildKickMember\020\257\235"
  "\001\022\035\n\027MsgID_GuildInviteMember\020\260\235\001\022\035\n\027MsgI"
  "D_GuildAcceptInvite\020\261\235\001\022\034\n\026MsgID_GuildAp"
  "plyMember\020\262\235\001\022\034\n\026MsgID_GuildAcceptApply\020"
  "\263\235\001\022\032\n\024MsgID_GuildNewLeader\020\264\235\001\022\037\n\031MsgID"
  "_GuildMemberInfoList\020\265\235\001\022\032\n\024MsgID_GuildA"
  "ddMember\020\266\235\001\022\032\n\024MsgID_GuildDelMember\020\267\235\001"
  "\022\017\n\tMsgID_END\020\260\352\001:Y\n\nserver_cmd\022\037.google"
  ".protobuf.MessageOptions\030\364\007 \001(\0132#.Server"
  "MSG.ServerSideMessageOptionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_5fmsg_2fserver_5fside_2eproto_deps[2] = {
  &::descriptor_table_common_2fCommon_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_5fmsg_2fserver_5fside_2eproto_sccs[63] = {
  &scc_info_ActiveGen_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ActorCastSkill_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ActorCastSkill_Fail_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ActorCreate_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ActorDestory_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ActorFlyTo_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ActorMove_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ActorSetHide_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_AddTaskPhase_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildAcceptApply_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildAcceptInvite_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildAddMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildApplyMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildCreate_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildDelMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildDestory_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildInviteMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildKickMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildMemberInfoList_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildNewLeader_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_GuildQuit_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_KillGen_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_MessageTransmit_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_MonsterDestory_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_MonsterGen_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_MonsterGenMulti_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_MonsterGenOnce_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_PhaseCreate_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_PhaseDestory_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_PlayerChangeZone_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_PlayerChangeZone_Data_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_PlayerEnterZone_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_PlayerLogout_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_RemoveTaskPhase_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SceneCreate_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ServerSideMessageOptions_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ServiceCmd_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ServiceHttpRequest_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ServiceHttpRequest_KvmapEntry_DoNotUse_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ServiceHttpResponse_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ServiceReady_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_ServiceRegister_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SocketAuth_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SocketChangeDest_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SocketClose_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SocketConnect_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SocketLogin_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SocketStartAccept_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SocketStopAccept_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SyncTaskPhase_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_SystemVarChange_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamAcceptApply_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamAcceptInvite_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamAddMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamApplyMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamCreate_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamDelMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamDestory_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamInviteMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamKickMember_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamMemberInfoList_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamNewLeader_server_5fmsg_2fserver_5fside_2eproto.base,
  &scc_info_TeamQuit_server_5fmsg_2fserver_5fside_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_5fmsg_2fserver_5fside_2eproto_once;
static bool descriptor_table_server_5fmsg_2fserver_5fside_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fmsg_2fserver_5fside_2eproto = {
  &descriptor_table_server_5fmsg_2fserver_5fside_2eproto_initialized, descriptor_table_protodef_server_5fmsg_2fserver_5fside_2eproto, "server_msg/server_side.proto", 6996,
  &descriptor_table_server_5fmsg_2fserver_5fside_2eproto_once, descriptor_table_server_5fmsg_2fserver_5fside_2eproto_sccs, descriptor_table_server_5fmsg_2fserver_5fside_2eproto_deps, 63, 2,
  schemas, file_default_instances, TableStruct_server_5fmsg_2fserver_5fside_2eproto::offsets,
  file_level_metadata_server_5fmsg_2fserver_5fside_2eproto, 63, file_level_enum_descriptors_server_5fmsg_2fserver_5fside_2eproto, file_level_service_descriptors_server_5fmsg_2fserver_5fside_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_5fmsg_2fserver_5fside_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_5fmsg_2fserver_5fside_2eproto), true);
namespace ServerMSG {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemVarChange_SystemVarChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fmsg_2fserver_5fside_2eproto);
  return file_level_enum_descriptors_server_5fmsg_2fserver_5fside_2eproto[0];
}
bool SystemVarChange_SystemVarChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemVarChange_SystemVarChangeType SystemVarChange::SVCT_CREATE;
constexpr SystemVarChange_SystemVarChangeType SystemVarChange::SVCT_SET_DATA;
constexpr SystemVarChange_SystemVarChangeType SystemVarChange::SVCT_ADD_DATA;
constexpr SystemVarChange_SystemVarChangeType SystemVarChange::SVCT_SET_STR;
constexpr SystemVarChange_SystemVarChangeType SystemVarChange::SystemVarChangeType_MIN;
constexpr SystemVarChange_SystemVarChangeType SystemVarChange::SystemVarChangeType_MAX;
constexpr int SystemVarChange::SystemVarChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fmsg_2fserver_5fside_2eproto);
  return file_level_enum_descriptors_server_5fmsg_2fserver_5fside_2eproto[1];
}
bool OMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 20000:
    case 20001:
    case 20002:
    case 20003:
    case 20007:
    case 20010:
    case 20011:
    case 20012:
    case 20013:
    case 20014:
    case 20015:
    case 20016:
    case 20017:
    case 20018:
    case 20021:
    case 20022:
    case 20023:
    case 20024:
    case 20030:
    case 20031:
    case 20032:
    case 20033:
    case 20041:
    case 20042:
    case 20043:
    case 20044:
    case 20045:
    case 20046:
    case 20100:
    case 20101:
    case 20102:
    case 20103:
    case 20104:
    case 20105:
    case 20106:
    case 20107:
    case 20108:
    case 20109:
    case 20110:
    case 20111:
    case 20112:
    case 20113:
    case 20114:
    case 20115:
    case 20116:
    case 20117:
    case 20118:
    case 20119:
    case 20120:
    case 20121:
    case 20140:
    case 20141:
    case 20142:
    case 20143:
    case 20144:
    case 20145:
    case 20146:
    case 20147:
    case 20148:
    case 20149:
    case 20150:
    case 20151:
    case 30000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServerSideMessageOptions::InitAsDefaultInstance() {
}
class ServerSideMessageOptions::_Internal {
 public:
};

ServerSideMessageOptions::ServerSideMessageOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ServerSideMessageOptions)
}
ServerSideMessageOptions::ServerSideMessageOptions(const ServerSideMessageOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ServerSideMessageOptions)
}

void ServerSideMessageOptions::SharedCtor() {
  id_ = 0;
}

ServerSideMessageOptions::~ServerSideMessageOptions() {
  // @@protoc_insertion_point(destructor:ServerMSG.ServerSideMessageOptions)
  SharedDtor();
}

void ServerSideMessageOptions::SharedDtor() {
}

void ServerSideMessageOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerSideMessageOptions& ServerSideMessageOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerSideMessageOptions_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ServerSideMessageOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ServerSideMessageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

const char* ServerSideMessageOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ServerMSG.OMsgID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::ServerMSG::OMsgID>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerSideMessageOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ServerSideMessageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerMSG.OMsgID id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ServerSideMessageOptions)
  return target;
}

size_t ServerSideMessageOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ServerSideMessageOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerMSG.OMsgID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerSideMessageOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ServerSideMessageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerSideMessageOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerSideMessageOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ServerSideMessageOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ServerSideMessageOptions)
    MergeFrom(*source);
  }
}

void ServerSideMessageOptions::MergeFrom(const ServerSideMessageOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ServerSideMessageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ServerSideMessageOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ServerSideMessageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSideMessageOptions::CopyFrom(const ServerSideMessageOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ServerSideMessageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSideMessageOptions::IsInitialized() const {
  return true;
}

void ServerSideMessageOptions::InternalSwap(ServerSideMessageOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerSideMessageOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceCmd::InitAsDefaultInstance() {
}
class ServiceCmd::_Internal {
 public:
};

ServiceCmd::ServiceCmd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ServiceCmd)
}
ServiceCmd::ServiceCmd(const ServiceCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cmds_(from.cmds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ServiceCmd)
}

void ServiceCmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceCmd_server_5fmsg_2fserver_5fside_2eproto.base);
}

ServiceCmd::~ServiceCmd() {
  // @@protoc_insertion_point(destructor:ServerMSG.ServiceCmd)
  SharedDtor();
}

void ServiceCmd::SharedDtor() {
}

void ServiceCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceCmd& ServiceCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceCmd_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ServiceCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ServiceCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmds_.Clear();
  _internal_metadata_.Clear();
}

const char* ServiceCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string cmds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cmds();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMSG.ServiceCmd.cmds"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceCmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ServiceCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cmds = 1;
  for (int i = 0, n = this->_internal_cmds_size(); i < n; i++) {
    const auto& s = this->_internal_cmds(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMSG.ServiceCmd.cmds");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ServiceCmd)
  return target;
}

size_t ServiceCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ServiceCmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cmds = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cmds_.size());
  for (int i = 0, n = cmds_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cmds_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ServiceCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ServiceCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ServiceCmd)
    MergeFrom(*source);
  }
}

void ServiceCmd::MergeFrom(const ServiceCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ServiceCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmds_.MergeFrom(from.cmds_);
}

void ServiceCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ServiceCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceCmd::CopyFrom(const ServiceCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ServiceCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceCmd::IsInitialized() const {
  return true;
}

void ServiceCmd::InternalSwap(ServiceCmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cmds_.InternalSwap(&other->cmds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ServiceHttpRequest_KvmapEntry_DoNotUse::ServiceHttpRequest_KvmapEntry_DoNotUse() {}
ServiceHttpRequest_KvmapEntry_DoNotUse::ServiceHttpRequest_KvmapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServiceHttpRequest_KvmapEntry_DoNotUse::MergeFrom(const ServiceHttpRequest_KvmapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServiceHttpRequest_KvmapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ServiceHttpRequest_KvmapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ServiceHttpRequest::InitAsDefaultInstance() {
}
class ServiceHttpRequest::_Internal {
 public:
};

ServiceHttpRequest::ServiceHttpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ServiceHttpRequest)
}
ServiceHttpRequest::ServiceHttpRequest(const ServiceHttpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvmap_.MergeFrom(from.kvmap_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ServiceHttpRequest)
}

void ServiceHttpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceHttpRequest_server_5fmsg_2fserver_5fside_2eproto.base);
  uid_ = PROTOBUF_ULONGLONG(0);
}

ServiceHttpRequest::~ServiceHttpRequest() {
  // @@protoc_insertion_point(destructor:ServerMSG.ServiceHttpRequest)
  SharedDtor();
}

void ServiceHttpRequest::SharedDtor() {
}

void ServiceHttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceHttpRequest& ServiceHttpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceHttpRequest_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ServiceHttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ServiceHttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvmap_.Clear();
  uid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ServiceHttpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> kvmap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&kvmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceHttpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ServiceHttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // map<string, string> kvmap = 2;
  if (!this->_internal_kvmap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ServerMSG.ServiceHttpRequest.KvmapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ServerMSG.ServiceHttpRequest.KvmapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_kvmap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_kvmap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_kvmap().begin();
          it != this->_internal_kvmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ServiceHttpRequest_KvmapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_kvmap().begin();
          it != this->_internal_kvmap().end(); ++it) {
        target = ServiceHttpRequest_KvmapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ServiceHttpRequest)
  return target;
}

size_t ServiceHttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ServiceHttpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> kvmap = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kvmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_kvmap().begin();
      it != this->_internal_kvmap().end(); ++it) {
    total_size += ServiceHttpRequest_KvmapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceHttpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ServiceHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceHttpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceHttpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ServiceHttpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ServiceHttpRequest)
    MergeFrom(*source);
  }
}

void ServiceHttpRequest::MergeFrom(const ServiceHttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ServiceHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvmap_.MergeFrom(from.kvmap_);
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void ServiceHttpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ServiceHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceHttpRequest::CopyFrom(const ServiceHttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ServiceHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceHttpRequest::IsInitialized() const {
  return true;
}

void ServiceHttpRequest::InternalSwap(ServiceHttpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kvmap_.Swap(&other->kvmap_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceHttpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceHttpResponse::InitAsDefaultInstance() {
}
class ServiceHttpResponse::_Internal {
 public:
};

ServiceHttpResponse::ServiceHttpResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ServiceHttpResponse)
}
ServiceHttpResponse::ServiceHttpResponse(const ServiceHttpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_reason().empty()) {
    response_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_reason_);
  }
  response_txt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_txt().empty()) {
    response_txt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_txt_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_code_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(response_code_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ServiceHttpResponse)
}

void ServiceHttpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceHttpResponse_server_5fmsg_2fserver_5fside_2eproto.base);
  response_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_txt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(response_code_));
}

ServiceHttpResponse::~ServiceHttpResponse() {
  // @@protoc_insertion_point(destructor:ServerMSG.ServiceHttpResponse)
  SharedDtor();
}

void ServiceHttpResponse::SharedDtor() {
  response_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_txt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceHttpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceHttpResponse& ServiceHttpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceHttpResponse_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ServiceHttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ServiceHttpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_txt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_code_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(response_code_));
  _internal_metadata_.Clear();
}

const char* ServiceHttpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 response_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          response_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string response_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_response_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMSG.ServiceHttpResponse.response_reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes response_txt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_response_txt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceHttpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ServiceHttpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // int32 response_code = 2;
  if (this->response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_response_code(), target);
  }

  // string response_reason = 3;
  if (this->response_reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_reason().data(), static_cast<int>(this->_internal_response_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMSG.ServiceHttpResponse.response_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_response_reason(), target);
  }

  // bytes response_txt = 4;
  if (this->response_txt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_response_txt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ServiceHttpResponse)
  return target;
}

size_t ServiceHttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ServiceHttpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_reason = 3;
  if (this->response_reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_reason());
  }

  // bytes response_txt = 4;
  if (this->response_txt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_response_txt());
  }

  // uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());
  }

  // int32 response_code = 2;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_response_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceHttpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ServiceHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceHttpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceHttpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ServiceHttpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ServiceHttpResponse)
    MergeFrom(*source);
  }
}

void ServiceHttpResponse::MergeFrom(const ServiceHttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ServiceHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_reason().size() > 0) {

    response_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_reason_);
  }
  if (from.response_txt().size() > 0) {

    response_txt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_txt_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.response_code() != 0) {
    _internal_set_response_code(from._internal_response_code());
  }
}

void ServiceHttpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ServiceHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceHttpResponse::CopyFrom(const ServiceHttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ServiceHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceHttpResponse::IsInitialized() const {
  return true;
}

void ServiceHttpResponse::InternalSwap(ServiceHttpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_reason_.Swap(&other->response_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  response_txt_.Swap(&other->response_txt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(response_code_, other->response_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceHttpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageTransmit::InitAsDefaultInstance() {
}
class MessageTransmit::_Internal {
 public:
};

MessageTransmit::MessageTransmit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.MessageTransmit)
}
MessageTransmit::MessageTransmit(const MessageTransmit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_message_head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_message_head().empty()) {
    raw_message_head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_message_head_);
  }
  raw_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_message().empty()) {
    raw_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_message_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerMSG.MessageTransmit)
}

void MessageTransmit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageTransmit_server_5fmsg_2fserver_5fside_2eproto.base);
  raw_message_head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageTransmit::~MessageTransmit() {
  // @@protoc_insertion_point(destructor:ServerMSG.MessageTransmit)
  SharedDtor();
}

void MessageTransmit::SharedDtor() {
  raw_message_head_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageTransmit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageTransmit& MessageTransmit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageTransmit_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void MessageTransmit::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.MessageTransmit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_message_head_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MessageTransmit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes raw_message_head = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_raw_message_head();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes raw_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_raw_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageTransmit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.MessageTransmit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw_message_head = 3;
  if (this->raw_message_head().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_raw_message_head(), target);
  }

  // bytes raw_message = 4;
  if (this->raw_message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_raw_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.MessageTransmit)
  return target;
}

size_t MessageTransmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.MessageTransmit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw_message_head = 3;
  if (this->raw_message_head().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_message_head());
  }

  // bytes raw_message = 4;
  if (this->raw_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageTransmit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.MessageTransmit)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageTransmit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageTransmit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.MessageTransmit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.MessageTransmit)
    MergeFrom(*source);
  }
}

void MessageTransmit::MergeFrom(const MessageTransmit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.MessageTransmit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_message_head().size() > 0) {

    raw_message_head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_message_head_);
  }
  if (from.raw_message().size() > 0) {

    raw_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_message_);
  }
}

void MessageTransmit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.MessageTransmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageTransmit::CopyFrom(const MessageTransmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.MessageTransmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageTransmit::IsInitialized() const {
  return true;
}

void MessageTransmit::InternalSwap(MessageTransmit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_message_head_.Swap(&other->raw_message_head_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_message_.Swap(&other->raw_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageTransmit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceReady::InitAsDefaultInstance() {
}
class ServiceReady::_Internal {
 public:
};

ServiceReady::ServiceReady()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ServiceReady)
}
ServiceReady::ServiceReady(const ServiceReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serverport_, &from.serverport_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&serverport_)) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ServiceReady)
}

void ServiceReady::SharedCtor() {
  ::memset(&serverport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&serverport_)) + sizeof(ready_));
}

ServiceReady::~ServiceReady() {
  // @@protoc_insertion_point(destructor:ServerMSG.ServiceReady)
  SharedDtor();
}

void ServiceReady::SharedDtor() {
}

void ServiceReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceReady& ServiceReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceReady_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ServiceReady::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ServiceReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serverport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&serverport_)) + sizeof(ready_));
  _internal_metadata_.Clear();
}

const char* ServiceReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 serverport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ServiceReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverport = 1;
  if (this->serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverport(), target);
  }

  // bool ready = 2;
  if (this->ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ServiceReady)
  return target;
}

size_t ServiceReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ServiceReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 serverport = 1;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverport());
  }

  // bool ready = 2;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ServiceReady)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ServiceReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ServiceReady)
    MergeFrom(*source);
  }
}

void ServiceReady::MergeFrom(const ServiceReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ServiceReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverport() != 0) {
    _internal_set_serverport(from._internal_serverport());
  }
  if (from.ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
}

void ServiceReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ServiceReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReady::CopyFrom(const ServiceReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ServiceReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReady::IsInitialized() const {
  return true;
}

void ServiceReady::InternalSwap(ServiceReady* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(serverport_, other->serverport_);
  swap(ready_, other->ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRegister::InitAsDefaultInstance() {
}
class ServiceRegister::_Internal {
 public:
};

ServiceRegister::ServiceRegister()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ServiceRegister)
}
ServiceRegister::ServiceRegister(const ServiceRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&update_time_, &from.update_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverport_) -
    reinterpret_cast<char*>(&update_time_)) + sizeof(serverport_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ServiceRegister)
}

void ServiceRegister::SharedCtor() {
  ::memset(&update_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverport_) -
      reinterpret_cast<char*>(&update_time_)) + sizeof(serverport_));
}

ServiceRegister::~ServiceRegister() {
  // @@protoc_insertion_point(destructor:ServerMSG.ServiceRegister)
  SharedDtor();
}

void ServiceRegister::SharedDtor() {
}

void ServiceRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRegister& ServiceRegister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRegister_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ServiceRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ServiceRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&update_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverport_) -
      reinterpret_cast<char*>(&update_time_)) + sizeof(serverport_));
  _internal_metadata_.Clear();
}

const char* ServiceRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 serverport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 update_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ServiceRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverport = 1;
  if (this->serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverport(), target);
  }

  // uint64 update_time = 2;
  if (this->update_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_update_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ServiceRegister)
  return target;
}

size_t ServiceRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ServiceRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 update_time = 2;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_update_time());
  }

  // uint32 serverport = 1;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serverport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ServiceRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ServiceRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ServiceRegister)
    MergeFrom(*source);
  }
}

void ServiceRegister::MergeFrom(const ServiceRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ServiceRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_time() != 0) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (from.serverport() != 0) {
    _internal_set_serverport(from._internal_serverport());
  }
}

void ServiceRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ServiceRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRegister::CopyFrom(const ServiceRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ServiceRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRegister::IsInitialized() const {
  return true;
}

void ServiceRegister::InternalSwap(ServiceRegister* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(update_time_, other->update_time_);
  swap(serverport_, other->serverport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRegister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SocketConnect::InitAsDefaultInstance() {
}
class SocketConnect::_Internal {
 public:
};

SocketConnect::SocketConnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SocketConnect)
}
SocketConnect::SocketConnect(const SocketConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vs_ = from.vs_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SocketConnect)
}

void SocketConnect::SharedCtor() {
  vs_ = PROTOBUF_ULONGLONG(0);
}

SocketConnect::~SocketConnect() {
  // @@protoc_insertion_point(destructor:ServerMSG.SocketConnect)
  SharedDtor();
}

void SocketConnect::SharedDtor() {
}

void SocketConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocketConnect& SocketConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocketConnect_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SocketConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SocketConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vs_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SocketConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 vs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SocketConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 vs = 1;
  if (this->vs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_vs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SocketConnect)
  return target;
}

size_t SocketConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SocketConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 vs = 1;
  if (this->vs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SocketConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SocketConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SocketConnect)
    MergeFrom(*source);
  }
}

void SocketConnect::MergeFrom(const SocketConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SocketConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vs() != 0) {
    _internal_set_vs(from._internal_vs());
  }
}

void SocketConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SocketConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketConnect::CopyFrom(const SocketConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SocketConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketConnect::IsInitialized() const {
  return true;
}

void SocketConnect::InternalSwap(SocketConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vs_, other->vs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SocketClose::InitAsDefaultInstance() {
}
class SocketClose::_Internal {
 public:
};

SocketClose::SocketClose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SocketClose)
}
SocketClose::SocketClose(const SocketClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vs_ = from.vs_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SocketClose)
}

void SocketClose::SharedCtor() {
  vs_ = PROTOBUF_ULONGLONG(0);
}

SocketClose::~SocketClose() {
  // @@protoc_insertion_point(destructor:ServerMSG.SocketClose)
  SharedDtor();
}

void SocketClose::SharedDtor() {
}

void SocketClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocketClose& SocketClose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocketClose_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SocketClose::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SocketClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vs_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SocketClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 vs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketClose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SocketClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 vs = 1;
  if (this->vs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_vs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SocketClose)
  return target;
}

size_t SocketClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SocketClose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 vs = 1;
  if (this->vs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SocketClose)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SocketClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SocketClose)
    MergeFrom(*source);
  }
}

void SocketClose::MergeFrom(const SocketClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SocketClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vs() != 0) {
    _internal_set_vs(from._internal_vs());
  }
}

void SocketClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SocketClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketClose::CopyFrom(const SocketClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SocketClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketClose::IsInitialized() const {
  return true;
}

void SocketClose::InternalSwap(SocketClose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vs_, other->vs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SocketChangeDest::InitAsDefaultInstance() {
}
class SocketChangeDest::_Internal {
 public:
};

SocketChangeDest::SocketChangeDest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SocketChangeDest)
}
SocketChangeDest::SocketChangeDest(const SocketChangeDest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vs_, &from.vs_,
    static_cast<size_t>(reinterpret_cast<char*>(&destport_) -
    reinterpret_cast<char*>(&vs_)) + sizeof(destport_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SocketChangeDest)
}

void SocketChangeDest::SharedCtor() {
  ::memset(&vs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destport_) -
      reinterpret_cast<char*>(&vs_)) + sizeof(destport_));
}

SocketChangeDest::~SocketChangeDest() {
  // @@protoc_insertion_point(destructor:ServerMSG.SocketChangeDest)
  SharedDtor();
}

void SocketChangeDest::SharedDtor() {
}

void SocketChangeDest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocketChangeDest& SocketChangeDest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocketChangeDest_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SocketChangeDest::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SocketChangeDest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destport_) -
      reinterpret_cast<char*>(&vs_)) + sizeof(destport_));
  _internal_metadata_.Clear();
}

const char* SocketChangeDest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 vs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 destport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          destport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketChangeDest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SocketChangeDest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 vs = 1;
  if (this->vs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_vs(), target);
  }

  // uint32 destport = 2;
  if (this->destport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_destport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SocketChangeDest)
  return target;
}

size_t SocketChangeDest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SocketChangeDest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 vs = 1;
  if (this->vs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vs());
  }

  // uint32 destport = 2;
  if (this->destport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_destport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketChangeDest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SocketChangeDest)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketChangeDest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketChangeDest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SocketChangeDest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SocketChangeDest)
    MergeFrom(*source);
  }
}

void SocketChangeDest::MergeFrom(const SocketChangeDest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SocketChangeDest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vs() != 0) {
    _internal_set_vs(from._internal_vs());
  }
  if (from.destport() != 0) {
    _internal_set_destport(from._internal_destport());
  }
}

void SocketChangeDest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SocketChangeDest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketChangeDest::CopyFrom(const SocketChangeDest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SocketChangeDest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketChangeDest::IsInitialized() const {
  return true;
}

void SocketChangeDest::InternalSwap(SocketChangeDest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vs_, other->vs_);
  swap(destport_, other->destport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketChangeDest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SocketAuth::InitAsDefaultInstance() {
}
class SocketAuth::_Internal {
 public:
};

SocketAuth::SocketAuth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SocketAuth)
}
SocketAuth::SocketAuth(const SocketAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  open_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_open_id().empty()) {
    open_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.open_id_);
  }
  vs_ = from.vs_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SocketAuth)
}

void SocketAuth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SocketAuth_server_5fmsg_2fserver_5fside_2eproto.base);
  open_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vs_ = PROTOBUF_ULONGLONG(0);
}

SocketAuth::~SocketAuth() {
  // @@protoc_insertion_point(destructor:ServerMSG.SocketAuth)
  SharedDtor();
}

void SocketAuth::SharedDtor() {
  open_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SocketAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocketAuth& SocketAuth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocketAuth_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SocketAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SocketAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vs_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SocketAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 vs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes open_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_open_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketAuth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SocketAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 vs = 1;
  if (this->vs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_vs(), target);
  }

  // bytes open_id = 2;
  if (this->open_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_open_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SocketAuth)
  return target;
}

size_t SocketAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SocketAuth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes open_id = 2;
  if (this->open_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_open_id());
  }

  // uint64 vs = 1;
  if (this->vs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketAuth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SocketAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketAuth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SocketAuth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SocketAuth)
    MergeFrom(*source);
  }
}

void SocketAuth::MergeFrom(const SocketAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SocketAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open_id().size() > 0) {

    open_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.open_id_);
  }
  if (from.vs() != 0) {
    _internal_set_vs(from._internal_vs());
  }
}

void SocketAuth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SocketAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketAuth::CopyFrom(const SocketAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SocketAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketAuth::IsInitialized() const {
  return true;
}

void SocketAuth::InternalSwap(SocketAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  open_id_.Swap(&other->open_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vs_, other->vs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketAuth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SocketLogin::InitAsDefaultInstance() {
}
class SocketLogin::_Internal {
 public:
};

SocketLogin::SocketLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SocketLogin)
}
SocketLogin::SocketLogin(const SocketLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  open_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_open_id().empty()) {
    open_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.open_id_);
  }
  vs_ = from.vs_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SocketLogin)
}

void SocketLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SocketLogin_server_5fmsg_2fserver_5fside_2eproto.base);
  open_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vs_ = PROTOBUF_ULONGLONG(0);
}

SocketLogin::~SocketLogin() {
  // @@protoc_insertion_point(destructor:ServerMSG.SocketLogin)
  SharedDtor();
}

void SocketLogin::SharedDtor() {
  open_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SocketLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocketLogin& SocketLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocketLogin_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SocketLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SocketLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vs_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SocketLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 vs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes open_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_open_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SocketLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 vs = 1;
  if (this->vs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_vs(), target);
  }

  // bytes open_id = 2;
  if (this->open_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_open_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SocketLogin)
  return target;
}

size_t SocketLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SocketLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes open_id = 2;
  if (this->open_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_open_id());
  }

  // uint64 vs = 1;
  if (this->vs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SocketLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SocketLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SocketLogin)
    MergeFrom(*source);
  }
}

void SocketLogin::MergeFrom(const SocketLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SocketLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open_id().size() > 0) {

    open_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.open_id_);
  }
  if (from.vs() != 0) {
    _internal_set_vs(from._internal_vs());
  }
}

void SocketLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SocketLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketLogin::CopyFrom(const SocketLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SocketLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketLogin::IsInitialized() const {
  return true;
}

void SocketLogin::InternalSwap(SocketLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  open_id_.Swap(&other->open_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vs_, other->vs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SocketStartAccept::InitAsDefaultInstance() {
}
class SocketStartAccept::_Internal {
 public:
};

SocketStartAccept::SocketStartAccept()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SocketStartAccept)
}
SocketStartAccept::SocketStartAccept(const SocketStartAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SocketStartAccept)
}

void SocketStartAccept::SharedCtor() {
}

SocketStartAccept::~SocketStartAccept() {
  // @@protoc_insertion_point(destructor:ServerMSG.SocketStartAccept)
  SharedDtor();
}

void SocketStartAccept::SharedDtor() {
}

void SocketStartAccept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocketStartAccept& SocketStartAccept::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocketStartAccept_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SocketStartAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SocketStartAccept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SocketStartAccept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketStartAccept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SocketStartAccept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SocketStartAccept)
  return target;
}

size_t SocketStartAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SocketStartAccept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketStartAccept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SocketStartAccept)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketStartAccept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketStartAccept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SocketStartAccept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SocketStartAccept)
    MergeFrom(*source);
  }
}

void SocketStartAccept::MergeFrom(const SocketStartAccept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SocketStartAccept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SocketStartAccept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SocketStartAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketStartAccept::CopyFrom(const SocketStartAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SocketStartAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketStartAccept::IsInitialized() const {
  return true;
}

void SocketStartAccept::InternalSwap(SocketStartAccept* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketStartAccept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SocketStopAccept::InitAsDefaultInstance() {
}
class SocketStopAccept::_Internal {
 public:
};

SocketStopAccept::SocketStopAccept()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SocketStopAccept)
}
SocketStopAccept::SocketStopAccept(const SocketStopAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SocketStopAccept)
}

void SocketStopAccept::SharedCtor() {
}

SocketStopAccept::~SocketStopAccept() {
  // @@protoc_insertion_point(destructor:ServerMSG.SocketStopAccept)
  SharedDtor();
}

void SocketStopAccept::SharedDtor() {
}

void SocketStopAccept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocketStopAccept& SocketStopAccept::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocketStopAccept_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SocketStopAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SocketStopAccept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SocketStopAccept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketStopAccept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SocketStopAccept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SocketStopAccept)
  return target;
}

size_t SocketStopAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SocketStopAccept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketStopAccept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SocketStopAccept)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketStopAccept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketStopAccept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SocketStopAccept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SocketStopAccept)
    MergeFrom(*source);
  }
}

void SocketStopAccept::MergeFrom(const SocketStopAccept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SocketStopAccept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SocketStopAccept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SocketStopAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketStopAccept::CopyFrom(const SocketStopAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SocketStopAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketStopAccept::IsInitialized() const {
  return true;
}

void SocketStopAccept::InternalSwap(SocketStopAccept* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketStopAccept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerEnterZone::InitAsDefaultInstance() {
}
class PlayerEnterZone::_Internal {
 public:
};

PlayerEnterZone::PlayerEnterZone()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.PlayerEnterZone)
}
PlayerEnterZone::PlayerEnterZone(const PlayerEnterZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idplayer_, &from.idplayer_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&idplayer_)) + sizeof(face_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.PlayerEnterZone)
}

void PlayerEnterZone::SharedCtor() {
  ::memset(&idplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&idplayer_)) + sizeof(face_));
}

PlayerEnterZone::~PlayerEnterZone() {
  // @@protoc_insertion_point(destructor:ServerMSG.PlayerEnterZone)
  SharedDtor();
}

void PlayerEnterZone::SharedDtor() {
}

void PlayerEnterZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerEnterZone& PlayerEnterZone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerEnterZone_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void PlayerEnterZone::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.PlayerEnterZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&idplayer_)) + sizeof(face_));
  _internal_metadata_.Clear();
}

const char* PlayerEnterZone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 idplayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_scene_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_scene_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float posx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float posy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float face = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerEnterZone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.PlayerEnterZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 idplayer = 1;
  if (this->idplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_idplayer(), target);
  }

  // uint64 socket = 2;
  if (this->socket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_socket(), target);
  }

  // uint64 target_scene_idx = 4;
  if (this->target_scene_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_target_scene_idx(), target);
  }

  // float posx = 5;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_posx(), target);
  }

  // float posy = 6;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_posy(), target);
  }

  // float face = 7;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_face(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.PlayerEnterZone)
  return target;
}

size_t PlayerEnterZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.PlayerEnterZone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 idplayer = 1;
  if (this->idplayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idplayer());
  }

  // uint64 socket = 2;
  if (this->socket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_socket());
  }

  // uint64 target_scene_idx = 4;
  if (this->target_scene_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_scene_idx());
  }

  // float posx = 5;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    total_size += 1 + 4;
  }

  // float posy = 6;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    total_size += 1 + 4;
  }

  // float face = 7;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEnterZone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.PlayerEnterZone)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEnterZone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerEnterZone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.PlayerEnterZone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.PlayerEnterZone)
    MergeFrom(*source);
  }
}

void PlayerEnterZone::MergeFrom(const PlayerEnterZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.PlayerEnterZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idplayer() != 0) {
    _internal_set_idplayer(from._internal_idplayer());
  }
  if (from.socket() != 0) {
    _internal_set_socket(from._internal_socket());
  }
  if (from.target_scene_idx() != 0) {
    _internal_set_target_scene_idx(from._internal_target_scene_idx());
  }
  if (!(from.posx() <= 0 && from.posx() >= 0)) {
    _internal_set_posx(from._internal_posx());
  }
  if (!(from.posy() <= 0 && from.posy() >= 0)) {
    _internal_set_posy(from._internal_posy());
  }
  if (!(from.face() <= 0 && from.face() >= 0)) {
    _internal_set_face(from._internal_face());
  }
}

void PlayerEnterZone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.PlayerEnterZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterZone::CopyFrom(const PlayerEnterZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.PlayerEnterZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterZone::IsInitialized() const {
  return true;
}

void PlayerEnterZone::InternalSwap(PlayerEnterZone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idplayer_, other->idplayer_);
  swap(socket_, other->socket_);
  swap(target_scene_idx_, other->target_scene_idx_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(face_, other->face_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerEnterZone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerChangeZone::InitAsDefaultInstance() {
}
class PlayerChangeZone::_Internal {
 public:
};

PlayerChangeZone::PlayerChangeZone()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.PlayerChangeZone)
}
PlayerChangeZone::PlayerChangeZone(const PlayerChangeZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idplayer_, &from.idplayer_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_) -
    reinterpret_cast<char*>(&idplayer_)) + sizeof(face_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.PlayerChangeZone)
}

void PlayerChangeZone::SharedCtor() {
  ::memset(&idplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&idplayer_)) + sizeof(face_));
}

PlayerChangeZone::~PlayerChangeZone() {
  // @@protoc_insertion_point(destructor:ServerMSG.PlayerChangeZone)
  SharedDtor();
}

void PlayerChangeZone::SharedDtor() {
}

void PlayerChangeZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerChangeZone& PlayerChangeZone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerChangeZone_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void PlayerChangeZone::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.PlayerChangeZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_) -
      reinterpret_cast<char*>(&idplayer_)) + sizeof(face_));
  _internal_metadata_.Clear();
}

const char* PlayerChangeZone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 idplayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idzone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idzone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_scene = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float posx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float posy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float face = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerChangeZone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.PlayerChangeZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 idplayer = 1;
  if (this->idplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_idplayer(), target);
  }

  // uint64 socket = 2;
  if (this->socket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_socket(), target);
  }

  // uint32 idzone = 3;
  if (this->idzone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_idzone(), target);
  }

  // uint64 target_scene = 4;
  if (this->target_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_target_scene(), target);
  }

  // float posx = 6;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_posx(), target);
  }

  // float posy = 7;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_posy(), target);
  }

  // float range = 8;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_range(), target);
  }

  // float face = 9;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_face(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.PlayerChangeZone)
  return target;
}

size_t PlayerChangeZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.PlayerChangeZone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 idplayer = 1;
  if (this->idplayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idplayer());
  }

  // uint64 socket = 2;
  if (this->socket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_socket());
  }

  // uint64 target_scene = 4;
  if (this->target_scene() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_scene());
  }

  // uint32 idzone = 3;
  if (this->idzone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idzone());
  }

  // float posx = 6;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    total_size += 1 + 4;
  }

  // float posy = 7;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    total_size += 1 + 4;
  }

  // float range = 8;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 4;
  }

  // float face = 9;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerChangeZone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.PlayerChangeZone)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerChangeZone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerChangeZone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.PlayerChangeZone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.PlayerChangeZone)
    MergeFrom(*source);
  }
}

void PlayerChangeZone::MergeFrom(const PlayerChangeZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.PlayerChangeZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idplayer() != 0) {
    _internal_set_idplayer(from._internal_idplayer());
  }
  if (from.socket() != 0) {
    _internal_set_socket(from._internal_socket());
  }
  if (from.target_scene() != 0) {
    _internal_set_target_scene(from._internal_target_scene());
  }
  if (from.idzone() != 0) {
    _internal_set_idzone(from._internal_idzone());
  }
  if (!(from.posx() <= 0 && from.posx() >= 0)) {
    _internal_set_posx(from._internal_posx());
  }
  if (!(from.posy() <= 0 && from.posy() >= 0)) {
    _internal_set_posy(from._internal_posy());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
  if (!(from.face() <= 0 && from.face() >= 0)) {
    _internal_set_face(from._internal_face());
  }
}

void PlayerChangeZone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.PlayerChangeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChangeZone::CopyFrom(const PlayerChangeZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.PlayerChangeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChangeZone::IsInitialized() const {
  return true;
}

void PlayerChangeZone::InternalSwap(PlayerChangeZone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idplayer_, other->idplayer_);
  swap(socket_, other->socket_);
  swap(target_scene_, other->target_scene_);
  swap(idzone_, other->idzone_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(range_, other->range_);
  swap(face_, other->face_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerChangeZone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerChangeZone_Data::InitAsDefaultInstance() {
}
class PlayerChangeZone_Data::_Internal {
 public:
};

PlayerChangeZone_Data::PlayerChangeZone_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.PlayerChangeZone_Data)
}
PlayerChangeZone_Data::PlayerChangeZone_Data(const PlayerChangeZone_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idplayer_, &from.idplayer_,
    static_cast<size_t>(reinterpret_cast<char*>(&socket_) -
    reinterpret_cast<char*>(&idplayer_)) + sizeof(socket_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.PlayerChangeZone_Data)
}

void PlayerChangeZone_Data::SharedCtor() {
  ::memset(&idplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&idplayer_)) + sizeof(socket_));
}

PlayerChangeZone_Data::~PlayerChangeZone_Data() {
  // @@protoc_insertion_point(destructor:ServerMSG.PlayerChangeZone_Data)
  SharedDtor();
}

void PlayerChangeZone_Data::SharedDtor() {
}

void PlayerChangeZone_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerChangeZone_Data& PlayerChangeZone_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerChangeZone_Data_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void PlayerChangeZone_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.PlayerChangeZone_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&idplayer_)) + sizeof(socket_));
  _internal_metadata_.Clear();
}

const char* PlayerChangeZone_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 idplayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerChangeZone_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.PlayerChangeZone_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 idplayer = 1;
  if (this->idplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_idplayer(), target);
  }

  // uint64 socket = 2;
  if (this->socket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_socket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.PlayerChangeZone_Data)
  return target;
}

size_t PlayerChangeZone_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.PlayerChangeZone_Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 idplayer = 1;
  if (this->idplayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idplayer());
  }

  // uint64 socket = 2;
  if (this->socket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_socket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerChangeZone_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.PlayerChangeZone_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerChangeZone_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerChangeZone_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.PlayerChangeZone_Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.PlayerChangeZone_Data)
    MergeFrom(*source);
  }
}

void PlayerChangeZone_Data::MergeFrom(const PlayerChangeZone_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.PlayerChangeZone_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idplayer() != 0) {
    _internal_set_idplayer(from._internal_idplayer());
  }
  if (from.socket() != 0) {
    _internal_set_socket(from._internal_socket());
  }
}

void PlayerChangeZone_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.PlayerChangeZone_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChangeZone_Data::CopyFrom(const PlayerChangeZone_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.PlayerChangeZone_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChangeZone_Data::IsInitialized() const {
  return true;
}

void PlayerChangeZone_Data::InternalSwap(PlayerChangeZone_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idplayer_, other->idplayer_);
  swap(socket_, other->socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerChangeZone_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerLogout::InitAsDefaultInstance() {
}
class PlayerLogout::_Internal {
 public:
};

PlayerLogout::PlayerLogout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.PlayerLogout)
}
PlayerLogout::PlayerLogout(const PlayerLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idplayer_, &from.idplayer_,
    static_cast<size_t>(reinterpret_cast<char*>(&socket_) -
    reinterpret_cast<char*>(&idplayer_)) + sizeof(socket_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.PlayerLogout)
}

void PlayerLogout::SharedCtor() {
  ::memset(&idplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&idplayer_)) + sizeof(socket_));
}

PlayerLogout::~PlayerLogout() {
  // @@protoc_insertion_point(destructor:ServerMSG.PlayerLogout)
  SharedDtor();
}

void PlayerLogout::SharedDtor() {
}

void PlayerLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLogout& PlayerLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerLogout_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void PlayerLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.PlayerLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&idplayer_)) + sizeof(socket_));
  _internal_metadata_.Clear();
}

const char* PlayerLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 idplayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.PlayerLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 idplayer = 1;
  if (this->idplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_idplayer(), target);
  }

  // uint64 socket = 2;
  if (this->socket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_socket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.PlayerLogout)
  return target;
}

size_t PlayerLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.PlayerLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 idplayer = 1;
  if (this->idplayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idplayer());
  }

  // uint64 socket = 2;
  if (this->socket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_socket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.PlayerLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.PlayerLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.PlayerLogout)
    MergeFrom(*source);
  }
}

void PlayerLogout::MergeFrom(const PlayerLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.PlayerLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idplayer() != 0) {
    _internal_set_idplayer(from._internal_idplayer());
  }
  if (from.socket() != 0) {
    _internal_set_socket(from._internal_socket());
  }
}

void PlayerLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.PlayerLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLogout::CopyFrom(const PlayerLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.PlayerLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLogout::IsInitialized() const {
  return true;
}

void PlayerLogout::InternalSwap(PlayerLogout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idplayer_, other->idplayer_);
  swap(socket_, other->socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SystemVarChange::InitAsDefaultInstance() {
}
class SystemVarChange::_Internal {
 public:
};

SystemVarChange::SystemVarChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SystemVarChange)
}
SystemVarChange::SystemVarChange(const SystemVarChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str().empty()) {
    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  ::memcpy(&keyidx_, &from.keyidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&keyidx_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SystemVarChange)
}

void SystemVarChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemVarChange_server_5fmsg_2fserver_5fside_2eproto.base);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&keyidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&keyidx_)) + sizeof(type_));
}

SystemVarChange::~SystemVarChange() {
  // @@protoc_insertion_point(destructor:ServerMSG.SystemVarChange)
  SharedDtor();
}

void SystemVarChange::SharedDtor() {
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemVarChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemVarChange& SystemVarChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemVarChange_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SystemVarChange::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SystemVarChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&keyidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&keyidx_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* SystemVarChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 keyidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMSG.SystemVarChange.str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerMSG.SystemVarChange.SystemVarChangeType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ServerMSG::SystemVarChange_SystemVarChangeType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemVarChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SystemVarChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyidx(), target);
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idx(), target);
  }

  // uint32 val = 3;
  if (this->val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_val(), target);
  }

  // string str = 4;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMSG.SystemVarChange.str");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_str(), target);
  }

  // .ServerMSG.SystemVarChange.SystemVarChangeType type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SystemVarChange)
  return target;
}

size_t SystemVarChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SystemVarChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 4;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // uint32 keyidx = 1;
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyidx());
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint32 val = 3;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_val());
  }

  // .ServerMSG.SystemVarChange.SystemVarChangeType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemVarChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SystemVarChange)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemVarChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemVarChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SystemVarChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SystemVarChange)
    MergeFrom(*source);
  }
}

void SystemVarChange::MergeFrom(const SystemVarChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SystemVarChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.keyidx() != 0) {
    _internal_set_keyidx(from._internal_keyidx());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.val() != 0) {
    _internal_set_val(from._internal_val());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SystemVarChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SystemVarChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemVarChange::CopyFrom(const SystemVarChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SystemVarChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemVarChange::IsInitialized() const {
  return true;
}

void SystemVarChange::InternalSwap(SystemVarChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(keyidx_, other->keyidx_);
  swap(idx_, other->idx_);
  swap(val_, other->val_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemVarChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneCreate::InitAsDefaultInstance() {
}
class SceneCreate::_Internal {
 public:
};

SceneCreate::SceneCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SceneCreate)
}
SceneCreate::SceneCreate(const SceneCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SceneCreate)
}

void SceneCreate::SharedCtor() {
  scene_id_ = PROTOBUF_ULONGLONG(0);
}

SceneCreate::~SceneCreate() {
  // @@protoc_insertion_point(destructor:ServerMSG.SceneCreate)
  SharedDtor();
}

void SceneCreate::SharedDtor() {
}

void SceneCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneCreate& SceneCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneCreate_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SceneCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SceneCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SceneCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SceneCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SceneCreate)
  return target;
}

size_t SceneCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SceneCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SceneCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SceneCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SceneCreate)
    MergeFrom(*source);
  }
}

void SceneCreate::MergeFrom(const SceneCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SceneCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void SceneCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SceneCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneCreate::CopyFrom(const SceneCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SceneCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneCreate::IsInitialized() const {
  return true;
}

void SceneCreate::InternalSwap(SceneCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_id_, other->scene_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhaseCreate::InitAsDefaultInstance() {
}
class PhaseCreate::_Internal {
 public:
};

PhaseCreate::PhaseCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.PhaseCreate)
}
PhaseCreate::PhaseCreate(const PhaseCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.PhaseCreate)
}

void PhaseCreate::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(phase_id_));
}

PhaseCreate::~PhaseCreate() {
  // @@protoc_insertion_point(destructor:ServerMSG.PhaseCreate)
  SharedDtor();
}

void PhaseCreate::SharedDtor() {
}

void PhaseCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhaseCreate& PhaseCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhaseCreate_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void PhaseCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.PhaseCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(phase_id_));
  _internal_metadata_.Clear();
}

const char* PhaseCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.PhaseCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 phase_id = 2;
  if (this->phase_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.PhaseCreate)
  return target;
}

size_t PhaseCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.PhaseCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  // uint64 phase_id = 2;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_phase_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.PhaseCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.PhaseCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.PhaseCreate)
    MergeFrom(*source);
  }
}

void PhaseCreate::MergeFrom(const PhaseCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.PhaseCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
}

void PhaseCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.PhaseCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseCreate::CopyFrom(const PhaseCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.PhaseCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseCreate::IsInitialized() const {
  return true;
}

void PhaseCreate::InternalSwap(PhaseCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_id_, other->scene_id_);
  swap(phase_id_, other->phase_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhaseDestory::InitAsDefaultInstance() {
}
class PhaseDestory::_Internal {
 public:
};

PhaseDestory::PhaseDestory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.PhaseDestory)
}
PhaseDestory::PhaseDestory(const PhaseDestory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.PhaseDestory)
}

void PhaseDestory::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(phase_id_));
}

PhaseDestory::~PhaseDestory() {
  // @@protoc_insertion_point(destructor:ServerMSG.PhaseDestory)
  SharedDtor();
}

void PhaseDestory::SharedDtor() {
}

void PhaseDestory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhaseDestory& PhaseDestory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhaseDestory_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void PhaseDestory::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.PhaseDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(phase_id_));
  _internal_metadata_.Clear();
}

const char* PhaseDestory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseDestory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.PhaseDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 phase_id = 2;
  if (this->phase_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.PhaseDestory)
  return target;
}

size_t PhaseDestory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.PhaseDestory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  // uint64 phase_id = 2;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_phase_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseDestory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.PhaseDestory)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseDestory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseDestory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.PhaseDestory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.PhaseDestory)
    MergeFrom(*source);
  }
}

void PhaseDestory::MergeFrom(const PhaseDestory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.PhaseDestory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
}

void PhaseDestory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.PhaseDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseDestory::CopyFrom(const PhaseDestory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.PhaseDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseDestory::IsInitialized() const {
  return true;
}

void PhaseDestory::InternalSwap(PhaseDestory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_id_, other->scene_id_);
  swap(phase_id_, other->phase_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseDestory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonsterGen::InitAsDefaultInstance() {
}
class MonsterGen::_Internal {
 public:
};

MonsterGen::MonsterGen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.MonsterGen)
}
MonsterGen::MonsterGen(const MonsterGen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&monster_id_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(monster_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.MonsterGen)
}

void MonsterGen::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(monster_id_));
}

MonsterGen::~MonsterGen() {
  // @@protoc_insertion_point(destructor:ServerMSG.MonsterGen)
  SharedDtor();
}

void MonsterGen::SharedDtor() {
}

void MonsterGen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonsterGen& MonsterGen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonsterGen_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void MonsterGen::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.MonsterGen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(monster_id_));
  _internal_metadata_.Clear();
}

const char* MonsterGen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gen_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gen_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 monster_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          monster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float posx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float posy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 camp_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          camp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 monster_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          monster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonsterGen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.MonsterGen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 phase_id = 2;
  if (this->phase_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_phase_id(), target);
  }

  // uint32 gen_id = 3;
  if (this->gen_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gen_id(), target);
  }

  // uint32 monster_type = 4;
  if (this->monster_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_monster_type(), target);
  }

  // float posx = 5;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_posx(), target);
  }

  // float posy = 6;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_posy(), target);
  }

  // uint32 camp_id = 7;
  if (this->camp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_camp_id(), target);
  }

  // uint32 monster_id = 8;
  if (this->monster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_monster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.MonsterGen)
  return target;
}

size_t MonsterGen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.MonsterGen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  // uint64 phase_id = 2;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_phase_id());
  }

  // uint32 gen_id = 3;
  if (this->gen_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gen_id());
  }

  // uint32 monster_type = 4;
  if (this->monster_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_monster_type());
  }

  // float posx = 5;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    total_size += 1 + 4;
  }

  // float posy = 6;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 camp_id = 7;
  if (this->camp_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camp_id());
  }

  // uint32 monster_id = 8;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_monster_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonsterGen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.MonsterGen)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterGen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonsterGen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.MonsterGen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.MonsterGen)
    MergeFrom(*source);
  }
}

void MonsterGen::MergeFrom(const MonsterGen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.MonsterGen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
  if (from.gen_id() != 0) {
    _internal_set_gen_id(from._internal_gen_id());
  }
  if (from.monster_type() != 0) {
    _internal_set_monster_type(from._internal_monster_type());
  }
  if (!(from.posx() <= 0 && from.posx() >= 0)) {
    _internal_set_posx(from._internal_posx());
  }
  if (!(from.posy() <= 0 && from.posy() >= 0)) {
    _internal_set_posy(from._internal_posy());
  }
  if (from.camp_id() != 0) {
    _internal_set_camp_id(from._internal_camp_id());
  }
  if (from.monster_id() != 0) {
    _internal_set_monster_id(from._internal_monster_id());
  }
}

void MonsterGen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.MonsterGen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterGen::CopyFrom(const MonsterGen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.MonsterGen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterGen::IsInitialized() const {
  return true;
}

void MonsterGen::InternalSwap(MonsterGen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_id_, other->scene_id_);
  swap(phase_id_, other->phase_id_);
  swap(gen_id_, other->gen_id_);
  swap(monster_type_, other->monster_type_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(camp_id_, other->camp_id_);
  swap(monster_id_, other->monster_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterGen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonsterGenMulti::InitAsDefaultInstance() {
}
class MonsterGenMulti::_Internal {
 public:
};

MonsterGenMulti::MonsterGenMulti()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.MonsterGenMulti)
}
MonsterGenMulti::MonsterGenMulti(const MonsterGenMulti& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(range_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.MonsterGenMulti)
}

void MonsterGenMulti::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(range_));
}

MonsterGenMulti::~MonsterGenMulti() {
  // @@protoc_insertion_point(destructor:ServerMSG.MonsterGenMulti)
  SharedDtor();
}

void MonsterGenMulti::SharedDtor() {
}

void MonsterGenMulti::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonsterGenMulti& MonsterGenMulti::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonsterGenMulti_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void MonsterGenMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.MonsterGenMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(range_));
  _internal_metadata_.Clear();
}

const char* MonsterGenMulti::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gen_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gen_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 monster_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          monster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float posx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float posy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 camp_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          camp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 monster_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          monster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonsterGenMulti::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.MonsterGenMulti)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 phase_id = 2;
  if (this->phase_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_phase_id(), target);
  }

  // uint32 gen_id = 3;
  if (this->gen_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gen_id(), target);
  }

  // uint32 monster_type = 4;
  if (this->monster_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_monster_type(), target);
  }

  // float posx = 5;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_posx(), target);
  }

  // float posy = 6;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_posy(), target);
  }

  // uint32 camp_id = 7;
  if (this->camp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_camp_id(), target);
  }

  // uint32 monster_id = 8;
  if (this->monster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_monster_id(), target);
  }

  // uint32 num = 9;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num(), target);
  }

  // float range = 10;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.MonsterGenMulti)
  return target;
}

size_t MonsterGenMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.MonsterGenMulti)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  // uint64 phase_id = 2;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_phase_id());
  }

  // uint32 gen_id = 3;
  if (this->gen_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gen_id());
  }

  // uint32 monster_type = 4;
  if (this->monster_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_monster_type());
  }

  // float posx = 5;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    total_size += 1 + 4;
  }

  // float posy = 6;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 camp_id = 7;
  if (this->camp_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camp_id());
  }

  // uint32 monster_id = 8;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_monster_id());
  }

  // uint32 num = 9;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num());
  }

  // float range = 10;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonsterGenMulti::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.MonsterGenMulti)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterGenMulti* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonsterGenMulti>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.MonsterGenMulti)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.MonsterGenMulti)
    MergeFrom(*source);
  }
}

void MonsterGenMulti::MergeFrom(const MonsterGenMulti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.MonsterGenMulti)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
  if (from.gen_id() != 0) {
    _internal_set_gen_id(from._internal_gen_id());
  }
  if (from.monster_type() != 0) {
    _internal_set_monster_type(from._internal_monster_type());
  }
  if (!(from.posx() <= 0 && from.posx() >= 0)) {
    _internal_set_posx(from._internal_posx());
  }
  if (!(from.posy() <= 0 && from.posy() >= 0)) {
    _internal_set_posy(from._internal_posy());
  }
  if (from.camp_id() != 0) {
    _internal_set_camp_id(from._internal_camp_id());
  }
  if (from.monster_id() != 0) {
    _internal_set_monster_id(from._internal_monster_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
}

void MonsterGenMulti::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.MonsterGenMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterGenMulti::CopyFrom(const MonsterGenMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.MonsterGenMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterGenMulti::IsInitialized() const {
  return true;
}

void MonsterGenMulti::InternalSwap(MonsterGenMulti* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_id_, other->scene_id_);
  swap(phase_id_, other->phase_id_);
  swap(gen_id_, other->gen_id_);
  swap(monster_type_, other->monster_type_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(camp_id_, other->camp_id_);
  swap(monster_id_, other->monster_id_);
  swap(num_, other->num_);
  swap(range_, other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterGenMulti::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonsterDestory::InitAsDefaultInstance() {
}
class MonsterDestory::_Internal {
 public:
};

MonsterDestory::MonsterDestory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.MonsterDestory)
}
MonsterDestory::MonsterDestory(const MonsterDestory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      monster_id_(from.monster_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerMSG.MonsterDestory)
}

void MonsterDestory::SharedCtor() {
}

MonsterDestory::~MonsterDestory() {
  // @@protoc_insertion_point(destructor:ServerMSG.MonsterDestory)
  SharedDtor();
}

void MonsterDestory::SharedDtor() {
}

void MonsterDestory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonsterDestory& MonsterDestory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonsterDestory_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void MonsterDestory::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.MonsterDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monster_id_.Clear();
  _internal_metadata_.Clear();
}

const char* MonsterDestory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 monster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_monster_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_monster_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonsterDestory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.MonsterDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 monster_id = 1;
  {
    int byte_size = _monster_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_monster_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.MonsterDestory)
  return target;
}

size_t MonsterDestory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.MonsterDestory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 monster_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->monster_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _monster_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonsterDestory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.MonsterDestory)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterDestory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonsterDestory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.MonsterDestory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.MonsterDestory)
    MergeFrom(*source);
  }
}

void MonsterDestory::MergeFrom(const MonsterDestory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.MonsterDestory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monster_id_.MergeFrom(from.monster_id_);
}

void MonsterDestory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.MonsterDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterDestory::CopyFrom(const MonsterDestory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.MonsterDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterDestory::IsInitialized() const {
  return true;
}

void MonsterDestory::InternalSwap(MonsterDestory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  monster_id_.InternalSwap(&other->monster_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterDestory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonsterGenOnce::InitAsDefaultInstance() {
}
class MonsterGenOnce::_Internal {
 public:
};

MonsterGenOnce::MonsterGenOnce()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.MonsterGenOnce)
}
MonsterGenOnce::MonsterGenOnce(const MonsterGenOnce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gen_id_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(gen_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.MonsterGenOnce)
}

void MonsterGenOnce::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gen_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(gen_id_));
}

MonsterGenOnce::~MonsterGenOnce() {
  // @@protoc_insertion_point(destructor:ServerMSG.MonsterGenOnce)
  SharedDtor();
}

void MonsterGenOnce::SharedDtor() {
}

void MonsterGenOnce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonsterGenOnce& MonsterGenOnce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonsterGenOnce_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void MonsterGenOnce::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.MonsterGenOnce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gen_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(gen_id_));
  _internal_metadata_.Clear();
}

const char* MonsterGenOnce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gen_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gen_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 phase_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonsterGenOnce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.MonsterGenOnce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint32 gen_id = 2;
  if (this->gen_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gen_id(), target);
  }

  // uint64 phase_id = 3;
  if (this->phase_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.MonsterGenOnce)
  return target;
}

size_t MonsterGenOnce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.MonsterGenOnce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  // uint64 phase_id = 3;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_phase_id());
  }

  // uint32 gen_id = 2;
  if (this->gen_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gen_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonsterGenOnce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.MonsterGenOnce)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterGenOnce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonsterGenOnce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.MonsterGenOnce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.MonsterGenOnce)
    MergeFrom(*source);
  }
}

void MonsterGenOnce::MergeFrom(const MonsterGenOnce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.MonsterGenOnce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
  if (from.gen_id() != 0) {
    _internal_set_gen_id(from._internal_gen_id());
  }
}

void MonsterGenOnce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.MonsterGenOnce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterGenOnce::CopyFrom(const MonsterGenOnce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.MonsterGenOnce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterGenOnce::IsInitialized() const {
  return true;
}

void MonsterGenOnce::InternalSwap(MonsterGenOnce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_id_, other->scene_id_);
  swap(phase_id_, other->phase_id_);
  swap(gen_id_, other->gen_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterGenOnce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActiveGen::InitAsDefaultInstance() {
}
class ActiveGen::_Internal {
 public:
};

ActiveGen::ActiveGen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ActiveGen)
}
ActiveGen::ActiveGen(const ActiveGen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ActiveGen)
}

void ActiveGen::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(active_));
}

ActiveGen::~ActiveGen() {
  // @@protoc_insertion_point(destructor:ServerMSG.ActiveGen)
  SharedDtor();
}

void ActiveGen::SharedDtor() {
}

void ActiveGen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveGen& ActiveGen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveGen_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ActiveGen::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ActiveGen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(active_));
  _internal_metadata_.Clear();
}

const char* ActiveGen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gen_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gen_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveGen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ActiveGen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint32 gen_id = 2;
  if (this->gen_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gen_id(), target);
  }

  // bool active = 3;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ActiveGen)
  return target;
}

size_t ActiveGen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ActiveGen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  // uint32 gen_id = 2;
  if (this->gen_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gen_id());
  }

  // bool active = 3;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveGen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ActiveGen)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveGen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveGen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ActiveGen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ActiveGen)
    MergeFrom(*source);
  }
}

void ActiveGen::MergeFrom(const ActiveGen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ActiveGen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.gen_id() != 0) {
    _internal_set_gen_id(from._internal_gen_id());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void ActiveGen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ActiveGen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveGen::CopyFrom(const ActiveGen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ActiveGen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveGen::IsInitialized() const {
  return true;
}

void ActiveGen::InternalSwap(ActiveGen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_id_, other->scene_id_);
  swap(gen_id_, other->gen_id_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveGen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KillGen::InitAsDefaultInstance() {
}
class KillGen::_Internal {
 public:
};

KillGen::KillGen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.KillGen)
}
KillGen::KillGen(const KillGen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gen_id_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(gen_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.KillGen)
}

void KillGen::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gen_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(gen_id_));
}

KillGen::~KillGen() {
  // @@protoc_insertion_point(destructor:ServerMSG.KillGen)
  SharedDtor();
}

void KillGen::SharedDtor() {
}

void KillGen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KillGen& KillGen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KillGen_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void KillGen::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.KillGen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gen_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(gen_id_));
  _internal_metadata_.Clear();
}

const char* KillGen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gen_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gen_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KillGen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.KillGen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint32 gen_id = 2;
  if (this->gen_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gen_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.KillGen)
  return target;
}

size_t KillGen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.KillGen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  // uint32 gen_id = 2;
  if (this->gen_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gen_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KillGen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.KillGen)
  GOOGLE_DCHECK_NE(&from, this);
  const KillGen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KillGen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.KillGen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.KillGen)
    MergeFrom(*source);
  }
}

void KillGen::MergeFrom(const KillGen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.KillGen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.gen_id() != 0) {
    _internal_set_gen_id(from._internal_gen_id());
  }
}

void KillGen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.KillGen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillGen::CopyFrom(const KillGen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.KillGen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillGen::IsInitialized() const {
  return true;
}

void KillGen::InternalSwap(KillGen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scene_id_, other->scene_id_);
  swap(gen_id_, other->gen_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KillGen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActorCreate::InitAsDefaultInstance() {
}
class ActorCreate::_Internal {
 public:
};

ActorCreate::ActorCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ActorCreate)
}
ActorCreate::ActorCreate(const ActorCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ActorCreate)
}

void ActorCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActorCreate_server_5fmsg_2fserver_5fside_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(phase_id_));
}

ActorCreate::~ActorCreate() {
  // @@protoc_insertion_point(destructor:ServerMSG.ActorCreate)
  SharedDtor();
}

void ActorCreate::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorCreate& ActorCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorCreate_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ActorCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ActorCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(phase_id_));
  _internal_metadata_.Clear();
}

const char* ActorCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMSG.ActorCreate.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 actortype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          actortype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 baselook = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          baselook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prof = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          prof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lev = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 campid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          campid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hpmax = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          hpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mpmax = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          mpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 movespd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          movespd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ownerid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float posx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float posy = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float face = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 monster_gen_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          monster_gen_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 phase_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ActorCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // uint64 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_scene_id(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMSG.ActorCreate.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // uint32 actortype = 5;
  if (this->actortype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_actortype(), target);
  }

  // uint32 baselook = 6;
  if (this->baselook() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_baselook(), target);
  }

  // uint32 prof = 7;
  if (this->prof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_prof(), target);
  }

  // uint32 lev = 8;
  if (this->lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lev(), target);
  }

  // uint32 campid = 9;
  if (this->campid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_campid(), target);
  }

  // uint32 hp = 10;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_hp(), target);
  }

  // uint32 hpmax = 11;
  if (this->hpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_hpmax(), target);
  }

  // uint32 mp = 12;
  if (this->mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_mp(), target);
  }

  // uint32 mpmax = 13;
  if (this->mpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_mpmax(), target);
  }

  // uint32 movespd = 14;
  if (this->movespd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_movespd(), target);
  }

  // uint64 ownerid = 15;
  if (this->ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_ownerid(), target);
  }

  // float posx = 16;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_posx(), target);
  }

  // float posy = 17;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_posy(), target);
  }

  // float face = 18;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_face(), target);
  }

  // uint32 monster_gen_id = 20;
  if (this->monster_gen_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_monster_gen_id(), target);
  }

  // uint64 phase_id = 21;
  if (this->phase_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ActorCreate)
  return target;
}

size_t ActorCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ActorCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint64 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_scene_id());
  }

  // uint32 actortype = 5;
  if (this->actortype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_actortype());
  }

  // uint32 baselook = 6;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baselook());
  }

  // uint32 prof = 7;
  if (this->prof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prof());
  }

  // uint32 lev = 8;
  if (this->lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lev());
  }

  // uint32 campid = 9;
  if (this->campid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_campid());
  }

  // uint32 hp = 10;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hp());
  }

  // uint32 hpmax = 11;
  if (this->hpmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hpmax());
  }

  // uint32 mp = 12;
  if (this->mp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mp());
  }

  // uint32 mpmax = 13;
  if (this->mpmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpmax());
  }

  // uint32 movespd = 14;
  if (this->movespd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_movespd());
  }

  // uint64 ownerid = 15;
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ownerid());
  }

  // float posx = 16;
  if (!(this->posx() <= 0 && this->posx() >= 0)) {
    total_size += 2 + 4;
  }

  // float posy = 17;
  if (!(this->posy() <= 0 && this->posy() >= 0)) {
    total_size += 2 + 4;
  }

  // float face = 18;
  if (!(this->face() <= 0 && this->face() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 monster_gen_id = 20;
  if (this->monster_gen_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_monster_gen_id());
  }

  // uint64 phase_id = 21;
  if (this->phase_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_phase_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ActorCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ActorCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ActorCreate)
    MergeFrom(*source);
  }
}

void ActorCreate::MergeFrom(const ActorCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ActorCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.actortype() != 0) {
    _internal_set_actortype(from._internal_actortype());
  }
  if (from.baselook() != 0) {
    _internal_set_baselook(from._internal_baselook());
  }
  if (from.prof() != 0) {
    _internal_set_prof(from._internal_prof());
  }
  if (from.lev() != 0) {
    _internal_set_lev(from._internal_lev());
  }
  if (from.campid() != 0) {
    _internal_set_campid(from._internal_campid());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.hpmax() != 0) {
    _internal_set_hpmax(from._internal_hpmax());
  }
  if (from.mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from.mpmax() != 0) {
    _internal_set_mpmax(from._internal_mpmax());
  }
  if (from.movespd() != 0) {
    _internal_set_movespd(from._internal_movespd());
  }
  if (from.ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
  if (!(from.posx() <= 0 && from.posx() >= 0)) {
    _internal_set_posx(from._internal_posx());
  }
  if (!(from.posy() <= 0 && from.posy() >= 0)) {
    _internal_set_posy(from._internal_posy());
  }
  if (!(from.face() <= 0 && from.face() >= 0)) {
    _internal_set_face(from._internal_face());
  }
  if (from.monster_gen_id() != 0) {
    _internal_set_monster_gen_id(from._internal_monster_gen_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
}

void ActorCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ActorCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorCreate::CopyFrom(const ActorCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ActorCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorCreate::IsInitialized() const {
  return true;
}

void ActorCreate::InternalSwap(ActorCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actor_id_, other->actor_id_);
  swap(scene_id_, other->scene_id_);
  swap(actortype_, other->actortype_);
  swap(baselook_, other->baselook_);
  swap(prof_, other->prof_);
  swap(lev_, other->lev_);
  swap(campid_, other->campid_);
  swap(hp_, other->hp_);
  swap(hpmax_, other->hpmax_);
  swap(mp_, other->mp_);
  swap(mpmax_, other->mpmax_);
  swap(movespd_, other->movespd_);
  swap(ownerid_, other->ownerid_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(face_, other->face_);
  swap(monster_gen_id_, other->monster_gen_id_);
  swap(phase_id_, other->phase_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActorDestory::InitAsDefaultInstance() {
}
class ActorDestory::_Internal {
 public:
};

ActorDestory::ActorDestory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ActorDestory)
}
ActorDestory::ActorDestory(const ActorDestory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dead_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(dead_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ActorDestory)
}

void ActorDestory::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dead_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(dead_));
}

ActorDestory::~ActorDestory() {
  // @@protoc_insertion_point(destructor:ServerMSG.ActorDestory)
  SharedDtor();
}

void ActorDestory::SharedDtor() {
}

void ActorDestory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorDestory& ActorDestory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorDestory_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ActorDestory::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ActorDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dead_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(dead_));
  _internal_metadata_.Clear();
}

const char* ActorDestory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorDestory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ActorDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // bool dead = 2;
  if (this->dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_dead(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ActorDestory)
  return target;
}

size_t ActorDestory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ActorDestory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // bool dead = 2;
  if (this->dead() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorDestory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ActorDestory)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorDestory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorDestory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ActorDestory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ActorDestory)
    MergeFrom(*source);
  }
}

void ActorDestory::MergeFrom(const ActorDestory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ActorDestory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.dead() != 0) {
    _internal_set_dead(from._internal_dead());
  }
}

void ActorDestory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ActorDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorDestory::CopyFrom(const ActorDestory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ActorDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorDestory::IsInitialized() const {
  return true;
}

void ActorDestory::InternalSwap(ActorDestory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(dead_, other->dead_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorDestory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActorMove::InitAsDefaultInstance() {
}
class ActorMove::_Internal {
 public:
};

ActorMove::ActorMove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ActorMove)
}
ActorMove::ActorMove(const ActorMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ActorMove)
}

void ActorMove::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(y_));
}

ActorMove::~ActorMove() {
  // @@protoc_insertion_point(destructor:ServerMSG.ActorMove)
  SharedDtor();
}

void ActorMove::SharedDtor() {
}

void ActorMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorMove& ActorMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorMove_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ActorMove::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ActorMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* ActorMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ActorMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ActorMove)
  return target;
}

size_t ActorMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ActorMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ActorMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ActorMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ActorMove)
    MergeFrom(*source);
  }
}

void ActorMove::MergeFrom(const ActorMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ActorMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void ActorMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ActorMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorMove::CopyFrom(const ActorMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ActorMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorMove::IsInitialized() const {
  return true;
}

void ActorMove::InternalSwap(ActorMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActorFlyTo::InitAsDefaultInstance() {
}
class ActorFlyTo::_Internal {
 public:
};

ActorFlyTo::ActorFlyTo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ActorFlyTo)
}
ActorFlyTo::ActorFlyTo(const ActorFlyTo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ActorFlyTo)
}

void ActorFlyTo::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(y_));
}

ActorFlyTo::~ActorFlyTo() {
  // @@protoc_insertion_point(destructor:ServerMSG.ActorFlyTo)
  SharedDtor();
}

void ActorFlyTo::SharedDtor() {
}

void ActorFlyTo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorFlyTo& ActorFlyTo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorFlyTo_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ActorFlyTo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ActorFlyTo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* ActorFlyTo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorFlyTo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ActorFlyTo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ActorFlyTo)
  return target;
}

size_t ActorFlyTo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ActorFlyTo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorFlyTo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ActorFlyTo)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorFlyTo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorFlyTo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ActorFlyTo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ActorFlyTo)
    MergeFrom(*source);
  }
}

void ActorFlyTo::MergeFrom(const ActorFlyTo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ActorFlyTo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void ActorFlyTo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ActorFlyTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorFlyTo::CopyFrom(const ActorFlyTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ActorFlyTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorFlyTo::IsInitialized() const {
  return true;
}

void ActorFlyTo::InternalSwap(ActorFlyTo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorFlyTo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActorCastSkill::InitAsDefaultInstance() {
}
class ActorCastSkill::_Internal {
 public:
};

ActorCastSkill::ActorCastSkill()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ActorCastSkill)
}
ActorCastSkill::ActorCastSkill(const ActorCastSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ActorCastSkill)
}

void ActorCastSkill::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(skill_id_));
}

ActorCastSkill::~ActorCastSkill() {
  // @@protoc_insertion_point(destructor:ServerMSG.ActorCastSkill)
  SharedDtor();
}

void ActorCastSkill::SharedDtor() {
}

void ActorCastSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorCastSkill& ActorCastSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorCastSkill_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ActorCastSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ActorCastSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

const char* ActorCastSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skill_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorCastSkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ActorCastSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skill_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ActorCastSkill)
  return target;
}

size_t ActorCastSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ActorCastSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skill_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorCastSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ActorCastSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorCastSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorCastSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ActorCastSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ActorCastSkill)
    MergeFrom(*source);
  }
}

void ActorCastSkill::MergeFrom(const ActorCastSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ActorCastSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.skill_id() != 0) {
    _internal_set_skill_id(from._internal_skill_id());
  }
}

void ActorCastSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ActorCastSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorCastSkill::CopyFrom(const ActorCastSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ActorCastSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorCastSkill::IsInitialized() const {
  return true;
}

void ActorCastSkill::InternalSwap(ActorCastSkill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(target_id_, other->target_id_);
  swap(skill_id_, other->skill_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorCastSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActorCastSkill_Fail::InitAsDefaultInstance() {
}
class ActorCastSkill_Fail::_Internal {
 public:
};

ActorCastSkill_Fail::ActorCastSkill_Fail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ActorCastSkill_Fail)
}
ActorCastSkill_Fail::ActorCastSkill_Fail(const ActorCastSkill_Fail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actor_id_ = from.actor_id_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ActorCastSkill_Fail)
}

void ActorCastSkill_Fail::SharedCtor() {
  actor_id_ = PROTOBUF_ULONGLONG(0);
}

ActorCastSkill_Fail::~ActorCastSkill_Fail() {
  // @@protoc_insertion_point(destructor:ServerMSG.ActorCastSkill_Fail)
  SharedDtor();
}

void ActorCastSkill_Fail::SharedDtor() {
}

void ActorCastSkill_Fail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorCastSkill_Fail& ActorCastSkill_Fail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorCastSkill_Fail_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ActorCastSkill_Fail::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ActorCastSkill_Fail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actor_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ActorCastSkill_Fail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorCastSkill_Fail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ActorCastSkill_Fail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ActorCastSkill_Fail)
  return target;
}

size_t ActorCastSkill_Fail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ActorCastSkill_Fail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorCastSkill_Fail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ActorCastSkill_Fail)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorCastSkill_Fail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorCastSkill_Fail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ActorCastSkill_Fail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ActorCastSkill_Fail)
    MergeFrom(*source);
  }
}

void ActorCastSkill_Fail::MergeFrom(const ActorCastSkill_Fail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ActorCastSkill_Fail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
}

void ActorCastSkill_Fail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ActorCastSkill_Fail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorCastSkill_Fail::CopyFrom(const ActorCastSkill_Fail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ActorCastSkill_Fail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorCastSkill_Fail::IsInitialized() const {
  return true;
}

void ActorCastSkill_Fail::InternalSwap(ActorCastSkill_Fail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorCastSkill_Fail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActorSetHide::InitAsDefaultInstance() {
}
class ActorSetHide::_Internal {
 public:
};

ActorSetHide::ActorSetHide()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.ActorSetHide)
}
ActorSetHide::ActorSetHide(const ActorSetHide& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_id_, &from.actor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_count_) -
    reinterpret_cast<char*>(&actor_id_)) + sizeof(hide_count_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.ActorSetHide)
}

void ActorSetHide::SharedCtor() {
  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_count_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(hide_count_));
}

ActorSetHide::~ActorSetHide() {
  // @@protoc_insertion_point(destructor:ServerMSG.ActorSetHide)
  SharedDtor();
}

void ActorSetHide::SharedDtor() {
}

void ActorSetHide::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActorSetHide& ActorSetHide::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActorSetHide_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void ActorSetHide::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.ActorSetHide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_count_) -
      reinterpret_cast<char*>(&actor_id_)) + sizeof(hide_count_));
  _internal_metadata_.Clear();
}

const char* ActorSetHide::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hide_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hide_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorSetHide::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.ActorSetHide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_actor_id(), target);
  }

  // int32 hide_count = 2;
  if (this->hide_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hide_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.ActorSetHide)
  return target;
}

size_t ActorSetHide::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.ActorSetHide)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 actor_id = 1;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_id());
  }

  // int32 hide_count = 2;
  if (this->hide_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hide_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorSetHide::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.ActorSetHide)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorSetHide* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorSetHide>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.ActorSetHide)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.ActorSetHide)
    MergeFrom(*source);
  }
}

void ActorSetHide::MergeFrom(const ActorSetHide& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.ActorSetHide)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_id() != 0) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from.hide_count() != 0) {
    _internal_set_hide_count(from._internal_hide_count());
  }
}

void ActorSetHide::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.ActorSetHide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorSetHide::CopyFrom(const ActorSetHide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.ActorSetHide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorSetHide::IsInitialized() const {
  return true;
}

void ActorSetHide::InternalSwap(ActorSetHide* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actor_id_, other->actor_id_);
  swap(hide_count_, other->hide_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorSetHide::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamCreate::InitAsDefaultInstance() {
}
class TeamCreate::_Internal {
 public:
};

TeamCreate::TeamCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamCreate)
}
TeamCreate::TeamCreate(const TeamCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_id_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(leader_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamCreate)
}

void TeamCreate::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(leader_id_));
}

TeamCreate::~TeamCreate() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamCreate)
  SharedDtor();
}

void TeamCreate::SharedDtor() {
}

void TeamCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamCreate& TeamCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamCreate_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(leader_id_));
  _internal_metadata_.Clear();
}

const char* TeamCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 leader_id = 2;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamCreate)
  return target;
}

size_t TeamCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 leader_id = 2;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_leader_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamCreate)
    MergeFrom(*source);
  }
}

void TeamCreate::MergeFrom(const TeamCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
}

void TeamCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamCreate::CopyFrom(const TeamCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamCreate::IsInitialized() const {
  return true;
}

void TeamCreate::InternalSwap(TeamCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(leader_id_, other->leader_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamDestory::InitAsDefaultInstance() {
}
class TeamDestory::_Internal {
 public:
};

TeamDestory::TeamDestory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamDestory)
}
TeamDestory::TeamDestory(const TeamDestory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamDestory)
}

void TeamDestory::SharedCtor() {
  team_id_ = PROTOBUF_ULONGLONG(0);
}

TeamDestory::~TeamDestory() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamDestory)
  SharedDtor();
}

void TeamDestory::SharedDtor() {
}

void TeamDestory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamDestory& TeamDestory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamDestory_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamDestory::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TeamDestory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamDestory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamDestory)
  return target;
}

size_t TeamDestory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamDestory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamDestory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamDestory)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamDestory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamDestory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamDestory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamDestory)
    MergeFrom(*source);
  }
}

void TeamDestory::MergeFrom(const TeamDestory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamDestory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
}

void TeamDestory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDestory::CopyFrom(const TeamDestory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDestory::IsInitialized() const {
  return true;
}

void TeamDestory::InternalSwap(TeamDestory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamDestory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamQuit::InitAsDefaultInstance() {
}
class TeamQuit::_Internal {
 public:
};

TeamQuit::TeamQuit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamQuit)
}
TeamQuit::TeamQuit(const TeamQuit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator_id_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(operator_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamQuit)
}

void TeamQuit::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(operator_id_));
}

TeamQuit::~TeamQuit() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamQuit)
  SharedDtor();
}

void TeamQuit::SharedDtor() {
}

void TeamQuit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamQuit& TeamQuit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamQuit_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamQuit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(operator_id_));
  _internal_metadata_.Clear();
}

const char* TeamQuit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamQuit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamQuit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamQuit)
  return target;
}

size_t TeamQuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamQuit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamQuit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamQuit)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamQuit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamQuit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamQuit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamQuit)
    MergeFrom(*source);
  }
}

void TeamQuit::MergeFrom(const TeamQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamQuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
}

void TeamQuit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamQuit::CopyFrom(const TeamQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamQuit::IsInitialized() const {
  return true;
}

void TeamQuit::InternalSwap(TeamQuit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(operator_id_, other->operator_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamQuit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamKickMember::InitAsDefaultInstance() {
}
class TeamKickMember::_Internal {
 public:
};

TeamKickMember::TeamKickMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamKickMember)
}
TeamKickMember::TeamKickMember(const TeamKickMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kick_id_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(kick_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamKickMember)
}

void TeamKickMember::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(kick_id_));
}

TeamKickMember::~TeamKickMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamKickMember)
  SharedDtor();
}

void TeamKickMember::SharedDtor() {
}

void TeamKickMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamKickMember& TeamKickMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamKickMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamKickMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamKickMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(kick_id_));
  _internal_metadata_.Clear();
}

const char* TeamKickMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 kick_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          kick_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamKickMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamKickMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  // uint64 kick_id = 3;
  if (this->kick_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_kick_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamKickMember)
  return target;
}

size_t TeamKickMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamKickMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  // uint64 kick_id = 3;
  if (this->kick_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_kick_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamKickMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamKickMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamKickMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamKickMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamKickMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamKickMember)
    MergeFrom(*source);
  }
}

void TeamKickMember::MergeFrom(const TeamKickMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamKickMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.kick_id() != 0) {
    _internal_set_kick_id(from._internal_kick_id());
  }
}

void TeamKickMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamKickMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamKickMember::CopyFrom(const TeamKickMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamKickMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamKickMember::IsInitialized() const {
  return true;
}

void TeamKickMember::InternalSwap(TeamKickMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(operator_id_, other->operator_id_);
  swap(kick_id_, other->kick_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamKickMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamInviteMember::InitAsDefaultInstance() {
}
class TeamInviteMember::_Internal {
 public:
};

TeamInviteMember::TeamInviteMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamInviteMember)
}
TeamInviteMember::TeamInviteMember(const TeamInviteMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invitee_id_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(invitee_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamInviteMember)
}

void TeamInviteMember::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitee_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(invitee_id_));
}

TeamInviteMember::~TeamInviteMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamInviteMember)
  SharedDtor();
}

void TeamInviteMember::SharedDtor() {
}

void TeamInviteMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamInviteMember& TeamInviteMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamInviteMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamInviteMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamInviteMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitee_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(invitee_id_));
  _internal_metadata_.Clear();
}

const char* TeamInviteMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 invitee_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          invitee_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamInviteMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamInviteMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  // uint64 invitee_id = 3;
  if (this->invitee_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_invitee_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamInviteMember)
  return target;
}

size_t TeamInviteMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamInviteMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  // uint64 invitee_id = 3;
  if (this->invitee_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_invitee_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamInviteMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamInviteMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInviteMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamInviteMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamInviteMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamInviteMember)
    MergeFrom(*source);
  }
}

void TeamInviteMember::MergeFrom(const TeamInviteMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamInviteMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.invitee_id() != 0) {
    _internal_set_invitee_id(from._internal_invitee_id());
  }
}

void TeamInviteMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamInviteMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInviteMember::CopyFrom(const TeamInviteMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamInviteMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInviteMember::IsInitialized() const {
  return true;
}

void TeamInviteMember::InternalSwap(TeamInviteMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(operator_id_, other->operator_id_);
  swap(invitee_id_, other->invitee_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamInviteMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamAcceptInvite::InitAsDefaultInstance() {
}
class TeamAcceptInvite::_Internal {
 public:
};

TeamAcceptInvite::TeamAcceptInvite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamAcceptInvite)
}
TeamAcceptInvite::TeamAcceptInvite(const TeamAcceptInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamAcceptInvite)
}

void TeamAcceptInvite::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(result_));
}

TeamAcceptInvite::~TeamAcceptInvite() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamAcceptInvite)
  SharedDtor();
}

void TeamAcceptInvite::SharedDtor() {
}

void TeamAcceptInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamAcceptInvite& TeamAcceptInvite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamAcceptInvite_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamAcceptInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamAcceptInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* TeamAcceptInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 inviter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inviter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 invitee_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          invitee_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamAcceptInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamAcceptInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_inviter_id(), target);
  }

  // uint64 invitee_id = 3;
  if (this->invitee_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_invitee_id(), target);
  }

  // bool result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamAcceptInvite)
  return target;
}

size_t TeamAcceptInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamAcceptInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_inviter_id());
  }

  // uint64 invitee_id = 3;
  if (this->invitee_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_invitee_id());
  }

  // bool result = 4;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamAcceptInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamAcceptInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAcceptInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamAcceptInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamAcceptInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamAcceptInvite)
    MergeFrom(*source);
  }
}

void TeamAcceptInvite::MergeFrom(const TeamAcceptInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamAcceptInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.inviter_id() != 0) {
    _internal_set_inviter_id(from._internal_inviter_id());
  }
  if (from.invitee_id() != 0) {
    _internal_set_invitee_id(from._internal_invitee_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void TeamAcceptInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamAcceptInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAcceptInvite::CopyFrom(const TeamAcceptInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamAcceptInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAcceptInvite::IsInitialized() const {
  return true;
}

void TeamAcceptInvite::InternalSwap(TeamAcceptInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(inviter_id_, other->inviter_id_);
  swap(invitee_id_, other->invitee_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamAcceptInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamApplyMember::InitAsDefaultInstance() {
}
class TeamApplyMember::_Internal {
 public:
};

TeamApplyMember::TeamApplyMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamApplyMember)
}
TeamApplyMember::TeamApplyMember(const TeamApplyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&respondent_id_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(respondent_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamApplyMember)
}

void TeamApplyMember::SharedCtor() {
  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&respondent_id_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(respondent_id_));
}

TeamApplyMember::~TeamApplyMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamApplyMember)
  SharedDtor();
}

void TeamApplyMember::SharedDtor() {
}

void TeamApplyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamApplyMember& TeamApplyMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamApplyMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamApplyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamApplyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&respondent_id_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(respondent_id_));
  _internal_metadata_.Clear();
}

const char* TeamApplyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 applicant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 respondent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          respondent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamApplyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamApplyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applicant_id(), target);
  }

  // uint64 respondent_id = 2;
  if (this->respondent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_respondent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamApplyMember)
  return target;
}

size_t TeamApplyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamApplyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_applicant_id());
  }

  // uint64 respondent_id = 2;
  if (this->respondent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_respondent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamApplyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamApplyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamApplyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamApplyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamApplyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamApplyMember)
    MergeFrom(*source);
  }
}

void TeamApplyMember::MergeFrom(const TeamApplyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamApplyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicant_id() != 0) {
    _internal_set_applicant_id(from._internal_applicant_id());
  }
  if (from.respondent_id() != 0) {
    _internal_set_respondent_id(from._internal_respondent_id());
  }
}

void TeamApplyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamApplyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamApplyMember::CopyFrom(const TeamApplyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamApplyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApplyMember::IsInitialized() const {
  return true;
}

void TeamApplyMember::InternalSwap(TeamApplyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(applicant_id_, other->applicant_id_);
  swap(respondent_id_, other->respondent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamApplyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamAcceptApply::InitAsDefaultInstance() {
}
class TeamAcceptApply::_Internal {
 public:
};

TeamAcceptApply::TeamAcceptApply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamAcceptApply)
}
TeamAcceptApply::TeamAcceptApply(const TeamAcceptApply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamAcceptApply)
}

void TeamAcceptApply::SharedCtor() {
  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
}

TeamAcceptApply::~TeamAcceptApply() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamAcceptApply)
  SharedDtor();
}

void TeamAcceptApply::SharedDtor() {
}

void TeamAcceptApply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamAcceptApply& TeamAcceptApply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamAcceptApply_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamAcceptApply::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamAcceptApply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* TeamAcceptApply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 applicant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 respondent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          respondent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamAcceptApply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamAcceptApply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applicant_id(), target);
  }

  // uint64 respondent_id = 2;
  if (this->respondent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_respondent_id(), target);
  }

  // bool result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamAcceptApply)
  return target;
}

size_t TeamAcceptApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamAcceptApply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_applicant_id());
  }

  // uint64 respondent_id = 2;
  if (this->respondent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_respondent_id());
  }

  // bool result = 3;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamAcceptApply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamAcceptApply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAcceptApply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamAcceptApply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamAcceptApply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamAcceptApply)
    MergeFrom(*source);
  }
}

void TeamAcceptApply::MergeFrom(const TeamAcceptApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamAcceptApply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicant_id() != 0) {
    _internal_set_applicant_id(from._internal_applicant_id());
  }
  if (from.respondent_id() != 0) {
    _internal_set_respondent_id(from._internal_respondent_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void TeamAcceptApply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamAcceptApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAcceptApply::CopyFrom(const TeamAcceptApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamAcceptApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAcceptApply::IsInitialized() const {
  return true;
}

void TeamAcceptApply::InternalSwap(TeamAcceptApply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(applicant_id_, other->applicant_id_);
  swap(respondent_id_, other->respondent_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamAcceptApply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamNewLeader::InitAsDefaultInstance() {
}
class TeamNewLeader::_Internal {
 public:
};

TeamNewLeader::TeamNewLeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamNewLeader)
}
TeamNewLeader::TeamNewLeader(const TeamNewLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_leader_id_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(new_leader_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamNewLeader)
}

void TeamNewLeader::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_leader_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(new_leader_id_));
}

TeamNewLeader::~TeamNewLeader() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamNewLeader)
  SharedDtor();
}

void TeamNewLeader::SharedDtor() {
}

void TeamNewLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamNewLeader& TeamNewLeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamNewLeader_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamNewLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamNewLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_leader_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(new_leader_id_));
  _internal_metadata_.Clear();
}

const char* TeamNewLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_leader_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          new_leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamNewLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamNewLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  // uint64 new_leader_id = 3;
  if (this->new_leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_new_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamNewLeader)
  return target;
}

size_t TeamNewLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamNewLeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  // uint64 new_leader_id = 3;
  if (this->new_leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_leader_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamNewLeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamNewLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamNewLeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamNewLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamNewLeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamNewLeader)
    MergeFrom(*source);
  }
}

void TeamNewLeader::MergeFrom(const TeamNewLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamNewLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.new_leader_id() != 0) {
    _internal_set_new_leader_id(from._internal_new_leader_id());
  }
}

void TeamNewLeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamNewLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamNewLeader::CopyFrom(const TeamNewLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamNewLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamNewLeader::IsInitialized() const {
  return true;
}

void TeamNewLeader::InternalSwap(TeamNewLeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(operator_id_, other->operator_id_);
  swap(new_leader_id_, other->new_leader_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamNewLeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamAddMember::InitAsDefaultInstance() {
}
class TeamAddMember::_Internal {
 public:
};

TeamAddMember::TeamAddMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamAddMember)
}
TeamAddMember::TeamAddMember(const TeamAddMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(member_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamAddMember)
}

void TeamAddMember::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(member_id_));
}

TeamAddMember::~TeamAddMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamAddMember)
  SharedDtor();
}

void TeamAddMember::SharedDtor() {
}

void TeamAddMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamAddMember& TeamAddMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamAddMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamAddMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamAddMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(member_id_));
  _internal_metadata_.Clear();
}

const char* TeamAddMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamAddMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamAddMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_member_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamAddMember)
  return target;
}

size_t TeamAddMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamAddMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamAddMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamAddMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAddMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamAddMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamAddMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamAddMember)
    MergeFrom(*source);
  }
}

void TeamAddMember::MergeFrom(const TeamAddMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamAddMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
}

void TeamAddMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamAddMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAddMember::CopyFrom(const TeamAddMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamAddMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAddMember::IsInitialized() const {
  return true;
}

void TeamAddMember::InternalSwap(TeamAddMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamAddMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamDelMember::InitAsDefaultInstance() {
}
class TeamDelMember::_Internal {
 public:
};

TeamDelMember::TeamDelMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamDelMember)
}
TeamDelMember::TeamDelMember(const TeamDelMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(member_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamDelMember)
}

void TeamDelMember::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(member_id_));
}

TeamDelMember::~TeamDelMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamDelMember)
  SharedDtor();
}

void TeamDelMember::SharedDtor() {
}

void TeamDelMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamDelMember& TeamDelMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamDelMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamDelMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamDelMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(member_id_));
  _internal_metadata_.Clear();
}

const char* TeamDelMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamDelMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamDelMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_id(), target);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_member_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamDelMember)
  return target;
}

size_t TeamDelMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamDelMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_team_id());
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamDelMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamDelMember)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamDelMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamDelMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamDelMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamDelMember)
    MergeFrom(*source);
  }
}

void TeamDelMember::MergeFrom(const TeamDelMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamDelMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
}

void TeamDelMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamDelMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDelMember::CopyFrom(const TeamDelMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamDelMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDelMember::IsInitialized() const {
  return true;
}

void TeamDelMember::InternalSwap(TeamDelMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamDelMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamMemberInfoList::InitAsDefaultInstance() {
}
class TeamMemberInfoList::_Internal {
 public:
};

void TeamMemberInfoList::clear_member_list() {
  member_list_.Clear();
}
TeamMemberInfoList::TeamMemberInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.TeamMemberInfoList)
}
TeamMemberInfoList::TeamMemberInfoList(const TeamMemberInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      member_list_(from.member_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerMSG.TeamMemberInfoList)
}

void TeamMemberInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamMemberInfoList_server_5fmsg_2fserver_5fside_2eproto.base);
}

TeamMemberInfoList::~TeamMemberInfoList() {
  // @@protoc_insertion_point(destructor:ServerMSG.TeamMemberInfoList)
  SharedDtor();
}

void TeamMemberInfoList::SharedDtor() {
}

void TeamMemberInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamMemberInfoList& TeamMemberInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamMemberInfoList_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void TeamMemberInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.TeamMemberInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_list_.Clear();
  _internal_metadata_.Clear();
}

const char* TeamMemberInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TeamMemberInfo member_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamMemberInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.TeamMemberInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TeamMemberInfo member_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_member_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.TeamMemberInfoList)
  return target;
}

size_t TeamMemberInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.TeamMemberInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TeamMemberInfo member_list = 1;
  total_size += 1UL * this->_internal_member_list_size();
  for (const auto& msg : this->member_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamMemberInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.TeamMemberInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamMemberInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamMemberInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.TeamMemberInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.TeamMemberInfoList)
    MergeFrom(*source);
  }
}

void TeamMemberInfoList::MergeFrom(const TeamMemberInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.TeamMemberInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_list_.MergeFrom(from.member_list_);
}

void TeamMemberInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.TeamMemberInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberInfoList::CopyFrom(const TeamMemberInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.TeamMemberInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberInfoList::IsInitialized() const {
  return true;
}

void TeamMemberInfoList::InternalSwap(TeamMemberInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_list_.InternalSwap(&other->member_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMemberInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildCreate::InitAsDefaultInstance() {
}
class GuildCreate::_Internal {
 public:
};

GuildCreate::GuildCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildCreate)
}
GuildCreate::GuildCreate(const GuildCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guild_name().empty()) {
    guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_name().empty()) {
    leader_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildCreate)
}

void GuildCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildCreate_server_5fmsg_2fserver_5fside_2eproto.base);
  guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(create_time_));
}

GuildCreate::~GuildCreate() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildCreate)
  SharedDtor();
}

void GuildCreate::SharedDtor() {
  guild_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuildCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildCreate& GuildCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildCreate_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(create_time_));
  _internal_metadata_.Clear();
}

const char* GuildCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string guild_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMSG.GuildCreate.guild_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leader_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_leader_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMSG.GuildCreate.leader_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 create_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 leader_id = 2;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_leader_id(), target);
  }

  // string guild_name = 3;
  if (this->guild_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_name().data(), static_cast<int>(this->_internal_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMSG.GuildCreate.guild_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_guild_name(), target);
  }

  // string leader_name = 4;
  if (this->leader_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_name().data(), static_cast<int>(this->_internal_leader_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMSG.GuildCreate.leader_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_leader_name(), target);
  }

  // uint32 create_time = 5;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_create_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildCreate)
  return target;
}

size_t GuildCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string guild_name = 3;
  if (this->guild_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_name());
  }

  // string leader_name = 4;
  if (this->leader_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_name());
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 leader_id = 2;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_leader_id());
  }

  // uint32 create_time = 5;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_create_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildCreate)
    MergeFrom(*source);
  }
}

void GuildCreate::MergeFrom(const GuildCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_name().size() > 0) {

    guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.leader_name().size() > 0) {

    leader_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
}

void GuildCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCreate::CopyFrom(const GuildCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCreate::IsInitialized() const {
  return true;
}

void GuildCreate::InternalSwap(GuildCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  guild_name_.Swap(&other->guild_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leader_name_.Swap(&other->leader_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
  swap(leader_id_, other->leader_id_);
  swap(create_time_, other->create_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildDestory::InitAsDefaultInstance() {
}
class GuildDestory::_Internal {
 public:
};

GuildDestory::GuildDestory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildDestory)
}
GuildDestory::GuildDestory(const GuildDestory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildDestory)
}

void GuildDestory::SharedCtor() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}

GuildDestory::~GuildDestory() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildDestory)
  SharedDtor();
}

void GuildDestory::SharedDtor() {
}

void GuildDestory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildDestory& GuildDestory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildDestory_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildDestory::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GuildDestory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildDestory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildDestory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildDestory)
  return target;
}

size_t GuildDestory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildDestory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildDestory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildDestory)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildDestory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildDestory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildDestory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildDestory)
    MergeFrom(*source);
  }
}

void GuildDestory::MergeFrom(const GuildDestory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildDestory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void GuildDestory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDestory::CopyFrom(const GuildDestory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildDestory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDestory::IsInitialized() const {
  return true;
}

void GuildDestory::InternalSwap(GuildDestory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildDestory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildQuit::InitAsDefaultInstance() {
}
class GuildQuit::_Internal {
 public:
};

GuildQuit::GuildQuit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildQuit)
}
GuildQuit::GuildQuit(const GuildQuit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(operator_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildQuit)
}

void GuildQuit::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(operator_id_));
}

GuildQuit::~GuildQuit() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildQuit)
  SharedDtor();
}

void GuildQuit::SharedDtor() {
}

void GuildQuit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildQuit& GuildQuit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildQuit_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildQuit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(operator_id_));
  _internal_metadata_.Clear();
}

const char* GuildQuit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildQuit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildQuit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildQuit)
  return target;
}

size_t GuildQuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildQuit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildQuit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildQuit)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildQuit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildQuit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildQuit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildQuit)
    MergeFrom(*source);
  }
}

void GuildQuit::MergeFrom(const GuildQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildQuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
}

void GuildQuit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildQuit::CopyFrom(const GuildQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildQuit::IsInitialized() const {
  return true;
}

void GuildQuit::InternalSwap(GuildQuit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
  swap(operator_id_, other->operator_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildQuit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildKickMember::InitAsDefaultInstance() {
}
class GuildKickMember::_Internal {
 public:
};

GuildKickMember::GuildKickMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildKickMember)
}
GuildKickMember::GuildKickMember(const GuildKickMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kick_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(kick_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildKickMember)
}

void GuildKickMember::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(kick_id_));
}

GuildKickMember::~GuildKickMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildKickMember)
  SharedDtor();
}

void GuildKickMember::SharedDtor() {
}

void GuildKickMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildKickMember& GuildKickMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildKickMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildKickMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildKickMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(kick_id_));
  _internal_metadata_.Clear();
}

const char* GuildKickMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 kick_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          kick_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildKickMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildKickMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  // uint64 kick_id = 3;
  if (this->kick_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_kick_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildKickMember)
  return target;
}

size_t GuildKickMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildKickMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  // uint64 kick_id = 3;
  if (this->kick_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_kick_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildKickMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildKickMember)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildKickMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildKickMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildKickMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildKickMember)
    MergeFrom(*source);
  }
}

void GuildKickMember::MergeFrom(const GuildKickMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildKickMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.kick_id() != 0) {
    _internal_set_kick_id(from._internal_kick_id());
  }
}

void GuildKickMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildKickMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildKickMember::CopyFrom(const GuildKickMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildKickMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildKickMember::IsInitialized() const {
  return true;
}

void GuildKickMember::InternalSwap(GuildKickMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
  swap(operator_id_, other->operator_id_);
  swap(kick_id_, other->kick_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildKickMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildInviteMember::InitAsDefaultInstance() {
}
class GuildInviteMember::_Internal {
 public:
};

GuildInviteMember::GuildInviteMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildInviteMember)
}
GuildInviteMember::GuildInviteMember(const GuildInviteMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invitee_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(invitee_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildInviteMember)
}

void GuildInviteMember::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitee_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(invitee_id_));
}

GuildInviteMember::~GuildInviteMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildInviteMember)
  SharedDtor();
}

void GuildInviteMember::SharedDtor() {
}

void GuildInviteMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildInviteMember& GuildInviteMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildInviteMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildInviteMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildInviteMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitee_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(invitee_id_));
  _internal_metadata_.Clear();
}

const char* GuildInviteMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 invitee_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          invitee_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildInviteMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildInviteMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  // uint64 invitee_id = 3;
  if (this->invitee_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_invitee_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildInviteMember)
  return target;
}

size_t GuildInviteMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildInviteMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  // uint64 invitee_id = 3;
  if (this->invitee_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_invitee_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildInviteMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildInviteMember)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildInviteMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildInviteMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildInviteMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildInviteMember)
    MergeFrom(*source);
  }
}

void GuildInviteMember::MergeFrom(const GuildInviteMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildInviteMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.invitee_id() != 0) {
    _internal_set_invitee_id(from._internal_invitee_id());
  }
}

void GuildInviteMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildInviteMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInviteMember::CopyFrom(const GuildInviteMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildInviteMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInviteMember::IsInitialized() const {
  return true;
}

void GuildInviteMember::InternalSwap(GuildInviteMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
  swap(operator_id_, other->operator_id_);
  swap(invitee_id_, other->invitee_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildInviteMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildAcceptInvite::InitAsDefaultInstance() {
}
class GuildAcceptInvite::_Internal {
 public:
};

GuildAcceptInvite::GuildAcceptInvite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildAcceptInvite)
}
GuildAcceptInvite::GuildAcceptInvite(const GuildAcceptInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildAcceptInvite)
}

void GuildAcceptInvite::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(result_));
}

GuildAcceptInvite::~GuildAcceptInvite() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildAcceptInvite)
  SharedDtor();
}

void GuildAcceptInvite::SharedDtor() {
}

void GuildAcceptInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildAcceptInvite& GuildAcceptInvite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildAcceptInvite_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildAcceptInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildAcceptInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* GuildAcceptInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 inviter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inviter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 invitee_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          invitee_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildAcceptInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildAcceptInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_inviter_id(), target);
  }

  // uint64 invitee_id = 3;
  if (this->invitee_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_invitee_id(), target);
  }

  // bool result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildAcceptInvite)
  return target;
}

size_t GuildAcceptInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildAcceptInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 inviter_id = 2;
  if (this->inviter_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_inviter_id());
  }

  // uint64 invitee_id = 3;
  if (this->invitee_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_invitee_id());
  }

  // bool result = 4;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildAcceptInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildAcceptInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildAcceptInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildAcceptInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildAcceptInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildAcceptInvite)
    MergeFrom(*source);
  }
}

void GuildAcceptInvite::MergeFrom(const GuildAcceptInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildAcceptInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.inviter_id() != 0) {
    _internal_set_inviter_id(from._internal_inviter_id());
  }
  if (from.invitee_id() != 0) {
    _internal_set_invitee_id(from._internal_invitee_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GuildAcceptInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildAcceptInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildAcceptInvite::CopyFrom(const GuildAcceptInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildAcceptInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildAcceptInvite::IsInitialized() const {
  return true;
}

void GuildAcceptInvite::InternalSwap(GuildAcceptInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
  swap(inviter_id_, other->inviter_id_);
  swap(invitee_id_, other->invitee_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildAcceptInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildApplyMember::InitAsDefaultInstance() {
}
class GuildApplyMember::_Internal {
 public:
};

GuildApplyMember::GuildApplyMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildApplyMember)
}
GuildApplyMember::GuildApplyMember(const GuildApplyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&respondent_id_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(respondent_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildApplyMember)
}

void GuildApplyMember::SharedCtor() {
  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&respondent_id_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(respondent_id_));
}

GuildApplyMember::~GuildApplyMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildApplyMember)
  SharedDtor();
}

void GuildApplyMember::SharedDtor() {
}

void GuildApplyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildApplyMember& GuildApplyMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildApplyMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildApplyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildApplyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&respondent_id_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(respondent_id_));
  _internal_metadata_.Clear();
}

const char* GuildApplyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 applicant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 respondent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          respondent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildApplyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildApplyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applicant_id(), target);
  }

  // uint64 respondent_id = 2;
  if (this->respondent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_respondent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildApplyMember)
  return target;
}

size_t GuildApplyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildApplyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_applicant_id());
  }

  // uint64 respondent_id = 2;
  if (this->respondent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_respondent_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildApplyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildApplyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildApplyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildApplyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildApplyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildApplyMember)
    MergeFrom(*source);
  }
}

void GuildApplyMember::MergeFrom(const GuildApplyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildApplyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicant_id() != 0) {
    _internal_set_applicant_id(from._internal_applicant_id());
  }
  if (from.respondent_id() != 0) {
    _internal_set_respondent_id(from._internal_respondent_id());
  }
}

void GuildApplyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildApplyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildApplyMember::CopyFrom(const GuildApplyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildApplyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApplyMember::IsInitialized() const {
  return true;
}

void GuildApplyMember::InternalSwap(GuildApplyMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(applicant_id_, other->applicant_id_);
  swap(respondent_id_, other->respondent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildApplyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildAcceptApply::InitAsDefaultInstance() {
}
class GuildAcceptApply::_Internal {
 public:
};

GuildAcceptApply::GuildAcceptApply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildAcceptApply)
}
GuildAcceptApply::GuildAcceptApply(const GuildAcceptApply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildAcceptApply)
}

void GuildAcceptApply::SharedCtor() {
  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
}

GuildAcceptApply::~GuildAcceptApply() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildAcceptApply)
  SharedDtor();
}

void GuildAcceptApply::SharedDtor() {
}

void GuildAcceptApply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildAcceptApply& GuildAcceptApply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildAcceptApply_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildAcceptApply::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildAcceptApply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* GuildAcceptApply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 applicant_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicant_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 respondent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          respondent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildAcceptApply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildAcceptApply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applicant_id(), target);
  }

  // uint64 respondent_id = 2;
  if (this->respondent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_respondent_id(), target);
  }

  // bool result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildAcceptApply)
  return target;
}

size_t GuildAcceptApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildAcceptApply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 applicant_id = 1;
  if (this->applicant_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_applicant_id());
  }

  // uint64 respondent_id = 2;
  if (this->respondent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_respondent_id());
  }

  // bool result = 3;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildAcceptApply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildAcceptApply)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildAcceptApply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildAcceptApply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildAcceptApply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildAcceptApply)
    MergeFrom(*source);
  }
}

void GuildAcceptApply::MergeFrom(const GuildAcceptApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildAcceptApply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicant_id() != 0) {
    _internal_set_applicant_id(from._internal_applicant_id());
  }
  if (from.respondent_id() != 0) {
    _internal_set_respondent_id(from._internal_respondent_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GuildAcceptApply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildAcceptApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildAcceptApply::CopyFrom(const GuildAcceptApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildAcceptApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildAcceptApply::IsInitialized() const {
  return true;
}

void GuildAcceptApply::InternalSwap(GuildAcceptApply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(applicant_id_, other->applicant_id_);
  swap(respondent_id_, other->respondent_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildAcceptApply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildNewLeader::InitAsDefaultInstance() {
}
class GuildNewLeader::_Internal {
 public:
};

GuildNewLeader::GuildNewLeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildNewLeader)
}
GuildNewLeader::GuildNewLeader(const GuildNewLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_leader_name().empty()) {
    new_leader_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_leader_name_);
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_leader_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(new_leader_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildNewLeader)
}

void GuildNewLeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildNewLeader_server_5fmsg_2fserver_5fside_2eproto.base);
  new_leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_leader_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(new_leader_id_));
}

GuildNewLeader::~GuildNewLeader() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildNewLeader)
  SharedDtor();
}

void GuildNewLeader::SharedDtor() {
  new_leader_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuildNewLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildNewLeader& GuildNewLeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildNewLeader_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildNewLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildNewLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_leader_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_leader_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(new_leader_id_));
  _internal_metadata_.Clear();
}

const char* GuildNewLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 operator_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_leader_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          new_leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_leader_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_leader_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMSG.GuildNewLeader.new_leader_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildNewLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildNewLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operator_id(), target);
  }

  // uint64 new_leader_id = 3;
  if (this->new_leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_new_leader_id(), target);
  }

  // string new_leader_name = 4;
  if (this->new_leader_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_leader_name().data(), static_cast<int>(this->_internal_new_leader_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMSG.GuildNewLeader.new_leader_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_leader_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildNewLeader)
  return target;
}

size_t GuildNewLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildNewLeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_leader_name = 4;
  if (this->new_leader_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_leader_name());
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 operator_id = 2;
  if (this->operator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operator_id());
  }

  // uint64 new_leader_id = 3;
  if (this->new_leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_leader_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildNewLeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildNewLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildNewLeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildNewLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildNewLeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildNewLeader)
    MergeFrom(*source);
  }
}

void GuildNewLeader::MergeFrom(const GuildNewLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildNewLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_leader_name().size() > 0) {

    new_leader_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_leader_name_);
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.operator_id() != 0) {
    _internal_set_operator_id(from._internal_operator_id());
  }
  if (from.new_leader_id() != 0) {
    _internal_set_new_leader_id(from._internal_new_leader_id());
  }
}

void GuildNewLeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildNewLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildNewLeader::CopyFrom(const GuildNewLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildNewLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildNewLeader::IsInitialized() const {
  return true;
}

void GuildNewLeader::InternalSwap(GuildNewLeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_leader_name_.Swap(&other->new_leader_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
  swap(operator_id_, other->operator_id_);
  swap(new_leader_id_, other->new_leader_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildNewLeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildAddMember::InitAsDefaultInstance() {
}
class GuildAddMember::_Internal {
 public:
};

GuildAddMember::GuildAddMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildAddMember)
}
GuildAddMember::GuildAddMember(const GuildAddMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(member_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildAddMember)
}

void GuildAddMember::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(member_id_));
}

GuildAddMember::~GuildAddMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildAddMember)
  SharedDtor();
}

void GuildAddMember::SharedDtor() {
}

void GuildAddMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildAddMember& GuildAddMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildAddMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildAddMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildAddMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(member_id_));
  _internal_metadata_.Clear();
}

const char* GuildAddMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildAddMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildAddMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_member_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildAddMember)
  return target;
}

size_t GuildAddMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildAddMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildAddMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildAddMember)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildAddMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildAddMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildAddMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildAddMember)
    MergeFrom(*source);
  }
}

void GuildAddMember::MergeFrom(const GuildAddMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildAddMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
}

void GuildAddMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildAddMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildAddMember::CopyFrom(const GuildAddMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildAddMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildAddMember::IsInitialized() const {
  return true;
}

void GuildAddMember::InternalSwap(GuildAddMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildAddMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildDelMember::InitAsDefaultInstance() {
}
class GuildDelMember::_Internal {
 public:
};

GuildDelMember::GuildDelMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildDelMember)
}
GuildDelMember::GuildDelMember(const GuildDelMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(member_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildDelMember)
}

void GuildDelMember::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(member_id_));
}

GuildDelMember::~GuildDelMember() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildDelMember)
  SharedDtor();
}

void GuildDelMember::SharedDtor() {
}

void GuildDelMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildDelMember& GuildDelMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildDelMember_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildDelMember::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildDelMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(member_id_));
  _internal_metadata_.Clear();
}

const char* GuildDelMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildDelMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildDelMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_member_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildDelMember)
  return target;
}

size_t GuildDelMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildDelMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildDelMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildDelMember)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildDelMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildDelMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildDelMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildDelMember)
    MergeFrom(*source);
  }
}

void GuildDelMember::MergeFrom(const GuildDelMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildDelMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
}

void GuildDelMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildDelMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDelMember::CopyFrom(const GuildDelMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildDelMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDelMember::IsInitialized() const {
  return true;
}

void GuildDelMember::InternalSwap(GuildDelMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
  swap(member_id_, other->member_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildDelMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildMemberInfoList::InitAsDefaultInstance() {
}
class GuildMemberInfoList::_Internal {
 public:
};

void GuildMemberInfoList::clear_member_list() {
  member_list_.Clear();
}
GuildMemberInfoList::GuildMemberInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.GuildMemberInfoList)
}
GuildMemberInfoList::GuildMemberInfoList(const GuildMemberInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      member_list_(from.member_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerMSG.GuildMemberInfoList)
}

void GuildMemberInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildMemberInfoList_server_5fmsg_2fserver_5fside_2eproto.base);
}

GuildMemberInfoList::~GuildMemberInfoList() {
  // @@protoc_insertion_point(destructor:ServerMSG.GuildMemberInfoList)
  SharedDtor();
}

void GuildMemberInfoList::SharedDtor() {
}

void GuildMemberInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildMemberInfoList& GuildMemberInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildMemberInfoList_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void GuildMemberInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.GuildMemberInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_list_.Clear();
  _internal_metadata_.Clear();
}

const char* GuildMemberInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GuildMemberInfo member_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildMemberInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.GuildMemberInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GuildMemberInfo member_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_member_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.GuildMemberInfoList)
  return target;
}

size_t GuildMemberInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.GuildMemberInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GuildMemberInfo member_list = 1;
  total_size += 1UL * this->_internal_member_list_size();
  for (const auto& msg : this->member_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildMemberInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.GuildMemberInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildMemberInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildMemberInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.GuildMemberInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.GuildMemberInfoList)
    MergeFrom(*source);
  }
}

void GuildMemberInfoList::MergeFrom(const GuildMemberInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.GuildMemberInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_list_.MergeFrom(from.member_list_);
}

void GuildMemberInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.GuildMemberInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberInfoList::CopyFrom(const GuildMemberInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.GuildMemberInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberInfoList::IsInitialized() const {
  return true;
}

void GuildMemberInfoList::InternalSwap(GuildMemberInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_list_.InternalSwap(&other->member_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildMemberInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncTaskPhase::InitAsDefaultInstance() {
}
class SyncTaskPhase::_Internal {
 public:
};

SyncTaskPhase::SyncTaskPhase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.SyncTaskPhase)
}
SyncTaskPhase::SyncTaskPhase(const SyncTaskPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      task_phase_id_(from.task_phase_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:ServerMSG.SyncTaskPhase)
}

void SyncTaskPhase::SharedCtor() {
  player_id_ = PROTOBUF_ULONGLONG(0);
}

SyncTaskPhase::~SyncTaskPhase() {
  // @@protoc_insertion_point(destructor:ServerMSG.SyncTaskPhase)
  SharedDtor();
}

void SyncTaskPhase::SharedDtor() {
}

void SyncTaskPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncTaskPhase& SyncTaskPhase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncTaskPhase_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void SyncTaskPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.SyncTaskPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_phase_id_.Clear();
  player_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SyncTaskPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 task_phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_task_phase_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_task_phase_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncTaskPhase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.SyncTaskPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // repeated uint64 task_phase_id = 2;
  {
    int byte_size = _task_phase_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_task_phase_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.SyncTaskPhase)
  return target;
}

size_t SyncTaskPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.SyncTaskPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 task_phase_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->task_phase_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _task_phase_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncTaskPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.SyncTaskPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncTaskPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncTaskPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.SyncTaskPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.SyncTaskPhase)
    MergeFrom(*source);
  }
}

void SyncTaskPhase::MergeFrom(const SyncTaskPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.SyncTaskPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_phase_id_.MergeFrom(from.task_phase_id_);
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void SyncTaskPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.SyncTaskPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncTaskPhase::CopyFrom(const SyncTaskPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.SyncTaskPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncTaskPhase::IsInitialized() const {
  return true;
}

void SyncTaskPhase::InternalSwap(SyncTaskPhase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_phase_id_.InternalSwap(&other->task_phase_id_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncTaskPhase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddTaskPhase::InitAsDefaultInstance() {
}
class AddTaskPhase::_Internal {
 public:
};

AddTaskPhase::AddTaskPhase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.AddTaskPhase)
}
AddTaskPhase::AddTaskPhase(const AddTaskPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_phase_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(task_phase_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.AddTaskPhase)
}

void AddTaskPhase::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_phase_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(task_phase_id_));
}

AddTaskPhase::~AddTaskPhase() {
  // @@protoc_insertion_point(destructor:ServerMSG.AddTaskPhase)
  SharedDtor();
}

void AddTaskPhase::SharedDtor() {
}

void AddTaskPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTaskPhase& AddTaskPhase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTaskPhase_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void AddTaskPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.AddTaskPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_phase_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(task_phase_id_));
  _internal_metadata_.Clear();
}

const char* AddTaskPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 task_phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          task_phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTaskPhase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.AddTaskPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // uint64 task_phase_id = 2;
  if (this->task_phase_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_task_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.AddTaskPhase)
  return target;
}

size_t AddTaskPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.AddTaskPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // uint64 task_phase_id = 2;
  if (this->task_phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_phase_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTaskPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.AddTaskPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTaskPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTaskPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.AddTaskPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.AddTaskPhase)
    MergeFrom(*source);
  }
}

void AddTaskPhase::MergeFrom(const AddTaskPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.AddTaskPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.task_phase_id() != 0) {
    _internal_set_task_phase_id(from._internal_task_phase_id());
  }
}

void AddTaskPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.AddTaskPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTaskPhase::CopyFrom(const AddTaskPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.AddTaskPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTaskPhase::IsInitialized() const {
  return true;
}

void AddTaskPhase::InternalSwap(AddTaskPhase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
  swap(task_phase_id_, other->task_phase_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTaskPhase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveTaskPhase::InitAsDefaultInstance() {
}
class RemoveTaskPhase::_Internal {
 public:
};

RemoveTaskPhase::RemoveTaskPhase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMSG.RemoveTaskPhase)
}
RemoveTaskPhase::RemoveTaskPhase(const RemoveTaskPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_phase_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(task_phase_id_));
  // @@protoc_insertion_point(copy_constructor:ServerMSG.RemoveTaskPhase)
}

void RemoveTaskPhase::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_phase_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(task_phase_id_));
}

RemoveTaskPhase::~RemoveTaskPhase() {
  // @@protoc_insertion_point(destructor:ServerMSG.RemoveTaskPhase)
  SharedDtor();
}

void RemoveTaskPhase::SharedDtor() {
}

void RemoveTaskPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveTaskPhase& RemoveTaskPhase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveTaskPhase_server_5fmsg_2fserver_5fside_2eproto.base);
  return *internal_default_instance();
}


void RemoveTaskPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMSG.RemoveTaskPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_phase_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(task_phase_id_));
  _internal_metadata_.Clear();
}

const char* RemoveTaskPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 task_phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          task_phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveTaskPhase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMSG.RemoveTaskPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // uint64 task_phase_id = 2;
  if (this->task_phase_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_task_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMSG.RemoveTaskPhase)
  return target;
}

size_t RemoveTaskPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMSG.RemoveTaskPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // uint64 task_phase_id = 2;
  if (this->task_phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_task_phase_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveTaskPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMSG.RemoveTaskPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveTaskPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveTaskPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMSG.RemoveTaskPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMSG.RemoveTaskPhase)
    MergeFrom(*source);
  }
}

void RemoveTaskPhase::MergeFrom(const RemoveTaskPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMSG.RemoveTaskPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.task_phase_id() != 0) {
    _internal_set_task_phase_id(from._internal_task_phase_id());
  }
}

void RemoveTaskPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMSG.RemoveTaskPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveTaskPhase::CopyFrom(const RemoveTaskPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMSG.RemoveTaskPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTaskPhase::IsInitialized() const {
  return true;
}

void RemoveTaskPhase::InternalSwap(RemoveTaskPhase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
  swap(task_phase_id_, other->task_phase_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveTaskPhase::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::ServerMSG::ServerSideMessageOptions >, 11, false >
  server_cmd(kServerCmdFieldNumber, *::ServerMSG::ServerSideMessageOptions::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace ServerMSG
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerMSG::ServerSideMessageOptions* Arena::CreateMaybeMessage< ::ServerMSG::ServerSideMessageOptions >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ServerSideMessageOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ServiceCmd* Arena::CreateMaybeMessage< ::ServerMSG::ServiceCmd >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ServiceCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse* Arena::CreateMaybeMessage< ::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ServiceHttpRequest_KvmapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ServiceHttpRequest* Arena::CreateMaybeMessage< ::ServerMSG::ServiceHttpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ServiceHttpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ServiceHttpResponse* Arena::CreateMaybeMessage< ::ServerMSG::ServiceHttpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ServiceHttpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::MessageTransmit* Arena::CreateMaybeMessage< ::ServerMSG::MessageTransmit >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::MessageTransmit >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ServiceReady* Arena::CreateMaybeMessage< ::ServerMSG::ServiceReady >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ServiceReady >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ServiceRegister* Arena::CreateMaybeMessage< ::ServerMSG::ServiceRegister >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ServiceRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SocketConnect* Arena::CreateMaybeMessage< ::ServerMSG::SocketConnect >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SocketConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SocketClose* Arena::CreateMaybeMessage< ::ServerMSG::SocketClose >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SocketClose >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SocketChangeDest* Arena::CreateMaybeMessage< ::ServerMSG::SocketChangeDest >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SocketChangeDest >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SocketAuth* Arena::CreateMaybeMessage< ::ServerMSG::SocketAuth >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SocketAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SocketLogin* Arena::CreateMaybeMessage< ::ServerMSG::SocketLogin >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SocketLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SocketStartAccept* Arena::CreateMaybeMessage< ::ServerMSG::SocketStartAccept >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SocketStartAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SocketStopAccept* Arena::CreateMaybeMessage< ::ServerMSG::SocketStopAccept >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SocketStopAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::PlayerEnterZone* Arena::CreateMaybeMessage< ::ServerMSG::PlayerEnterZone >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::PlayerEnterZone >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::PlayerChangeZone* Arena::CreateMaybeMessage< ::ServerMSG::PlayerChangeZone >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::PlayerChangeZone >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::PlayerChangeZone_Data* Arena::CreateMaybeMessage< ::ServerMSG::PlayerChangeZone_Data >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::PlayerChangeZone_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::PlayerLogout* Arena::CreateMaybeMessage< ::ServerMSG::PlayerLogout >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::PlayerLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SystemVarChange* Arena::CreateMaybeMessage< ::ServerMSG::SystemVarChange >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SystemVarChange >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SceneCreate* Arena::CreateMaybeMessage< ::ServerMSG::SceneCreate >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SceneCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::PhaseCreate* Arena::CreateMaybeMessage< ::ServerMSG::PhaseCreate >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::PhaseCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::PhaseDestory* Arena::CreateMaybeMessage< ::ServerMSG::PhaseDestory >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::PhaseDestory >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::MonsterGen* Arena::CreateMaybeMessage< ::ServerMSG::MonsterGen >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::MonsterGen >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::MonsterGenMulti* Arena::CreateMaybeMessage< ::ServerMSG::MonsterGenMulti >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::MonsterGenMulti >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::MonsterDestory* Arena::CreateMaybeMessage< ::ServerMSG::MonsterDestory >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::MonsterDestory >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::MonsterGenOnce* Arena::CreateMaybeMessage< ::ServerMSG::MonsterGenOnce >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::MonsterGenOnce >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ActiveGen* Arena::CreateMaybeMessage< ::ServerMSG::ActiveGen >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ActiveGen >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::KillGen* Arena::CreateMaybeMessage< ::ServerMSG::KillGen >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::KillGen >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ActorCreate* Arena::CreateMaybeMessage< ::ServerMSG::ActorCreate >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ActorCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ActorDestory* Arena::CreateMaybeMessage< ::ServerMSG::ActorDestory >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ActorDestory >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ActorMove* Arena::CreateMaybeMessage< ::ServerMSG::ActorMove >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ActorMove >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ActorFlyTo* Arena::CreateMaybeMessage< ::ServerMSG::ActorFlyTo >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ActorFlyTo >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ActorCastSkill* Arena::CreateMaybeMessage< ::ServerMSG::ActorCastSkill >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ActorCastSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ActorCastSkill_Fail* Arena::CreateMaybeMessage< ::ServerMSG::ActorCastSkill_Fail >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ActorCastSkill_Fail >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::ActorSetHide* Arena::CreateMaybeMessage< ::ServerMSG::ActorSetHide >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::ActorSetHide >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamCreate* Arena::CreateMaybeMessage< ::ServerMSG::TeamCreate >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamDestory* Arena::CreateMaybeMessage< ::ServerMSG::TeamDestory >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamDestory >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamQuit* Arena::CreateMaybeMessage< ::ServerMSG::TeamQuit >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamQuit >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamKickMember* Arena::CreateMaybeMessage< ::ServerMSG::TeamKickMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamKickMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamInviteMember* Arena::CreateMaybeMessage< ::ServerMSG::TeamInviteMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamInviteMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamAcceptInvite* Arena::CreateMaybeMessage< ::ServerMSG::TeamAcceptInvite >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamAcceptInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamApplyMember* Arena::CreateMaybeMessage< ::ServerMSG::TeamApplyMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamApplyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamAcceptApply* Arena::CreateMaybeMessage< ::ServerMSG::TeamAcceptApply >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamAcceptApply >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamNewLeader* Arena::CreateMaybeMessage< ::ServerMSG::TeamNewLeader >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamNewLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamAddMember* Arena::CreateMaybeMessage< ::ServerMSG::TeamAddMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamAddMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamDelMember* Arena::CreateMaybeMessage< ::ServerMSG::TeamDelMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamDelMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::TeamMemberInfoList* Arena::CreateMaybeMessage< ::ServerMSG::TeamMemberInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::TeamMemberInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildCreate* Arena::CreateMaybeMessage< ::ServerMSG::GuildCreate >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildDestory* Arena::CreateMaybeMessage< ::ServerMSG::GuildDestory >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildDestory >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildQuit* Arena::CreateMaybeMessage< ::ServerMSG::GuildQuit >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildQuit >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildKickMember* Arena::CreateMaybeMessage< ::ServerMSG::GuildKickMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildKickMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildInviteMember* Arena::CreateMaybeMessage< ::ServerMSG::GuildInviteMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildInviteMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildAcceptInvite* Arena::CreateMaybeMessage< ::ServerMSG::GuildAcceptInvite >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildAcceptInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildApplyMember* Arena::CreateMaybeMessage< ::ServerMSG::GuildApplyMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildApplyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildAcceptApply* Arena::CreateMaybeMessage< ::ServerMSG::GuildAcceptApply >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildAcceptApply >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildNewLeader* Arena::CreateMaybeMessage< ::ServerMSG::GuildNewLeader >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildNewLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildAddMember* Arena::CreateMaybeMessage< ::ServerMSG::GuildAddMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildAddMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildDelMember* Arena::CreateMaybeMessage< ::ServerMSG::GuildDelMember >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildDelMember >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::GuildMemberInfoList* Arena::CreateMaybeMessage< ::ServerMSG::GuildMemberInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::GuildMemberInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::SyncTaskPhase* Arena::CreateMaybeMessage< ::ServerMSG::SyncTaskPhase >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::SyncTaskPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::AddTaskPhase* Arena::CreateMaybeMessage< ::ServerMSG::AddTaskPhase >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::AddTaskPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMSG::RemoveTaskPhase* Arena::CreateMaybeMessage< ::ServerMSG::RemoveTaskPhase >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMSG::RemoveTaskPhase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
