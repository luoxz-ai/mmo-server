// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_proto/globaldb.proto

#include "db_proto/globaldb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace db {
class tbld_dbinfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_dbinfo> _instance;
} _tbld_dbinfo_default_instance_;
class tbld_globalvarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_globalvar> _instance;
} _tbld_globalvar_default_instance_;
class tbld_gmlistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_gmlist> _instance;
} _tbld_gmlist_default_instance_;
class tbld_serverlistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_serverlist> _instance;
} _tbld_serverlist_default_instance_;
class tbld_servicedetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_servicedetail> _instance;
} _tbld_servicedetail_default_instance_;
}  // namespace db
static void InitDefaultsscc_info_tbld_dbinfo_db_5fproto_2fglobaldb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_dbinfo_default_instance_;
    new (ptr) ::db::tbld_dbinfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_dbinfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_dbinfo_db_5fproto_2fglobaldb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_dbinfo_db_5fproto_2fglobaldb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_globalvar_db_5fproto_2fglobaldb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_globalvar_default_instance_;
    new (ptr) ::db::tbld_globalvar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_globalvar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_globalvar_db_5fproto_2fglobaldb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_globalvar_db_5fproto_2fglobaldb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_gmlist_db_5fproto_2fglobaldb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_gmlist_default_instance_;
    new (ptr) ::db::tbld_gmlist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_gmlist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_gmlist_db_5fproto_2fglobaldb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_gmlist_db_5fproto_2fglobaldb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_serverlist_db_5fproto_2fglobaldb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_serverlist_default_instance_;
    new (ptr) ::db::tbld_serverlist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_serverlist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_serverlist_db_5fproto_2fglobaldb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_serverlist_db_5fproto_2fglobaldb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_servicedetail_db_5fproto_2fglobaldb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_servicedetail_default_instance_;
    new (ptr) ::db::tbld_servicedetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_servicedetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_servicedetail_db_5fproto_2fglobaldb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_servicedetail_db_5fproto_2fglobaldb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_db_5fproto_2fglobaldb_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_db_5fproto_2fglobaldb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_db_5fproto_2fglobaldb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_db_5fproto_2fglobaldb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_dbinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_dbinfo, worldid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_dbinfo, db_ip_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_dbinfo, db_port_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_dbinfo, db_name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_dbinfo, db_user_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_dbinfo, db_passwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, key_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, value0_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, value1_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, value2_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, value3_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, value_str0_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, value_str1_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, value_str2_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_globalvar, value_str3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_gmlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_gmlist, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_gmlist, openid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_gmlist, gmlev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_serverlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_serverlist, worldid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_serverlist, server_name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_serverlist, open_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_serverlist, open_status_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_serverlist, publish_addr_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_serverlist, mergeto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, worldid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, service_type_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, service_idx_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, lib_name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, route_addr_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, route_port_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, publish_addr_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, publish_port_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, debug_port_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_servicedetail, bind_addr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::db::tbld_dbinfo)},
  { 11, -1, sizeof(::db::tbld_globalvar)},
  { 25, -1, sizeof(::db::tbld_gmlist)},
  { 33, -1, sizeof(::db::tbld_serverlist)},
  { 44, -1, sizeof(::db::tbld_servicedetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_dbinfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_globalvar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_gmlist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_serverlist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_servicedetail_default_instance_),
};

const char descriptor_table_protodef_db_5fproto_2fglobaldb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027db_proto/globaldb.proto\022\002db\032\035sql_optio"
  "ns/sql_options.proto\"\247\001\n\013tbld_dbinfo\022\034\n\007"
  "worldid\030\001 \001(\rB\013\222\?\010\032\006idx_id\022\025\n\005db_ip\030\002 \001("
  "\tB\006\222\?\003\010\377\001\022\026\n\007db_port\030\003 \001(\rB\005\222\?\0028\020\022\027\n\007db_"
  "name\030\004 \001(\tB\006\222\?\003\010\377\001\022\027\n\007db_user\030\005 \001(\tB\006\222\?\003"
  "\010\377\001\022\031\n\tdb_passwd\030\006 \001(\tB\006\222\?\003\010\377\001\"\332\001\n\016tbld_"
  "globalvar\022\030\n\003key\030\001 \001(\rB\013\222\?\010\032\006idx_id\022\016\n\006v"
  "alue0\030\002 \001(\004\022\016\n\006value1\030\003 \001(\004\022\016\n\006value2\030\004 "
  "\001(\004\022\016\n\006value3\030\005 \001(\004\022\032\n\nvalue_str0\030\006 \001(\tB"
  "\006\222\?\003\010\377\001\022\032\n\nvalue_str1\030\007 \001(\tB\006\222\?\003\010\377\001\022\032\n\nv"
  "alue_str2\030\010 \001(\tB\006\222\?\003\010\377\001\022\032\n\nvalue_str3\030\t "
  "\001(\tB\006\222\?\003\010\377\001\"R\n\013tbld_gmlist\022\034\n\002id\030\001 \001(\004B\020"
  "\222\?\010\032\006idx_id\222\?\002\020\001\022\026\n\006openid\030\002 \001(\tB\006\222\?\003\010\377\001"
  "\022\r\n\005gmlev\030\003 \001(\r\"\257\001\n\017tbld_serverlist\022!\n\007w"
  "orldid\030\001 \001(\rB\020\222\?\0028\020\222\?\010\032\006idx_id\022\033\n\013server"
  "_name\030\002 \001(\tB\006\222\?\003\010\377\001\022\021\n\topen_time\030\003 \001(\r\022\023"
  "\n\013open_status\030\004 \001(\r\022\034\n\014publish_addr\030\005 \001("
  "\tB\006\222\?\003\010\377\001\022\026\n\007mergeto\030\006 \001(\rB\005\222\?\0028\020\"\327\002\n\022tb"
  "ld_servicedetail\022&\n\007worldid\030\001 \001(\rB\025\222\?\0028\020"
  "\222\?\r\032\013idx_worldid\022+\n\014service_type\030\002 \001(\rB\025"
  "\222\?\0028\010\222\?\r\032\013idx_worldid\022*\n\013service_idx\030\003 \001"
  "(\rB\025\222\?\0028\010\222\?\r\032\013idx_worldid\022\030\n\010lib_name\030\004 "
  "\001(\tB\006\222\?\003\010\377\001\022\032\n\nroute_addr\030\005 \001(\tB\006\222\?\003\010\377\001\022"
  "\031\n\nroute_port\030\006 \001(\rB\005\222\?\0028\020\022\034\n\014publish_ad"
  "dr\030\007 \001(\tB\006\222\?\003\010\377\001\022\033\n\014publish_port\030\010 \001(\rB\005"
  "\222\?\0028\020\022\031\n\ndebug_port\030\t \001(\rB\005\222\?\0028\020\022\031\n\tbind"
  "_addr\030\n \001(\tB\006\222\?\003\010\377\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_db_5fproto_2fglobaldb_2eproto_deps[1] = {
  &::descriptor_table_sql_5foptions_2fsql_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_db_5fproto_2fglobaldb_2eproto_sccs[5] = {
  &scc_info_tbld_dbinfo_db_5fproto_2fglobaldb_2eproto.base,
  &scc_info_tbld_globalvar_db_5fproto_2fglobaldb_2eproto.base,
  &scc_info_tbld_gmlist_db_5fproto_2fglobaldb_2eproto.base,
  &scc_info_tbld_serverlist_db_5fproto_2fglobaldb_2eproto.base,
  &scc_info_tbld_servicedetail_db_5fproto_2fglobaldb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_db_5fproto_2fglobaldb_2eproto_once;
static bool descriptor_table_db_5fproto_2fglobaldb_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_5fproto_2fglobaldb_2eproto = {
  &descriptor_table_db_5fproto_2fglobaldb_2eproto_initialized, descriptor_table_protodef_db_5fproto_2fglobaldb_2eproto, "db_proto/globaldb.proto", 1067,
  &descriptor_table_db_5fproto_2fglobaldb_2eproto_once, descriptor_table_db_5fproto_2fglobaldb_2eproto_sccs, descriptor_table_db_5fproto_2fglobaldb_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_db_5fproto_2fglobaldb_2eproto::offsets,
  file_level_metadata_db_5fproto_2fglobaldb_2eproto, 5, file_level_enum_descriptors_db_5fproto_2fglobaldb_2eproto, file_level_service_descriptors_db_5fproto_2fglobaldb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_db_5fproto_2fglobaldb_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_db_5fproto_2fglobaldb_2eproto), true);
namespace db {

// ===================================================================

void tbld_dbinfo::InitAsDefaultInstance() {
}
class tbld_dbinfo::_Internal {
 public:
};

tbld_dbinfo::tbld_dbinfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_dbinfo)
}
tbld_dbinfo::tbld_dbinfo(const tbld_dbinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_ip().empty()) {
    db_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_ip_);
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  db_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_user().empty()) {
    db_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_user_);
  }
  db_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_passwd().empty()) {
    db_passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_passwd_);
  }
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&db_port_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(db_port_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_dbinfo)
}

void tbld_dbinfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_dbinfo_db_5fproto_2fglobaldb_2eproto.base);
  db_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_port_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(db_port_));
}

tbld_dbinfo::~tbld_dbinfo() {
  // @@protoc_insertion_point(destructor:db.tbld_dbinfo)
  SharedDtor();
}

void tbld_dbinfo::SharedDtor() {
  db_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_dbinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_dbinfo& tbld_dbinfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_dbinfo_db_5fproto_2fglobaldb_2eproto.base);
  return *internal_default_instance();
}


void tbld_dbinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_dbinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_port_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(db_port_));
  _internal_metadata_.Clear();
}

const char* tbld_dbinfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 worldid = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_ip = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_db_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_dbinfo.db_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 db_port = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          db_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_dbinfo.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_user = 5 [(.sql) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_db_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_dbinfo.db_user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_passwd = 6 [(.sql) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_db_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_dbinfo.db_passwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_dbinfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_dbinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 worldid = 1 [(.sql) = {
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_worldid(), target);
  }

  // string db_ip = 2 [(.sql) = {
  if (this->db_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_ip().data(), static_cast<int>(this->_internal_db_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_dbinfo.db_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_ip(), target);
  }

  // uint32 db_port = 3 [(.sql) = {
  if (this->db_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_db_port(), target);
  }

  // string db_name = 4 [(.sql) = {
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_dbinfo.db_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_db_name(), target);
  }

  // string db_user = 5 [(.sql) = {
  if (this->db_user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_user().data(), static_cast<int>(this->_internal_db_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_dbinfo.db_user");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_db_user(), target);
  }

  // string db_passwd = 6 [(.sql) = {
  if (this->db_passwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_passwd().data(), static_cast<int>(this->_internal_db_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_dbinfo.db_passwd");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_db_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_dbinfo)
  return target;
}

size_t tbld_dbinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_dbinfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_ip = 2 [(.sql) = {
  if (this->db_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_ip());
  }

  // string db_name = 4 [(.sql) = {
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string db_user = 5 [(.sql) = {
  if (this->db_user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_user());
  }

  // string db_passwd = 6 [(.sql) = {
  if (this->db_passwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_passwd());
  }

  // uint32 worldid = 1 [(.sql) = {
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_worldid());
  }

  // uint32 db_port = 3 [(.sql) = {
  if (this->db_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_db_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_dbinfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_dbinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_dbinfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_dbinfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_dbinfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_dbinfo)
    MergeFrom(*source);
  }
}

void tbld_dbinfo::MergeFrom(const tbld_dbinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_dbinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_ip().size() > 0) {

    db_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_ip_);
  }
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.db_user().size() > 0) {

    db_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_user_);
  }
  if (from.db_passwd().size() > 0) {

    db_passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_passwd_);
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.db_port() != 0) {
    _internal_set_db_port(from._internal_db_port());
  }
}

void tbld_dbinfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_dbinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_dbinfo::CopyFrom(const tbld_dbinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_dbinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_dbinfo::IsInitialized() const {
  return true;
}

void tbld_dbinfo::InternalSwap(tbld_dbinfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_ip_.Swap(&other->db_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_user_.Swap(&other->db_user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_passwd_.Swap(&other->db_passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(worldid_, other->worldid_);
  swap(db_port_, other->db_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_dbinfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_globalvar::InitAsDefaultInstance() {
}
class tbld_globalvar::_Internal {
 public:
};

tbld_globalvar::tbld_globalvar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_globalvar)
}
tbld_globalvar::tbld_globalvar(const tbld_globalvar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_str0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_str0().empty()) {
    value_str0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str0_);
  }
  value_str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_str1().empty()) {
    value_str1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str1_);
  }
  value_str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_str2().empty()) {
    value_str2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str2_);
  }
  value_str3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_str3().empty()) {
    value_str3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str3_);
  }
  ::memcpy(&value0_, &from.value0_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&value0_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_globalvar)
}

void tbld_globalvar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_globalvar_db_5fproto_2fglobaldb_2eproto.base);
  value_str0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value0_)) + sizeof(key_));
}

tbld_globalvar::~tbld_globalvar() {
  // @@protoc_insertion_point(destructor:db.tbld_globalvar)
  SharedDtor();
}

void tbld_globalvar::SharedDtor() {
  value_str0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_globalvar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_globalvar& tbld_globalvar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_globalvar_db_5fproto_2fglobaldb_2eproto.base);
  return *internal_default_instance();
}


void tbld_globalvar::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_globalvar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_str0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_str3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&value0_)) + sizeof(key_));
  _internal_metadata_.Clear();
}

const char* tbld_globalvar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          value2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          value3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_str0 = 6 [(.sql) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_value_str0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_globalvar.value_str0"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_str1 = 7 [(.sql) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_value_str1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_globalvar.value_str1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_str2 = 8 [(.sql) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_value_str2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_globalvar.value_str2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_str3 = 9 [(.sql) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_value_str3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_globalvar.value_str3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_globalvar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_globalvar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1 [(.sql) = {
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // uint64 value0 = 2;
  if (this->value0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value0(), target);
  }

  // uint64 value1 = 3;
  if (this->value1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value1(), target);
  }

  // uint64 value2 = 4;
  if (this->value2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_value2(), target);
  }

  // uint64 value3 = 5;
  if (this->value3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_value3(), target);
  }

  // string value_str0 = 6 [(.sql) = {
  if (this->value_str0().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_str0().data(), static_cast<int>(this->_internal_value_str0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_globalvar.value_str0");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value_str0(), target);
  }

  // string value_str1 = 7 [(.sql) = {
  if (this->value_str1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_str1().data(), static_cast<int>(this->_internal_value_str1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_globalvar.value_str1");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_value_str1(), target);
  }

  // string value_str2 = 8 [(.sql) = {
  if (this->value_str2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_str2().data(), static_cast<int>(this->_internal_value_str2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_globalvar.value_str2");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_value_str2(), target);
  }

  // string value_str3 = 9 [(.sql) = {
  if (this->value_str3().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_str3().data(), static_cast<int>(this->_internal_value_str3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_globalvar.value_str3");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_value_str3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_globalvar)
  return target;
}

size_t tbld_globalvar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_globalvar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value_str0 = 6 [(.sql) = {
  if (this->value_str0().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_str0());
  }

  // string value_str1 = 7 [(.sql) = {
  if (this->value_str1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_str1());
  }

  // string value_str2 = 8 [(.sql) = {
  if (this->value_str2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_str2());
  }

  // string value_str3 = 9 [(.sql) = {
  if (this->value_str3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_str3());
  }

  // uint64 value0 = 2;
  if (this->value0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value0());
  }

  // uint64 value1 = 3;
  if (this->value1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value1());
  }

  // uint64 value2 = 4;
  if (this->value2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value2());
  }

  // uint64 value3 = 5;
  if (this->value3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value3());
  }

  // uint32 key = 1 [(.sql) = {
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_globalvar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_globalvar)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_globalvar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_globalvar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_globalvar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_globalvar)
    MergeFrom(*source);
  }
}

void tbld_globalvar::MergeFrom(const tbld_globalvar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_globalvar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value_str0().size() > 0) {

    value_str0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str0_);
  }
  if (from.value_str1().size() > 0) {

    value_str1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str1_);
  }
  if (from.value_str2().size() > 0) {

    value_str2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str2_);
  }
  if (from.value_str3().size() > 0) {

    value_str3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str3_);
  }
  if (from.value0() != 0) {
    _internal_set_value0(from._internal_value0());
  }
  if (from.value1() != 0) {
    _internal_set_value1(from._internal_value1());
  }
  if (from.value2() != 0) {
    _internal_set_value2(from._internal_value2());
  }
  if (from.value3() != 0) {
    _internal_set_value3(from._internal_value3());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void tbld_globalvar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_globalvar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_globalvar::CopyFrom(const tbld_globalvar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_globalvar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_globalvar::IsInitialized() const {
  return true;
}

void tbld_globalvar::InternalSwap(tbld_globalvar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_str0_.Swap(&other->value_str0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_str1_.Swap(&other->value_str1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_str2_.Swap(&other->value_str2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_str3_.Swap(&other->value_str3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value0_, other->value0_);
  swap(value1_, other->value1_);
  swap(value2_, other->value2_);
  swap(value3_, other->value3_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_globalvar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_gmlist::InitAsDefaultInstance() {
}
class tbld_gmlist::_Internal {
 public:
};

tbld_gmlist::tbld_gmlist()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_gmlist)
}
tbld_gmlist::tbld_gmlist(const tbld_gmlist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openid().empty()) {
    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gmlev_) -
    reinterpret_cast<char*>(&id_)) + sizeof(gmlev_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_gmlist)
}

void tbld_gmlist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_gmlist_db_5fproto_2fglobaldb_2eproto.base);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gmlev_) -
      reinterpret_cast<char*>(&id_)) + sizeof(gmlev_));
}

tbld_gmlist::~tbld_gmlist() {
  // @@protoc_insertion_point(destructor:db.tbld_gmlist)
  SharedDtor();
}

void tbld_gmlist::SharedDtor() {
  openid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_gmlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_gmlist& tbld_gmlist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_gmlist_db_5fproto_2fglobaldb_2eproto.base);
  return *internal_default_instance();
}


void tbld_gmlist::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_gmlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gmlev_) -
      reinterpret_cast<char*>(&id_)) + sizeof(gmlev_));
  _internal_metadata_.Clear();
}

const char* tbld_gmlist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string openid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_openid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_gmlist.openid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gmlev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gmlev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_gmlist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_gmlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string openid = 2 [(.sql) = {
  if (this->openid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_gmlist.openid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_openid(), target);
  }

  // uint32 gmlev = 3;
  if (this->gmlev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gmlev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_gmlist)
  return target;
}

size_t tbld_gmlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_gmlist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openid = 2 [(.sql) = {
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 gmlev = 3;
  if (this->gmlev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gmlev());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_gmlist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_gmlist)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_gmlist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_gmlist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_gmlist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_gmlist)
    MergeFrom(*source);
  }
}

void tbld_gmlist::MergeFrom(const tbld_gmlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_gmlist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.gmlev() != 0) {
    _internal_set_gmlev(from._internal_gmlev());
  }
}

void tbld_gmlist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_gmlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_gmlist::CopyFrom(const tbld_gmlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_gmlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_gmlist::IsInitialized() const {
  return true;
}

void tbld_gmlist::InternalSwap(tbld_gmlist* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  openid_.Swap(&other->openid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(gmlev_, other->gmlev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_gmlist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_serverlist::InitAsDefaultInstance() {
}
class tbld_serverlist::_Internal {
 public:
};

tbld_serverlist::tbld_serverlist()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_serverlist)
}
tbld_serverlist::tbld_serverlist(const tbld_serverlist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_name().empty()) {
    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  publish_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publish_addr().empty()) {
    publish_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publish_addr_);
  }
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mergeto_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(mergeto_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_serverlist)
}

void tbld_serverlist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_serverlist_db_5fproto_2fglobaldb_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publish_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mergeto_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(mergeto_));
}

tbld_serverlist::~tbld_serverlist() {
  // @@protoc_insertion_point(destructor:db.tbld_serverlist)
  SharedDtor();
}

void tbld_serverlist::SharedDtor() {
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publish_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_serverlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_serverlist& tbld_serverlist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_serverlist_db_5fproto_2fglobaldb_2eproto.base);
  return *internal_default_instance();
}


void tbld_serverlist::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_serverlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publish_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mergeto_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(mergeto_));
  _internal_metadata_.Clear();
}

const char* tbld_serverlist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 worldid = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_name = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_serverlist.server_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 open_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 open_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          open_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string publish_addr = 5 [(.sql) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_publish_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_serverlist.publish_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mergeto = 6 [(.sql) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          mergeto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_serverlist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_serverlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 worldid = 1 [(.sql) = {
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_worldid(), target);
  }

  // string server_name = 2 [(.sql) = {
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_serverlist.server_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_name(), target);
  }

  // uint32 open_time = 3;
  if (this->open_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_open_time(), target);
  }

  // uint32 open_status = 4;
  if (this->open_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_open_status(), target);
  }

  // string publish_addr = 5 [(.sql) = {
  if (this->publish_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publish_addr().data(), static_cast<int>(this->_internal_publish_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_serverlist.publish_addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_publish_addr(), target);
  }

  // uint32 mergeto = 6 [(.sql) = {
  if (this->mergeto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mergeto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_serverlist)
  return target;
}

size_t tbld_serverlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_serverlist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_name = 2 [(.sql) = {
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_name());
  }

  // string publish_addr = 5 [(.sql) = {
  if (this->publish_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publish_addr());
  }

  // uint32 worldid = 1 [(.sql) = {
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_worldid());
  }

  // uint32 open_time = 3;
  if (this->open_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_open_time());
  }

  // uint32 open_status = 4;
  if (this->open_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_open_status());
  }

  // uint32 mergeto = 6 [(.sql) = {
  if (this->mergeto() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mergeto());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_serverlist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_serverlist)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_serverlist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_serverlist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_serverlist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_serverlist)
    MergeFrom(*source);
  }
}

void tbld_serverlist::MergeFrom(const tbld_serverlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_serverlist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.publish_addr().size() > 0) {

    publish_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publish_addr_);
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.open_time() != 0) {
    _internal_set_open_time(from._internal_open_time());
  }
  if (from.open_status() != 0) {
    _internal_set_open_status(from._internal_open_status());
  }
  if (from.mergeto() != 0) {
    _internal_set_mergeto(from._internal_mergeto());
  }
}

void tbld_serverlist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_serverlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_serverlist::CopyFrom(const tbld_serverlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_serverlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_serverlist::IsInitialized() const {
  return true;
}

void tbld_serverlist::InternalSwap(tbld_serverlist* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publish_addr_.Swap(&other->publish_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(worldid_, other->worldid_);
  swap(open_time_, other->open_time_);
  swap(open_status_, other->open_status_);
  swap(mergeto_, other->mergeto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_serverlist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_servicedetail::InitAsDefaultInstance() {
}
class tbld_servicedetail::_Internal {
 public:
};

tbld_servicedetail::tbld_servicedetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_servicedetail)
}
tbld_servicedetail::tbld_servicedetail(const tbld_servicedetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lib_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lib_name().empty()) {
    lib_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lib_name_);
  }
  route_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_route_addr().empty()) {
    route_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_addr_);
  }
  publish_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publish_addr().empty()) {
    publish_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publish_addr_);
  }
  bind_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bind_addr().empty()) {
    bind_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bind_addr_);
  }
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_port_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(debug_port_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_servicedetail)
}

void tbld_servicedetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_servicedetail_db_5fproto_2fglobaldb_2eproto.base);
  lib_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publish_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_port_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(debug_port_));
}

tbld_servicedetail::~tbld_servicedetail() {
  // @@protoc_insertion_point(destructor:db.tbld_servicedetail)
  SharedDtor();
}

void tbld_servicedetail::SharedDtor() {
  lib_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publish_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_servicedetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_servicedetail& tbld_servicedetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_servicedetail_db_5fproto_2fglobaldb_2eproto.base);
  return *internal_default_instance();
}


void tbld_servicedetail::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_servicedetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lib_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publish_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_port_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(debug_port_));
  _internal_metadata_.Clear();
}

const char* tbld_servicedetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 worldid = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 service_type = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          service_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 service_idx = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          service_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lib_name = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lib_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_servicedetail.lib_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string route_addr = 5 [(.sql) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_route_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_servicedetail.route_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 route_port = 6 [(.sql) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          route_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string publish_addr = 7 [(.sql) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_publish_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_servicedetail.publish_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 publish_port = 8 [(.sql) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          publish_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 debug_port = 9 [(.sql) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          debug_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bind_addr = 10 [(.sql) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_bind_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_servicedetail.bind_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_servicedetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_servicedetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 worldid = 1 [(.sql) = {
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_worldid(), target);
  }

  // uint32 service_type = 2 [(.sql) = {
  if (this->service_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_service_type(), target);
  }

  // uint32 service_idx = 3 [(.sql) = {
  if (this->service_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_service_idx(), target);
  }

  // string lib_name = 4 [(.sql) = {
  if (this->lib_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lib_name().data(), static_cast<int>(this->_internal_lib_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_servicedetail.lib_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lib_name(), target);
  }

  // string route_addr = 5 [(.sql) = {
  if (this->route_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_addr().data(), static_cast<int>(this->_internal_route_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_servicedetail.route_addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_route_addr(), target);
  }

  // uint32 route_port = 6 [(.sql) = {
  if (this->route_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_route_port(), target);
  }

  // string publish_addr = 7 [(.sql) = {
  if (this->publish_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publish_addr().data(), static_cast<int>(this->_internal_publish_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_servicedetail.publish_addr");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_publish_addr(), target);
  }

  // uint32 publish_port = 8 [(.sql) = {
  if (this->publish_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_publish_port(), target);
  }

  // uint32 debug_port = 9 [(.sql) = {
  if (this->debug_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_debug_port(), target);
  }

  // string bind_addr = 10 [(.sql) = {
  if (this->bind_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bind_addr().data(), static_cast<int>(this->_internal_bind_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_servicedetail.bind_addr");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_bind_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_servicedetail)
  return target;
}

size_t tbld_servicedetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_servicedetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lib_name = 4 [(.sql) = {
  if (this->lib_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lib_name());
  }

  // string route_addr = 5 [(.sql) = {
  if (this->route_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_addr());
  }

  // string publish_addr = 7 [(.sql) = {
  if (this->publish_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publish_addr());
  }

  // string bind_addr = 10 [(.sql) = {
  if (this->bind_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bind_addr());
  }

  // uint32 worldid = 1 [(.sql) = {
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_worldid());
  }

  // uint32 service_type = 2 [(.sql) = {
  if (this->service_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_type());
  }

  // uint32 service_idx = 3 [(.sql) = {
  if (this->service_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_idx());
  }

  // uint32 route_port = 6 [(.sql) = {
  if (this->route_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_route_port());
  }

  // uint32 publish_port = 8 [(.sql) = {
  if (this->publish_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_publish_port());
  }

  // uint32 debug_port = 9 [(.sql) = {
  if (this->debug_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_debug_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_servicedetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_servicedetail)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_servicedetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_servicedetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_servicedetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_servicedetail)
    MergeFrom(*source);
  }
}

void tbld_servicedetail::MergeFrom(const tbld_servicedetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_servicedetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lib_name().size() > 0) {

    lib_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lib_name_);
  }
  if (from.route_addr().size() > 0) {

    route_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_addr_);
  }
  if (from.publish_addr().size() > 0) {

    publish_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publish_addr_);
  }
  if (from.bind_addr().size() > 0) {

    bind_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bind_addr_);
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.service_type() != 0) {
    _internal_set_service_type(from._internal_service_type());
  }
  if (from.service_idx() != 0) {
    _internal_set_service_idx(from._internal_service_idx());
  }
  if (from.route_port() != 0) {
    _internal_set_route_port(from._internal_route_port());
  }
  if (from.publish_port() != 0) {
    _internal_set_publish_port(from._internal_publish_port());
  }
  if (from.debug_port() != 0) {
    _internal_set_debug_port(from._internal_debug_port());
  }
}

void tbld_servicedetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_servicedetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_servicedetail::CopyFrom(const tbld_servicedetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_servicedetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_servicedetail::IsInitialized() const {
  return true;
}

void tbld_servicedetail::InternalSwap(tbld_servicedetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lib_name_.Swap(&other->lib_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_addr_.Swap(&other->route_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publish_addr_.Swap(&other->publish_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bind_addr_.Swap(&other->bind_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(worldid_, other->worldid_);
  swap(service_type_, other->service_type_);
  swap(service_idx_, other->service_idx_);
  swap(route_port_, other->route_port_);
  swap(publish_port_, other->publish_port_);
  swap(debug_port_, other->debug_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_servicedetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::db::tbld_dbinfo* Arena::CreateMaybeMessage< ::db::tbld_dbinfo >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_dbinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_globalvar* Arena::CreateMaybeMessage< ::db::tbld_globalvar >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_globalvar >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_gmlist* Arena::CreateMaybeMessage< ::db::tbld_gmlist >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_gmlist >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_serverlist* Arena::CreateMaybeMessage< ::db::tbld_serverlist >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_serverlist >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_servicedetail* Arena::CreateMaybeMessage< ::db::tbld_servicedetail >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_servicedetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
