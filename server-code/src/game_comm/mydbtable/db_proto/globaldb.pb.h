// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_proto/globaldb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_5fproto_2fglobaldb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_5fproto_2fglobaldb_2eproto

#include <google/protobuf/port_def.inc>
#include <limits>
#include <string>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>

#include "sql_options/sql_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_5fproto_2fglobaldb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
    class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_5fproto_2fglobaldb_2eproto
{
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField          entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable               schema[5] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata            field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable       serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32                             offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_5fproto_2fglobaldb_2eproto;
namespace db
{
    class tbld_dbinfo;
    class tbld_dbinfoDefaultTypeInternal;
    extern tbld_dbinfoDefaultTypeInternal _tbld_dbinfo_default_instance_;
    class tbld_globalvar;
    class tbld_globalvarDefaultTypeInternal;
    extern tbld_globalvarDefaultTypeInternal _tbld_globalvar_default_instance_;
    class tbld_gmlist;
    class tbld_gmlistDefaultTypeInternal;
    extern tbld_gmlistDefaultTypeInternal _tbld_gmlist_default_instance_;
    class tbld_serverlist;
    class tbld_serverlistDefaultTypeInternal;
    extern tbld_serverlistDefaultTypeInternal _tbld_serverlist_default_instance_;
    class tbld_servicedetail;
    class tbld_servicedetailDefaultTypeInternal;
    extern tbld_servicedetailDefaultTypeInternal _tbld_servicedetail_default_instance_;
} // namespace db
PROTOBUF_NAMESPACE_OPEN
template<>
::db::tbld_dbinfo* Arena::CreateMaybeMessage<::db::tbld_dbinfo>(Arena*);
template<>
::db::tbld_globalvar* Arena::CreateMaybeMessage<::db::tbld_globalvar>(Arena*);
template<>
::db::tbld_gmlist* Arena::CreateMaybeMessage<::db::tbld_gmlist>(Arena*);
template<>
::db::tbld_serverlist* Arena::CreateMaybeMessage<::db::tbld_serverlist>(Arena*);
template<>
::db::tbld_servicedetail* Arena::CreateMaybeMessage<::db::tbld_servicedetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace db
{

    // ===================================================================

    class tbld_dbinfo : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.tbld_dbinfo) */
    {
    public:
        tbld_dbinfo();
        virtual ~tbld_dbinfo();

        tbld_dbinfo(const tbld_dbinfo& from);
        tbld_dbinfo(tbld_dbinfo&& from) noexcept
            : tbld_dbinfo()
        {
            *this = ::std::move(from);
        }

        inline tbld_dbinfo& operator=(const tbld_dbinfo& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline tbld_dbinfo& operator=(tbld_dbinfo&& from) noexcept
        {
            if(GetArenaNoVirtual() == from.GetArenaNoVirtual())
            {
                if(this != &from)
                    InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
        static const tbld_dbinfo&                         default_instance();

        static void                      InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
        static inline const tbld_dbinfo* internal_default_instance() { return reinterpret_cast<const tbld_dbinfo*>(&_tbld_dbinfo_default_instance_); }
        static constexpr int             kIndexInFileMessages = 0;

        friend void swap(tbld_dbinfo& a, tbld_dbinfo& b) { a.Swap(&b); }
        inline void Swap(tbld_dbinfo* other)
        {
            if(other == this)
                return;
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        inline tbld_dbinfo* New() const final { return CreateMaybeMessage<tbld_dbinfo>(nullptr); }

        tbld_dbinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final { return CreateMaybeMessage<tbld_dbinfo>(arena); }
        void         CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void         MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void         CopyFrom(const tbld_dbinfo& from);
        void         MergeFrom(const tbld_dbinfo& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool                                  IsInitialized() const final;

        size_t                          ByteSizeLong() const final;
        const char*                     _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8*                   target,
                                                           ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int                             GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void        SetCachedSize(int size) const final;
        void        InternalSwap(tbld_dbinfo* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "db.tbld_dbinfo"; }

    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const { return nullptr; }
        inline void*                           MaybeArenaPtr() const { return nullptr; }

    public:
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
        {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_5fproto_2fglobaldb_2eproto);
            return ::descriptor_table_db_5fproto_2fglobaldb_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:
        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kDbIpFieldNumber     = 2,
            kDbNameFieldNumber   = 4,
            kDbUserFieldNumber   = 5,
            kDbPasswdFieldNumber = 6,
            kWorldidFieldNumber  = 1,
            kDbPortFieldNumber   = 3,
        };
        // string db_ip = 2 [(.sql) = {
        void               clear_db_ip();
        const std::string& db_ip() const;
        void               set_db_ip(const std::string& value);
        void               set_db_ip(std::string&& value);
        void               set_db_ip(const char* value);
        void               set_db_ip(const char* value, size_t size);
        std::string*       mutable_db_ip();
        std::string*       release_db_ip();
        void               set_allocated_db_ip(std::string* db_ip);

    private:
        const std::string& _internal_db_ip() const;
        void               _internal_set_db_ip(const std::string& value);
        std::string*       _internal_mutable_db_ip();

    public:
        // string db_name = 4 [(.sql) = {
        void               clear_db_name();
        const std::string& db_name() const;
        void               set_db_name(const std::string& value);
        void               set_db_name(std::string&& value);
        void               set_db_name(const char* value);
        void               set_db_name(const char* value, size_t size);
        std::string*       mutable_db_name();
        std::string*       release_db_name();
        void               set_allocated_db_name(std::string* db_name);

    private:
        const std::string& _internal_db_name() const;
        void               _internal_set_db_name(const std::string& value);
        std::string*       _internal_mutable_db_name();

    public:
        // string db_user = 5 [(.sql) = {
        void               clear_db_user();
        const std::string& db_user() const;
        void               set_db_user(const std::string& value);
        void               set_db_user(std::string&& value);
        void               set_db_user(const char* value);
        void               set_db_user(const char* value, size_t size);
        std::string*       mutable_db_user();
        std::string*       release_db_user();
        void               set_allocated_db_user(std::string* db_user);

    private:
        const std::string& _internal_db_user() const;
        void               _internal_set_db_user(const std::string& value);
        std::string*       _internal_mutable_db_user();

    public:
        // string db_passwd = 6 [(.sql) = {
        void               clear_db_passwd();
        const std::string& db_passwd() const;
        void               set_db_passwd(const std::string& value);
        void               set_db_passwd(std::string&& value);
        void               set_db_passwd(const char* value);
        void               set_db_passwd(const char* value, size_t size);
        std::string*       mutable_db_passwd();
        std::string*       release_db_passwd();
        void               set_allocated_db_passwd(std::string* db_passwd);

    private:
        const std::string& _internal_db_passwd() const;
        void               _internal_set_db_passwd(const std::string& value);
        std::string*       _internal_mutable_db_passwd();

    public:
        // uint32 worldid = 1 [(.sql) = {
        void                            clear_worldid();
        ::PROTOBUF_NAMESPACE_ID::uint32 worldid() const;
        void                            set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_worldid() const;
        void                            _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 db_port = 3 [(.sql) = {
        void                            clear_db_port();
        ::PROTOBUF_NAMESPACE_ID::uint32 db_port() const;
        void                            set_db_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_db_port() const;
        void                            _internal_set_db_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // @@protoc_insertion_point(class_scope:db.tbld_dbinfo)
    private:
        class _Internal;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            db_ip_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            db_name_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            db_user_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            db_passwd_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              worldid_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              db_port_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize        _cached_size_;
        friend struct ::TableStruct_db_5fproto_2fglobaldb_2eproto;
    };
    // -------------------------------------------------------------------

    class tbld_globalvar : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.tbld_globalvar) */
    {
    public:
        tbld_globalvar();
        virtual ~tbld_globalvar();

        tbld_globalvar(const tbld_globalvar& from);
        tbld_globalvar(tbld_globalvar&& from) noexcept
            : tbld_globalvar()
        {
            *this = ::std::move(from);
        }

        inline tbld_globalvar& operator=(const tbld_globalvar& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline tbld_globalvar& operator=(tbld_globalvar&& from) noexcept
        {
            if(GetArenaNoVirtual() == from.GetArenaNoVirtual())
            {
                if(this != &from)
                    InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
        static const tbld_globalvar&                      default_instance();

        static void                         InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
        static inline const tbld_globalvar* internal_default_instance()
        {
            return reinterpret_cast<const tbld_globalvar*>(&_tbld_globalvar_default_instance_);
        }
        static constexpr int kIndexInFileMessages = 1;

        friend void swap(tbld_globalvar& a, tbld_globalvar& b) { a.Swap(&b); }
        inline void Swap(tbld_globalvar* other)
        {
            if(other == this)
                return;
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        inline tbld_globalvar* New() const final { return CreateMaybeMessage<tbld_globalvar>(nullptr); }

        tbld_globalvar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final { return CreateMaybeMessage<tbld_globalvar>(arena); }
        void            CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void            MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void            CopyFrom(const tbld_globalvar& from);
        void            MergeFrom(const tbld_globalvar& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool                                  IsInitialized() const final;

        size_t                          ByteSizeLong() const final;
        const char*                     _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8*                   target,
                                                           ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int                             GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void        SetCachedSize(int size) const final;
        void        InternalSwap(tbld_globalvar* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "db.tbld_globalvar"; }

    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const { return nullptr; }
        inline void*                           MaybeArenaPtr() const { return nullptr; }

    public:
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
        {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_5fproto_2fglobaldb_2eproto);
            return ::descriptor_table_db_5fproto_2fglobaldb_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:
        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kValueStr0FieldNumber = 6,
            kValueStr1FieldNumber = 7,
            kValueStr2FieldNumber = 8,
            kValueStr3FieldNumber = 9,
            kValue0FieldNumber    = 2,
            kValue1FieldNumber    = 3,
            kValue2FieldNumber    = 4,
            kValue3FieldNumber    = 5,
            kKeyFieldNumber       = 1,
        };
        // string value_str0 = 6 [(.sql) = {
        void               clear_value_str0();
        const std::string& value_str0() const;
        void               set_value_str0(const std::string& value);
        void               set_value_str0(std::string&& value);
        void               set_value_str0(const char* value);
        void               set_value_str0(const char* value, size_t size);
        std::string*       mutable_value_str0();
        std::string*       release_value_str0();
        void               set_allocated_value_str0(std::string* value_str0);

    private:
        const std::string& _internal_value_str0() const;
        void               _internal_set_value_str0(const std::string& value);
        std::string*       _internal_mutable_value_str0();

    public:
        // string value_str1 = 7 [(.sql) = {
        void               clear_value_str1();
        const std::string& value_str1() const;
        void               set_value_str1(const std::string& value);
        void               set_value_str1(std::string&& value);
        void               set_value_str1(const char* value);
        void               set_value_str1(const char* value, size_t size);
        std::string*       mutable_value_str1();
        std::string*       release_value_str1();
        void               set_allocated_value_str1(std::string* value_str1);

    private:
        const std::string& _internal_value_str1() const;
        void               _internal_set_value_str1(const std::string& value);
        std::string*       _internal_mutable_value_str1();

    public:
        // string value_str2 = 8 [(.sql) = {
        void               clear_value_str2();
        const std::string& value_str2() const;
        void               set_value_str2(const std::string& value);
        void               set_value_str2(std::string&& value);
        void               set_value_str2(const char* value);
        void               set_value_str2(const char* value, size_t size);
        std::string*       mutable_value_str2();
        std::string*       release_value_str2();
        void               set_allocated_value_str2(std::string* value_str2);

    private:
        const std::string& _internal_value_str2() const;
        void               _internal_set_value_str2(const std::string& value);
        std::string*       _internal_mutable_value_str2();

    public:
        // string value_str3 = 9 [(.sql) = {
        void               clear_value_str3();
        const std::string& value_str3() const;
        void               set_value_str3(const std::string& value);
        void               set_value_str3(std::string&& value);
        void               set_value_str3(const char* value);
        void               set_value_str3(const char* value, size_t size);
        std::string*       mutable_value_str3();
        std::string*       release_value_str3();
        void               set_allocated_value_str3(std::string* value_str3);

    private:
        const std::string& _internal_value_str3() const;
        void               _internal_set_value_str3(const std::string& value);
        std::string*       _internal_mutable_value_str3();

    public:
        // uint64 value0 = 2;
        void                            clear_value0();
        ::PROTOBUF_NAMESPACE_ID::uint64 value0() const;
        void                            set_value0(::PROTOBUF_NAMESPACE_ID::uint64 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value0() const;
        void                            _internal_set_value0(::PROTOBUF_NAMESPACE_ID::uint64 value);

    public:
        // uint64 value1 = 3;
        void                            clear_value1();
        ::PROTOBUF_NAMESPACE_ID::uint64 value1() const;
        void                            set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value1() const;
        void                            _internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value);

    public:
        // uint64 value2 = 4;
        void                            clear_value2();
        ::PROTOBUF_NAMESPACE_ID::uint64 value2() const;
        void                            set_value2(::PROTOBUF_NAMESPACE_ID::uint64 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value2() const;
        void                            _internal_set_value2(::PROTOBUF_NAMESPACE_ID::uint64 value);

    public:
        // uint64 value3 = 5;
        void                            clear_value3();
        ::PROTOBUF_NAMESPACE_ID::uint64 value3() const;
        void                            set_value3(::PROTOBUF_NAMESPACE_ID::uint64 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value3() const;
        void                            _internal_set_value3(::PROTOBUF_NAMESPACE_ID::uint64 value);

    public:
        // uint32 key = 1 [(.sql) = {
        void                            clear_key();
        ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
        void                            set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
        void                            _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // @@protoc_insertion_point(class_scope:db.tbld_globalvar)
    private:
        class _Internal;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            value_str0_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            value_str1_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            value_str2_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            value_str3_;
        ::PROTOBUF_NAMESPACE_ID::uint64                              value0_;
        ::PROTOBUF_NAMESPACE_ID::uint64                              value1_;
        ::PROTOBUF_NAMESPACE_ID::uint64                              value2_;
        ::PROTOBUF_NAMESPACE_ID::uint64                              value3_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              key_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize        _cached_size_;
        friend struct ::TableStruct_db_5fproto_2fglobaldb_2eproto;
    };
    // -------------------------------------------------------------------

    class tbld_gmlist : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.tbld_gmlist) */
    {
    public:
        tbld_gmlist();
        virtual ~tbld_gmlist();

        tbld_gmlist(const tbld_gmlist& from);
        tbld_gmlist(tbld_gmlist&& from) noexcept
            : tbld_gmlist()
        {
            *this = ::std::move(from);
        }

        inline tbld_gmlist& operator=(const tbld_gmlist& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline tbld_gmlist& operator=(tbld_gmlist&& from) noexcept
        {
            if(GetArenaNoVirtual() == from.GetArenaNoVirtual())
            {
                if(this != &from)
                    InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
        static const tbld_gmlist&                         default_instance();

        static void                      InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
        static inline const tbld_gmlist* internal_default_instance() { return reinterpret_cast<const tbld_gmlist*>(&_tbld_gmlist_default_instance_); }
        static constexpr int             kIndexInFileMessages = 2;

        friend void swap(tbld_gmlist& a, tbld_gmlist& b) { a.Swap(&b); }
        inline void Swap(tbld_gmlist* other)
        {
            if(other == this)
                return;
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        inline tbld_gmlist* New() const final { return CreateMaybeMessage<tbld_gmlist>(nullptr); }

        tbld_gmlist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final { return CreateMaybeMessage<tbld_gmlist>(arena); }
        void         CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void         MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void         CopyFrom(const tbld_gmlist& from);
        void         MergeFrom(const tbld_gmlist& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool                                  IsInitialized() const final;

        size_t                          ByteSizeLong() const final;
        const char*                     _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8*                   target,
                                                           ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int                             GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void        SetCachedSize(int size) const final;
        void        InternalSwap(tbld_gmlist* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "db.tbld_gmlist"; }

    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const { return nullptr; }
        inline void*                           MaybeArenaPtr() const { return nullptr; }

    public:
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
        {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_5fproto_2fglobaldb_2eproto);
            return ::descriptor_table_db_5fproto_2fglobaldb_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:
        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kOpenidFieldNumber = 2,
            kIdFieldNumber     = 1,
            kGmlevFieldNumber  = 3,
        };
        // string openid = 2 [(.sql) = {
        void               clear_openid();
        const std::string& openid() const;
        void               set_openid(const std::string& value);
        void               set_openid(std::string&& value);
        void               set_openid(const char* value);
        void               set_openid(const char* value, size_t size);
        std::string*       mutable_openid();
        std::string*       release_openid();
        void               set_allocated_openid(std::string* openid);

    private:
        const std::string& _internal_openid() const;
        void               _internal_set_openid(const std::string& value);
        std::string*       _internal_mutable_openid();

    public:
        // uint64 id = 1 [(.sql) = {
        void                            clear_id();
        ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
        void                            set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
        void                            _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

    public:
        // uint32 gmlev = 3;
        void                            clear_gmlev();
        ::PROTOBUF_NAMESPACE_ID::uint32 gmlev() const;
        void                            set_gmlev(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gmlev() const;
        void                            _internal_set_gmlev(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // @@protoc_insertion_point(class_scope:db.tbld_gmlist)
    private:
        class _Internal;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            openid_;
        ::PROTOBUF_NAMESPACE_ID::uint64                              id_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              gmlev_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize        _cached_size_;
        friend struct ::TableStruct_db_5fproto_2fglobaldb_2eproto;
    };
    // -------------------------------------------------------------------

    class tbld_serverlist : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.tbld_serverlist) */
    {
    public:
        tbld_serverlist();
        virtual ~tbld_serverlist();

        tbld_serverlist(const tbld_serverlist& from);
        tbld_serverlist(tbld_serverlist&& from) noexcept
            : tbld_serverlist()
        {
            *this = ::std::move(from);
        }

        inline tbld_serverlist& operator=(const tbld_serverlist& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline tbld_serverlist& operator=(tbld_serverlist&& from) noexcept
        {
            if(GetArenaNoVirtual() == from.GetArenaNoVirtual())
            {
                if(this != &from)
                    InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
        static const tbld_serverlist&                     default_instance();

        static void                          InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
        static inline const tbld_serverlist* internal_default_instance()
        {
            return reinterpret_cast<const tbld_serverlist*>(&_tbld_serverlist_default_instance_);
        }
        static constexpr int kIndexInFileMessages = 3;

        friend void swap(tbld_serverlist& a, tbld_serverlist& b) { a.Swap(&b); }
        inline void Swap(tbld_serverlist* other)
        {
            if(other == this)
                return;
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        inline tbld_serverlist* New() const final { return CreateMaybeMessage<tbld_serverlist>(nullptr); }

        tbld_serverlist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final { return CreateMaybeMessage<tbld_serverlist>(arena); }
        void             CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void             MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void             CopyFrom(const tbld_serverlist& from);
        void             MergeFrom(const tbld_serverlist& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool                                  IsInitialized() const final;

        size_t                          ByteSizeLong() const final;
        const char*                     _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8*                   target,
                                                           ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int                             GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void        SetCachedSize(int size) const final;
        void        InternalSwap(tbld_serverlist* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "db.tbld_serverlist"; }

    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const { return nullptr; }
        inline void*                           MaybeArenaPtr() const { return nullptr; }

    public:
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
        {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_5fproto_2fglobaldb_2eproto);
            return ::descriptor_table_db_5fproto_2fglobaldb_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:
        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kServerNameFieldNumber  = 2,
            kPublishAddrFieldNumber = 5,
            kWorldidFieldNumber     = 1,
            kOpenTimeFieldNumber    = 3,
            kOpenStatusFieldNumber  = 4,
            kMergetoFieldNumber     = 6,
        };
        // string server_name = 2 [(.sql) = {
        void               clear_server_name();
        const std::string& server_name() const;
        void               set_server_name(const std::string& value);
        void               set_server_name(std::string&& value);
        void               set_server_name(const char* value);
        void               set_server_name(const char* value, size_t size);
        std::string*       mutable_server_name();
        std::string*       release_server_name();
        void               set_allocated_server_name(std::string* server_name);

    private:
        const std::string& _internal_server_name() const;
        void               _internal_set_server_name(const std::string& value);
        std::string*       _internal_mutable_server_name();

    public:
        // string publish_addr = 5 [(.sql) = {
        void               clear_publish_addr();
        const std::string& publish_addr() const;
        void               set_publish_addr(const std::string& value);
        void               set_publish_addr(std::string&& value);
        void               set_publish_addr(const char* value);
        void               set_publish_addr(const char* value, size_t size);
        std::string*       mutable_publish_addr();
        std::string*       release_publish_addr();
        void               set_allocated_publish_addr(std::string* publish_addr);

    private:
        const std::string& _internal_publish_addr() const;
        void               _internal_set_publish_addr(const std::string& value);
        std::string*       _internal_mutable_publish_addr();

    public:
        // uint32 worldid = 1 [(.sql) = {
        void                            clear_worldid();
        ::PROTOBUF_NAMESPACE_ID::uint32 worldid() const;
        void                            set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_worldid() const;
        void                            _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 open_time = 3;
        void                            clear_open_time();
        ::PROTOBUF_NAMESPACE_ID::uint32 open_time() const;
        void                            set_open_time(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_open_time() const;
        void                            _internal_set_open_time(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 open_status = 4;
        void                            clear_open_status();
        ::PROTOBUF_NAMESPACE_ID::uint32 open_status() const;
        void                            set_open_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_open_status() const;
        void                            _internal_set_open_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 mergeto = 6 [(.sql) = {
        void                            clear_mergeto();
        ::PROTOBUF_NAMESPACE_ID::uint32 mergeto() const;
        void                            set_mergeto(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mergeto() const;
        void                            _internal_set_mergeto(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // @@protoc_insertion_point(class_scope:db.tbld_serverlist)
    private:
        class _Internal;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            server_name_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            publish_addr_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              worldid_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              open_time_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              open_status_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              mergeto_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize        _cached_size_;
        friend struct ::TableStruct_db_5fproto_2fglobaldb_2eproto;
    };
    // -------------------------------------------------------------------

    class tbld_servicedetail : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db.tbld_servicedetail) */
    {
    public:
        tbld_servicedetail();
        virtual ~tbld_servicedetail();

        tbld_servicedetail(const tbld_servicedetail& from);
        tbld_servicedetail(tbld_servicedetail&& from) noexcept
            : tbld_servicedetail()
        {
            *this = ::std::move(from);
        }

        inline tbld_servicedetail& operator=(const tbld_servicedetail& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline tbld_servicedetail& operator=(tbld_servicedetail&& from) noexcept
        {
            if(GetArenaNoVirtual() == from.GetArenaNoVirtual())
            {
                if(this != &from)
                    InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() { return GetMetadataStatic().descriptor; }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() { return GetMetadataStatic().reflection; }
        static const tbld_servicedetail&                  default_instance();

        static void                             InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
        static inline const tbld_servicedetail* internal_default_instance()
        {
            return reinterpret_cast<const tbld_servicedetail*>(&_tbld_servicedetail_default_instance_);
        }
        static constexpr int kIndexInFileMessages = 4;

        friend void swap(tbld_servicedetail& a, tbld_servicedetail& b) { a.Swap(&b); }
        inline void Swap(tbld_servicedetail* other)
        {
            if(other == this)
                return;
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        inline tbld_servicedetail* New() const final { return CreateMaybeMessage<tbld_servicedetail>(nullptr); }

        tbld_servicedetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final { return CreateMaybeMessage<tbld_servicedetail>(arena); }
        void                CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void                MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void                CopyFrom(const tbld_servicedetail& from);
        void                MergeFrom(const tbld_servicedetail& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool                                  IsInitialized() const final;

        size_t                          ByteSizeLong() const final;
        const char*                     _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8*                   target,
                                                           ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int                             GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void        SetCachedSize(int size) const final;
        void        InternalSwap(tbld_servicedetail* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "db.tbld_servicedetail"; }

    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const { return nullptr; }
        inline void*                           MaybeArenaPtr() const { return nullptr; }

    public:
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
        {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_5fproto_2fglobaldb_2eproto);
            return ::descriptor_table_db_5fproto_2fglobaldb_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:
        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kLibNameFieldNumber     = 4,
            kRouteAddrFieldNumber   = 5,
            kPublishAddrFieldNumber = 7,
            kBindAddrFieldNumber    = 10,
            kWorldidFieldNumber     = 1,
            kServiceTypeFieldNumber = 2,
            kServiceIdxFieldNumber  = 3,
            kRoutePortFieldNumber   = 6,
            kPublishPortFieldNumber = 8,
            kDebugPortFieldNumber   = 9,
        };
        // string lib_name = 4 [(.sql) = {
        void               clear_lib_name();
        const std::string& lib_name() const;
        void               set_lib_name(const std::string& value);
        void               set_lib_name(std::string&& value);
        void               set_lib_name(const char* value);
        void               set_lib_name(const char* value, size_t size);
        std::string*       mutable_lib_name();
        std::string*       release_lib_name();
        void               set_allocated_lib_name(std::string* lib_name);

    private:
        const std::string& _internal_lib_name() const;
        void               _internal_set_lib_name(const std::string& value);
        std::string*       _internal_mutable_lib_name();

    public:
        // string route_addr = 5 [(.sql) = {
        void               clear_route_addr();
        const std::string& route_addr() const;
        void               set_route_addr(const std::string& value);
        void               set_route_addr(std::string&& value);
        void               set_route_addr(const char* value);
        void               set_route_addr(const char* value, size_t size);
        std::string*       mutable_route_addr();
        std::string*       release_route_addr();
        void               set_allocated_route_addr(std::string* route_addr);

    private:
        const std::string& _internal_route_addr() const;
        void               _internal_set_route_addr(const std::string& value);
        std::string*       _internal_mutable_route_addr();

    public:
        // string publish_addr = 7 [(.sql) = {
        void               clear_publish_addr();
        const std::string& publish_addr() const;
        void               set_publish_addr(const std::string& value);
        void               set_publish_addr(std::string&& value);
        void               set_publish_addr(const char* value);
        void               set_publish_addr(const char* value, size_t size);
        std::string*       mutable_publish_addr();
        std::string*       release_publish_addr();
        void               set_allocated_publish_addr(std::string* publish_addr);

    private:
        const std::string& _internal_publish_addr() const;
        void               _internal_set_publish_addr(const std::string& value);
        std::string*       _internal_mutable_publish_addr();

    public:
        // string bind_addr = 10 [(.sql) = {
        void               clear_bind_addr();
        const std::string& bind_addr() const;
        void               set_bind_addr(const std::string& value);
        void               set_bind_addr(std::string&& value);
        void               set_bind_addr(const char* value);
        void               set_bind_addr(const char* value, size_t size);
        std::string*       mutable_bind_addr();
        std::string*       release_bind_addr();
        void               set_allocated_bind_addr(std::string* bind_addr);

    private:
        const std::string& _internal_bind_addr() const;
        void               _internal_set_bind_addr(const std::string& value);
        std::string*       _internal_mutable_bind_addr();

    public:
        // uint32 worldid = 1 [(.sql) = {
        void                            clear_worldid();
        ::PROTOBUF_NAMESPACE_ID::uint32 worldid() const;
        void                            set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_worldid() const;
        void                            _internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 service_type = 2 [(.sql) = {
        void                            clear_service_type();
        ::PROTOBUF_NAMESPACE_ID::uint32 service_type() const;
        void                            set_service_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_type() const;
        void                            _internal_set_service_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 service_idx = 3 [(.sql) = {
        void                            clear_service_idx();
        ::PROTOBUF_NAMESPACE_ID::uint32 service_idx() const;
        void                            set_service_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_idx() const;
        void                            _internal_set_service_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 route_port = 6 [(.sql) = {
        void                            clear_route_port();
        ::PROTOBUF_NAMESPACE_ID::uint32 route_port() const;
        void                            set_route_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_route_port() const;
        void                            _internal_set_route_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 publish_port = 8 [(.sql) = {
        void                            clear_publish_port();
        ::PROTOBUF_NAMESPACE_ID::uint32 publish_port() const;
        void                            set_publish_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_publish_port() const;
        void                            _internal_set_publish_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // uint32 debug_port = 9 [(.sql) = {
        void                            clear_debug_port();
        ::PROTOBUF_NAMESPACE_ID::uint32 debug_port() const;
        void                            set_debug_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

    private:
        ::PROTOBUF_NAMESPACE_ID::uint32 _internal_debug_port() const;
        void                            _internal_set_debug_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

    public:
        // @@protoc_insertion_point(class_scope:db.tbld_servicedetail)
    private:
        class _Internal;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            lib_name_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            route_addr_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            publish_addr_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr            bind_addr_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              worldid_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              service_type_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              service_idx_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              route_port_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              publish_port_;
        ::PROTOBUF_NAMESPACE_ID::uint32                              debug_port_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize        _cached_size_;
        friend struct ::TableStruct_db_5fproto_2fglobaldb_2eproto;
    };
    // ===================================================================

    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
    // tbld_dbinfo

    // uint32 worldid = 1 [(.sql) = {
    inline void                            tbld_dbinfo::clear_worldid() { worldid_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_dbinfo::_internal_worldid() const { return worldid_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_dbinfo::worldid() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_dbinfo.worldid)
        return _internal_worldid();
    }
    inline void tbld_dbinfo::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value) { worldid_ = value; }
    inline void tbld_dbinfo::set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_worldid(value);
        // @@protoc_insertion_point(field_set:db.tbld_dbinfo.worldid)
    }

    // string db_ip = 2 [(.sql) = {
    inline void tbld_dbinfo::clear_db_ip() { db_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()); }
    inline const std::string& tbld_dbinfo::db_ip() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_dbinfo.db_ip)
        return _internal_db_ip();
    }
    inline void tbld_dbinfo::set_db_ip(const std::string& value)
    {
        _internal_set_db_ip(value);
        // @@protoc_insertion_point(field_set:db.tbld_dbinfo.db_ip)
    }
    inline std::string* tbld_dbinfo::mutable_db_ip()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_dbinfo.db_ip)
        return _internal_mutable_db_ip();
    }
    inline const std::string& tbld_dbinfo::_internal_db_ip() const { return db_ip_.GetNoArena(); }
    inline void               tbld_dbinfo::_internal_set_db_ip(const std::string& value)
    {

        db_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_dbinfo::set_db_ip(std::string&& value)
    {

        db_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_dbinfo.db_ip)
    }
    inline void tbld_dbinfo::set_db_ip(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        db_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_dbinfo.db_ip)
    }
    inline void tbld_dbinfo::set_db_ip(const char* value, size_t size)
    {

        db_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_dbinfo.db_ip)
    }
    inline std::string* tbld_dbinfo::_internal_mutable_db_ip()
    {

        return db_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_dbinfo::release_db_ip()
    {
        // @@protoc_insertion_point(field_release:db.tbld_dbinfo.db_ip)

        return db_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_dbinfo::set_allocated_db_ip(std::string* db_ip)
    {
        if(db_ip != nullptr)
        {
        }
        else
        {
        }
        db_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_ip);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_dbinfo.db_ip)
    }

    // uint32 db_port = 3 [(.sql) = {
    inline void                            tbld_dbinfo::clear_db_port() { db_port_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_dbinfo::_internal_db_port() const { return db_port_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_dbinfo::db_port() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_dbinfo.db_port)
        return _internal_db_port();
    }
    inline void tbld_dbinfo::_internal_set_db_port(::PROTOBUF_NAMESPACE_ID::uint32 value) { db_port_ = value; }
    inline void tbld_dbinfo::set_db_port(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_db_port(value);
        // @@protoc_insertion_point(field_set:db.tbld_dbinfo.db_port)
    }

    // string db_name = 4 [(.sql) = {
    inline void tbld_dbinfo::clear_db_name() { db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()); }
    inline const std::string& tbld_dbinfo::db_name() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_dbinfo.db_name)
        return _internal_db_name();
    }
    inline void tbld_dbinfo::set_db_name(const std::string& value)
    {
        _internal_set_db_name(value);
        // @@protoc_insertion_point(field_set:db.tbld_dbinfo.db_name)
    }
    inline std::string* tbld_dbinfo::mutable_db_name()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_dbinfo.db_name)
        return _internal_mutable_db_name();
    }
    inline const std::string& tbld_dbinfo::_internal_db_name() const { return db_name_.GetNoArena(); }
    inline void               tbld_dbinfo::_internal_set_db_name(const std::string& value)
    {

        db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_dbinfo::set_db_name(std::string&& value)
    {

        db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_dbinfo.db_name)
    }
    inline void tbld_dbinfo::set_db_name(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_dbinfo.db_name)
    }
    inline void tbld_dbinfo::set_db_name(const char* value, size_t size)
    {

        db_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_dbinfo.db_name)
    }
    inline std::string* tbld_dbinfo::_internal_mutable_db_name()
    {

        return db_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_dbinfo::release_db_name()
    {
        // @@protoc_insertion_point(field_release:db.tbld_dbinfo.db_name)

        return db_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_dbinfo::set_allocated_db_name(std::string* db_name)
    {
        if(db_name != nullptr)
        {
        }
        else
        {
        }
        db_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_dbinfo.db_name)
    }

    // string db_user = 5 [(.sql) = {
    inline void tbld_dbinfo::clear_db_user() { db_user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()); }
    inline const std::string& tbld_dbinfo::db_user() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_dbinfo.db_user)
        return _internal_db_user();
    }
    inline void tbld_dbinfo::set_db_user(const std::string& value)
    {
        _internal_set_db_user(value);
        // @@protoc_insertion_point(field_set:db.tbld_dbinfo.db_user)
    }
    inline std::string* tbld_dbinfo::mutable_db_user()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_dbinfo.db_user)
        return _internal_mutable_db_user();
    }
    inline const std::string& tbld_dbinfo::_internal_db_user() const { return db_user_.GetNoArena(); }
    inline void               tbld_dbinfo::_internal_set_db_user(const std::string& value)
    {

        db_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_dbinfo::set_db_user(std::string&& value)
    {

        db_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_dbinfo.db_user)
    }
    inline void tbld_dbinfo::set_db_user(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        db_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_dbinfo.db_user)
    }
    inline void tbld_dbinfo::set_db_user(const char* value, size_t size)
    {

        db_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_dbinfo.db_user)
    }
    inline std::string* tbld_dbinfo::_internal_mutable_db_user()
    {

        return db_user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_dbinfo::release_db_user()
    {
        // @@protoc_insertion_point(field_release:db.tbld_dbinfo.db_user)

        return db_user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_dbinfo::set_allocated_db_user(std::string* db_user)
    {
        if(db_user != nullptr)
        {
        }
        else
        {
        }
        db_user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_user);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_dbinfo.db_user)
    }

    // string db_passwd = 6 [(.sql) = {
    inline void tbld_dbinfo::clear_db_passwd() { db_passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()); }
    inline const std::string& tbld_dbinfo::db_passwd() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_dbinfo.db_passwd)
        return _internal_db_passwd();
    }
    inline void tbld_dbinfo::set_db_passwd(const std::string& value)
    {
        _internal_set_db_passwd(value);
        // @@protoc_insertion_point(field_set:db.tbld_dbinfo.db_passwd)
    }
    inline std::string* tbld_dbinfo::mutable_db_passwd()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_dbinfo.db_passwd)
        return _internal_mutable_db_passwd();
    }
    inline const std::string& tbld_dbinfo::_internal_db_passwd() const { return db_passwd_.GetNoArena(); }
    inline void               tbld_dbinfo::_internal_set_db_passwd(const std::string& value)
    {

        db_passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_dbinfo::set_db_passwd(std::string&& value)
    {

        db_passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_dbinfo.db_passwd)
    }
    inline void tbld_dbinfo::set_db_passwd(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        db_passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_dbinfo.db_passwd)
    }
    inline void tbld_dbinfo::set_db_passwd(const char* value, size_t size)
    {

        db_passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                              ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_dbinfo.db_passwd)
    }
    inline std::string* tbld_dbinfo::_internal_mutable_db_passwd()
    {

        return db_passwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_dbinfo::release_db_passwd()
    {
        // @@protoc_insertion_point(field_release:db.tbld_dbinfo.db_passwd)

        return db_passwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_dbinfo::set_allocated_db_passwd(std::string* db_passwd)
    {
        if(db_passwd != nullptr)
        {
        }
        else
        {
        }
        db_passwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_passwd);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_dbinfo.db_passwd)
    }

    // -------------------------------------------------------------------

    // tbld_globalvar

    // uint32 key = 1 [(.sql) = {
    inline void                            tbld_globalvar::clear_key() { key_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_globalvar::_internal_key() const { return key_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_globalvar::key() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.key)
        return _internal_key();
    }
    inline void tbld_globalvar::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) { key_ = value; }
    inline void tbld_globalvar::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_key(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.key)
    }

    // uint64 value0 = 2;
    inline void                            tbld_globalvar::clear_value0() { value0_ = PROTOBUF_ULONGLONG(0); }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_globalvar::_internal_value0() const { return value0_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_globalvar::value0() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.value0)
        return _internal_value0();
    }
    inline void tbld_globalvar::_internal_set_value0(::PROTOBUF_NAMESPACE_ID::uint64 value) { value0_ = value; }
    inline void tbld_globalvar::set_value0(::PROTOBUF_NAMESPACE_ID::uint64 value)
    {
        _internal_set_value0(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.value0)
    }

    // uint64 value1 = 3;
    inline void                            tbld_globalvar::clear_value1() { value1_ = PROTOBUF_ULONGLONG(0); }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_globalvar::_internal_value1() const { return value1_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_globalvar::value1() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.value1)
        return _internal_value1();
    }
    inline void tbld_globalvar::_internal_set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value) { value1_ = value; }
    inline void tbld_globalvar::set_value1(::PROTOBUF_NAMESPACE_ID::uint64 value)
    {
        _internal_set_value1(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.value1)
    }

    // uint64 value2 = 4;
    inline void                            tbld_globalvar::clear_value2() { value2_ = PROTOBUF_ULONGLONG(0); }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_globalvar::_internal_value2() const { return value2_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_globalvar::value2() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.value2)
        return _internal_value2();
    }
    inline void tbld_globalvar::_internal_set_value2(::PROTOBUF_NAMESPACE_ID::uint64 value) { value2_ = value; }
    inline void tbld_globalvar::set_value2(::PROTOBUF_NAMESPACE_ID::uint64 value)
    {
        _internal_set_value2(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.value2)
    }

    // uint64 value3 = 5;
    inline void                            tbld_globalvar::clear_value3() { value3_ = PROTOBUF_ULONGLONG(0); }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_globalvar::_internal_value3() const { return value3_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_globalvar::value3() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.value3)
        return _internal_value3();
    }
    inline void tbld_globalvar::_internal_set_value3(::PROTOBUF_NAMESPACE_ID::uint64 value) { value3_ = value; }
    inline void tbld_globalvar::set_value3(::PROTOBUF_NAMESPACE_ID::uint64 value)
    {
        _internal_set_value3(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.value3)
    }

    // string value_str0 = 6 [(.sql) = {
    inline void tbld_globalvar::clear_value_str0()
    {
        value_str0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_globalvar::value_str0() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.value_str0)
        return _internal_value_str0();
    }
    inline void tbld_globalvar::set_value_str0(const std::string& value)
    {
        _internal_set_value_str0(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.value_str0)
    }
    inline std::string* tbld_globalvar::mutable_value_str0()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_globalvar.value_str0)
        return _internal_mutable_value_str0();
    }
    inline const std::string& tbld_globalvar::_internal_value_str0() const { return value_str0_.GetNoArena(); }
    inline void               tbld_globalvar::_internal_set_value_str0(const std::string& value)
    {

        value_str0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_globalvar::set_value_str0(std::string&& value)
    {

        value_str0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_globalvar.value_str0)
    }
    inline void tbld_globalvar::set_value_str0(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        value_str0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_globalvar.value_str0)
    }
    inline void tbld_globalvar::set_value_str0(const char* value, size_t size)
    {

        value_str0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                               ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_globalvar.value_str0)
    }
    inline std::string* tbld_globalvar::_internal_mutable_value_str0()
    {

        return value_str0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_globalvar::release_value_str0()
    {
        // @@protoc_insertion_point(field_release:db.tbld_globalvar.value_str0)

        return value_str0_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_globalvar::set_allocated_value_str0(std::string* value_str0)
    {
        if(value_str0 != nullptr)
        {
        }
        else
        {
        }
        value_str0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_str0);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_globalvar.value_str0)
    }

    // string value_str1 = 7 [(.sql) = {
    inline void tbld_globalvar::clear_value_str1()
    {
        value_str1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_globalvar::value_str1() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.value_str1)
        return _internal_value_str1();
    }
    inline void tbld_globalvar::set_value_str1(const std::string& value)
    {
        _internal_set_value_str1(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.value_str1)
    }
    inline std::string* tbld_globalvar::mutable_value_str1()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_globalvar.value_str1)
        return _internal_mutable_value_str1();
    }
    inline const std::string& tbld_globalvar::_internal_value_str1() const { return value_str1_.GetNoArena(); }
    inline void               tbld_globalvar::_internal_set_value_str1(const std::string& value)
    {

        value_str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_globalvar::set_value_str1(std::string&& value)
    {

        value_str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_globalvar.value_str1)
    }
    inline void tbld_globalvar::set_value_str1(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        value_str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_globalvar.value_str1)
    }
    inline void tbld_globalvar::set_value_str1(const char* value, size_t size)
    {

        value_str1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                               ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_globalvar.value_str1)
    }
    inline std::string* tbld_globalvar::_internal_mutable_value_str1()
    {

        return value_str1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_globalvar::release_value_str1()
    {
        // @@protoc_insertion_point(field_release:db.tbld_globalvar.value_str1)

        return value_str1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_globalvar::set_allocated_value_str1(std::string* value_str1)
    {
        if(value_str1 != nullptr)
        {
        }
        else
        {
        }
        value_str1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_str1);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_globalvar.value_str1)
    }

    // string value_str2 = 8 [(.sql) = {
    inline void tbld_globalvar::clear_value_str2()
    {
        value_str2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_globalvar::value_str2() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.value_str2)
        return _internal_value_str2();
    }
    inline void tbld_globalvar::set_value_str2(const std::string& value)
    {
        _internal_set_value_str2(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.value_str2)
    }
    inline std::string* tbld_globalvar::mutable_value_str2()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_globalvar.value_str2)
        return _internal_mutable_value_str2();
    }
    inline const std::string& tbld_globalvar::_internal_value_str2() const { return value_str2_.GetNoArena(); }
    inline void               tbld_globalvar::_internal_set_value_str2(const std::string& value)
    {

        value_str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_globalvar::set_value_str2(std::string&& value)
    {

        value_str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_globalvar.value_str2)
    }
    inline void tbld_globalvar::set_value_str2(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        value_str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_globalvar.value_str2)
    }
    inline void tbld_globalvar::set_value_str2(const char* value, size_t size)
    {

        value_str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                               ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_globalvar.value_str2)
    }
    inline std::string* tbld_globalvar::_internal_mutable_value_str2()
    {

        return value_str2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_globalvar::release_value_str2()
    {
        // @@protoc_insertion_point(field_release:db.tbld_globalvar.value_str2)

        return value_str2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_globalvar::set_allocated_value_str2(std::string* value_str2)
    {
        if(value_str2 != nullptr)
        {
        }
        else
        {
        }
        value_str2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_str2);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_globalvar.value_str2)
    }

    // string value_str3 = 9 [(.sql) = {
    inline void tbld_globalvar::clear_value_str3()
    {
        value_str3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_globalvar::value_str3() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_globalvar.value_str3)
        return _internal_value_str3();
    }
    inline void tbld_globalvar::set_value_str3(const std::string& value)
    {
        _internal_set_value_str3(value);
        // @@protoc_insertion_point(field_set:db.tbld_globalvar.value_str3)
    }
    inline std::string* tbld_globalvar::mutable_value_str3()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_globalvar.value_str3)
        return _internal_mutable_value_str3();
    }
    inline const std::string& tbld_globalvar::_internal_value_str3() const { return value_str3_.GetNoArena(); }
    inline void               tbld_globalvar::_internal_set_value_str3(const std::string& value)
    {

        value_str3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_globalvar::set_value_str3(std::string&& value)
    {

        value_str3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_globalvar.value_str3)
    }
    inline void tbld_globalvar::set_value_str3(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        value_str3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_globalvar.value_str3)
    }
    inline void tbld_globalvar::set_value_str3(const char* value, size_t size)
    {

        value_str3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                               ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_globalvar.value_str3)
    }
    inline std::string* tbld_globalvar::_internal_mutable_value_str3()
    {

        return value_str3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_globalvar::release_value_str3()
    {
        // @@protoc_insertion_point(field_release:db.tbld_globalvar.value_str3)

        return value_str3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_globalvar::set_allocated_value_str3(std::string* value_str3)
    {
        if(value_str3 != nullptr)
        {
        }
        else
        {
        }
        value_str3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_str3);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_globalvar.value_str3)
    }

    // -------------------------------------------------------------------

    // tbld_gmlist

    // uint64 id = 1 [(.sql) = {
    inline void                            tbld_gmlist::clear_id() { id_ = PROTOBUF_ULONGLONG(0); }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_gmlist::_internal_id() const { return id_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint64 tbld_gmlist::id() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_gmlist.id)
        return _internal_id();
    }
    inline void tbld_gmlist::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) { id_ = value; }
    inline void tbld_gmlist::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value)
    {
        _internal_set_id(value);
        // @@protoc_insertion_point(field_set:db.tbld_gmlist.id)
    }

    // string openid = 2 [(.sql) = {
    inline void tbld_gmlist::clear_openid() { openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited()); }
    inline const std::string& tbld_gmlist::openid() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_gmlist.openid)
        return _internal_openid();
    }
    inline void tbld_gmlist::set_openid(const std::string& value)
    {
        _internal_set_openid(value);
        // @@protoc_insertion_point(field_set:db.tbld_gmlist.openid)
    }
    inline std::string* tbld_gmlist::mutable_openid()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_gmlist.openid)
        return _internal_mutable_openid();
    }
    inline const std::string& tbld_gmlist::_internal_openid() const { return openid_.GetNoArena(); }
    inline void               tbld_gmlist::_internal_set_openid(const std::string& value)
    {

        openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_gmlist::set_openid(std::string&& value)
    {

        openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_gmlist.openid)
    }
    inline void tbld_gmlist::set_openid(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_gmlist.openid)
    }
    inline void tbld_gmlist::set_openid(const char* value, size_t size)
    {

        openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                           ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_gmlist.openid)
    }
    inline std::string* tbld_gmlist::_internal_mutable_openid()
    {

        return openid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_gmlist::release_openid()
    {
        // @@protoc_insertion_point(field_release:db.tbld_gmlist.openid)

        return openid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_gmlist::set_allocated_openid(std::string* openid)
    {
        if(openid != nullptr)
        {
        }
        else
        {
        }
        openid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_gmlist.openid)
    }

    // uint32 gmlev = 3;
    inline void                            tbld_gmlist::clear_gmlev() { gmlev_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_gmlist::_internal_gmlev() const { return gmlev_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_gmlist::gmlev() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_gmlist.gmlev)
        return _internal_gmlev();
    }
    inline void tbld_gmlist::_internal_set_gmlev(::PROTOBUF_NAMESPACE_ID::uint32 value) { gmlev_ = value; }
    inline void tbld_gmlist::set_gmlev(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_gmlev(value);
        // @@protoc_insertion_point(field_set:db.tbld_gmlist.gmlev)
    }

    // -------------------------------------------------------------------

    // tbld_serverlist

    // uint32 worldid = 1 [(.sql) = {
    inline void                            tbld_serverlist::clear_worldid() { worldid_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_serverlist::_internal_worldid() const { return worldid_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_serverlist::worldid() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_serverlist.worldid)
        return _internal_worldid();
    }
    inline void tbld_serverlist::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value) { worldid_ = value; }
    inline void tbld_serverlist::set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_worldid(value);
        // @@protoc_insertion_point(field_set:db.tbld_serverlist.worldid)
    }

    // string server_name = 2 [(.sql) = {
    inline void tbld_serverlist::clear_server_name()
    {
        server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_serverlist::server_name() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_serverlist.server_name)
        return _internal_server_name();
    }
    inline void tbld_serverlist::set_server_name(const std::string& value)
    {
        _internal_set_server_name(value);
        // @@protoc_insertion_point(field_set:db.tbld_serverlist.server_name)
    }
    inline std::string* tbld_serverlist::mutable_server_name()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_serverlist.server_name)
        return _internal_mutable_server_name();
    }
    inline const std::string& tbld_serverlist::_internal_server_name() const { return server_name_.GetNoArena(); }
    inline void               tbld_serverlist::_internal_set_server_name(const std::string& value)
    {

        server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_serverlist::set_server_name(std::string&& value)
    {

        server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_serverlist.server_name)
    }
    inline void tbld_serverlist::set_server_name(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_serverlist.server_name)
    }
    inline void tbld_serverlist::set_server_name(const char* value, size_t size)
    {

        server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_serverlist.server_name)
    }
    inline std::string* tbld_serverlist::_internal_mutable_server_name()
    {

        return server_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_serverlist::release_server_name()
    {
        // @@protoc_insertion_point(field_release:db.tbld_serverlist.server_name)

        return server_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_serverlist::set_allocated_server_name(std::string* server_name)
    {
        if(server_name != nullptr)
        {
        }
        else
        {
        }
        server_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_serverlist.server_name)
    }

    // uint32 open_time = 3;
    inline void                            tbld_serverlist::clear_open_time() { open_time_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_serverlist::_internal_open_time() const { return open_time_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_serverlist::open_time() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_serverlist.open_time)
        return _internal_open_time();
    }
    inline void tbld_serverlist::_internal_set_open_time(::PROTOBUF_NAMESPACE_ID::uint32 value) { open_time_ = value; }
    inline void tbld_serverlist::set_open_time(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_open_time(value);
        // @@protoc_insertion_point(field_set:db.tbld_serverlist.open_time)
    }

    // uint32 open_status = 4;
    inline void                            tbld_serverlist::clear_open_status() { open_status_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_serverlist::_internal_open_status() const { return open_status_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_serverlist::open_status() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_serverlist.open_status)
        return _internal_open_status();
    }
    inline void tbld_serverlist::_internal_set_open_status(::PROTOBUF_NAMESPACE_ID::uint32 value) { open_status_ = value; }
    inline void tbld_serverlist::set_open_status(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_open_status(value);
        // @@protoc_insertion_point(field_set:db.tbld_serverlist.open_status)
    }

    // string publish_addr = 5 [(.sql) = {
    inline void tbld_serverlist::clear_publish_addr()
    {
        publish_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_serverlist::publish_addr() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_serverlist.publish_addr)
        return _internal_publish_addr();
    }
    inline void tbld_serverlist::set_publish_addr(const std::string& value)
    {
        _internal_set_publish_addr(value);
        // @@protoc_insertion_point(field_set:db.tbld_serverlist.publish_addr)
    }
    inline std::string* tbld_serverlist::mutable_publish_addr()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_serverlist.publish_addr)
        return _internal_mutable_publish_addr();
    }
    inline const std::string& tbld_serverlist::_internal_publish_addr() const { return publish_addr_.GetNoArena(); }
    inline void               tbld_serverlist::_internal_set_publish_addr(const std::string& value)
    {

        publish_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_serverlist::set_publish_addr(std::string&& value)
    {

        publish_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_serverlist.publish_addr)
    }
    inline void tbld_serverlist::set_publish_addr(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        publish_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_serverlist.publish_addr)
    }
    inline void tbld_serverlist::set_publish_addr(const char* value, size_t size)
    {

        publish_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                 ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_serverlist.publish_addr)
    }
    inline std::string* tbld_serverlist::_internal_mutable_publish_addr()
    {

        return publish_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_serverlist::release_publish_addr()
    {
        // @@protoc_insertion_point(field_release:db.tbld_serverlist.publish_addr)

        return publish_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_serverlist::set_allocated_publish_addr(std::string* publish_addr)
    {
        if(publish_addr != nullptr)
        {
        }
        else
        {
        }
        publish_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publish_addr);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_serverlist.publish_addr)
    }

    // uint32 mergeto = 6 [(.sql) = {
    inline void                            tbld_serverlist::clear_mergeto() { mergeto_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_serverlist::_internal_mergeto() const { return mergeto_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_serverlist::mergeto() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_serverlist.mergeto)
        return _internal_mergeto();
    }
    inline void tbld_serverlist::_internal_set_mergeto(::PROTOBUF_NAMESPACE_ID::uint32 value) { mergeto_ = value; }
    inline void tbld_serverlist::set_mergeto(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_mergeto(value);
        // @@protoc_insertion_point(field_set:db.tbld_serverlist.mergeto)
    }

    // -------------------------------------------------------------------

    // tbld_servicedetail

    // uint32 worldid = 1 [(.sql) = {
    inline void                            tbld_servicedetail::clear_worldid() { worldid_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::_internal_worldid() const { return worldid_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::worldid() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.worldid)
        return _internal_worldid();
    }
    inline void tbld_servicedetail::_internal_set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value) { worldid_ = value; }
    inline void tbld_servicedetail::set_worldid(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_worldid(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.worldid)
    }

    // uint32 service_type = 2 [(.sql) = {
    inline void                            tbld_servicedetail::clear_service_type() { service_type_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::_internal_service_type() const { return service_type_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::service_type() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.service_type)
        return _internal_service_type();
    }
    inline void tbld_servicedetail::_internal_set_service_type(::PROTOBUF_NAMESPACE_ID::uint32 value) { service_type_ = value; }
    inline void tbld_servicedetail::set_service_type(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_service_type(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.service_type)
    }

    // uint32 service_idx = 3 [(.sql) = {
    inline void                            tbld_servicedetail::clear_service_idx() { service_idx_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::_internal_service_idx() const { return service_idx_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::service_idx() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.service_idx)
        return _internal_service_idx();
    }
    inline void tbld_servicedetail::_internal_set_service_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) { service_idx_ = value; }
    inline void tbld_servicedetail::set_service_idx(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_service_idx(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.service_idx)
    }

    // string lib_name = 4 [(.sql) = {
    inline void tbld_servicedetail::clear_lib_name()
    {
        lib_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_servicedetail::lib_name() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.lib_name)
        return _internal_lib_name();
    }
    inline void tbld_servicedetail::set_lib_name(const std::string& value)
    {
        _internal_set_lib_name(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.lib_name)
    }
    inline std::string* tbld_servicedetail::mutable_lib_name()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_servicedetail.lib_name)
        return _internal_mutable_lib_name();
    }
    inline const std::string& tbld_servicedetail::_internal_lib_name() const { return lib_name_.GetNoArena(); }
    inline void               tbld_servicedetail::_internal_set_lib_name(const std::string& value)
    {

        lib_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_servicedetail::set_lib_name(std::string&& value)
    {

        lib_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_servicedetail.lib_name)
    }
    inline void tbld_servicedetail::set_lib_name(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        lib_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_servicedetail.lib_name)
    }
    inline void tbld_servicedetail::set_lib_name(const char* value, size_t size)
    {

        lib_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                             ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_servicedetail.lib_name)
    }
    inline std::string* tbld_servicedetail::_internal_mutable_lib_name()
    {

        return lib_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_servicedetail::release_lib_name()
    {
        // @@protoc_insertion_point(field_release:db.tbld_servicedetail.lib_name)

        return lib_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_servicedetail::set_allocated_lib_name(std::string* lib_name)
    {
        if(lib_name != nullptr)
        {
        }
        else
        {
        }
        lib_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lib_name);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_servicedetail.lib_name)
    }

    // string route_addr = 5 [(.sql) = {
    inline void tbld_servicedetail::clear_route_addr()
    {
        route_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_servicedetail::route_addr() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.route_addr)
        return _internal_route_addr();
    }
    inline void tbld_servicedetail::set_route_addr(const std::string& value)
    {
        _internal_set_route_addr(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.route_addr)
    }
    inline std::string* tbld_servicedetail::mutable_route_addr()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_servicedetail.route_addr)
        return _internal_mutable_route_addr();
    }
    inline const std::string& tbld_servicedetail::_internal_route_addr() const { return route_addr_.GetNoArena(); }
    inline void               tbld_servicedetail::_internal_set_route_addr(const std::string& value)
    {

        route_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_servicedetail::set_route_addr(std::string&& value)
    {

        route_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_servicedetail.route_addr)
    }
    inline void tbld_servicedetail::set_route_addr(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        route_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_servicedetail.route_addr)
    }
    inline void tbld_servicedetail::set_route_addr(const char* value, size_t size)
    {

        route_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                               ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_servicedetail.route_addr)
    }
    inline std::string* tbld_servicedetail::_internal_mutable_route_addr()
    {

        return route_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_servicedetail::release_route_addr()
    {
        // @@protoc_insertion_point(field_release:db.tbld_servicedetail.route_addr)

        return route_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_servicedetail::set_allocated_route_addr(std::string* route_addr)
    {
        if(route_addr != nullptr)
        {
        }
        else
        {
        }
        route_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_addr);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_servicedetail.route_addr)
    }

    // uint32 route_port = 6 [(.sql) = {
    inline void                            tbld_servicedetail::clear_route_port() { route_port_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::_internal_route_port() const { return route_port_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::route_port() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.route_port)
        return _internal_route_port();
    }
    inline void tbld_servicedetail::_internal_set_route_port(::PROTOBUF_NAMESPACE_ID::uint32 value) { route_port_ = value; }
    inline void tbld_servicedetail::set_route_port(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_route_port(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.route_port)
    }

    // string publish_addr = 7 [(.sql) = {
    inline void tbld_servicedetail::clear_publish_addr()
    {
        publish_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_servicedetail::publish_addr() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.publish_addr)
        return _internal_publish_addr();
    }
    inline void tbld_servicedetail::set_publish_addr(const std::string& value)
    {
        _internal_set_publish_addr(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.publish_addr)
    }
    inline std::string* tbld_servicedetail::mutable_publish_addr()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_servicedetail.publish_addr)
        return _internal_mutable_publish_addr();
    }
    inline const std::string& tbld_servicedetail::_internal_publish_addr() const { return publish_addr_.GetNoArena(); }
    inline void               tbld_servicedetail::_internal_set_publish_addr(const std::string& value)
    {

        publish_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_servicedetail::set_publish_addr(std::string&& value)
    {

        publish_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_servicedetail.publish_addr)
    }
    inline void tbld_servicedetail::set_publish_addr(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        publish_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_servicedetail.publish_addr)
    }
    inline void tbld_servicedetail::set_publish_addr(const char* value, size_t size)
    {

        publish_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                 ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_servicedetail.publish_addr)
    }
    inline std::string* tbld_servicedetail::_internal_mutable_publish_addr()
    {

        return publish_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_servicedetail::release_publish_addr()
    {
        // @@protoc_insertion_point(field_release:db.tbld_servicedetail.publish_addr)

        return publish_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_servicedetail::set_allocated_publish_addr(std::string* publish_addr)
    {
        if(publish_addr != nullptr)
        {
        }
        else
        {
        }
        publish_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publish_addr);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_servicedetail.publish_addr)
    }

    // uint32 publish_port = 8 [(.sql) = {
    inline void                            tbld_servicedetail::clear_publish_port() { publish_port_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::_internal_publish_port() const { return publish_port_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::publish_port() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.publish_port)
        return _internal_publish_port();
    }
    inline void tbld_servicedetail::_internal_set_publish_port(::PROTOBUF_NAMESPACE_ID::uint32 value) { publish_port_ = value; }
    inline void tbld_servicedetail::set_publish_port(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_publish_port(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.publish_port)
    }

    // uint32 debug_port = 9 [(.sql) = {
    inline void                            tbld_servicedetail::clear_debug_port() { debug_port_ = 0u; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::_internal_debug_port() const { return debug_port_; }
    inline ::PROTOBUF_NAMESPACE_ID::uint32 tbld_servicedetail::debug_port() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.debug_port)
        return _internal_debug_port();
    }
    inline void tbld_servicedetail::_internal_set_debug_port(::PROTOBUF_NAMESPACE_ID::uint32 value) { debug_port_ = value; }
    inline void tbld_servicedetail::set_debug_port(::PROTOBUF_NAMESPACE_ID::uint32 value)
    {
        _internal_set_debug_port(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.debug_port)
    }

    // string bind_addr = 10 [(.sql) = {
    inline void tbld_servicedetail::clear_bind_addr()
    {
        bind_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& tbld_servicedetail::bind_addr() const
    {
        // @@protoc_insertion_point(field_get:db.tbld_servicedetail.bind_addr)
        return _internal_bind_addr();
    }
    inline void tbld_servicedetail::set_bind_addr(const std::string& value)
    {
        _internal_set_bind_addr(value);
        // @@protoc_insertion_point(field_set:db.tbld_servicedetail.bind_addr)
    }
    inline std::string* tbld_servicedetail::mutable_bind_addr()
    {
        // @@protoc_insertion_point(field_mutable:db.tbld_servicedetail.bind_addr)
        return _internal_mutable_bind_addr();
    }
    inline const std::string& tbld_servicedetail::_internal_bind_addr() const { return bind_addr_.GetNoArena(); }
    inline void               tbld_servicedetail::_internal_set_bind_addr(const std::string& value)
    {

        bind_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
    }
    inline void tbld_servicedetail::set_bind_addr(std::string&& value)
    {

        bind_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:db.tbld_servicedetail.bind_addr)
    }
    inline void tbld_servicedetail::set_bind_addr(const char* value)
    {
        GOOGLE_DCHECK(value != nullptr);

        bind_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:db.tbld_servicedetail.bind_addr)
    }
    inline void tbld_servicedetail::set_bind_addr(const char* value, size_t size)
    {

        bind_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                              ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:db.tbld_servicedetail.bind_addr)
    }
    inline std::string* tbld_servicedetail::_internal_mutable_bind_addr()
    {

        return bind_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* tbld_servicedetail::release_bind_addr()
    {
        // @@protoc_insertion_point(field_release:db.tbld_servicedetail.bind_addr)

        return bind_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void tbld_servicedetail::set_allocated_bind_addr(std::string* bind_addr)
    {
        if(bind_addr != nullptr)
        {
        }
        else
        {
        }
        bind_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bind_addr);
        // @@protoc_insertion_point(field_set_allocated:db.tbld_servicedetail.bind_addr)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // @@protoc_insertion_point(namespace_scope)

} // namespace db

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_5fproto_2fglobaldb_2eproto
