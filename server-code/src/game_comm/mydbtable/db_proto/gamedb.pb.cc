// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_proto/gamedb.proto

#include "db_proto/gamedb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace db {
class tbld_commondataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_commondata> _instance;
} _tbld_commondata_default_instance_;
class tbld_cooldownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_cooldown> _instance;
} _tbld_cooldown_default_instance_;
class tbld_datacountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_datacount> _instance;
} _tbld_datacount_default_instance_;
class tbld_global_mailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_global_mail> _instance;
} _tbld_global_mail_default_instance_;
class tbld_guildDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_guild> _instance;
} _tbld_guild_default_instance_;
class tbld_itemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_item> _instance;
} _tbld_item_default_instance_;
class tbld_mailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_mail> _instance;
} _tbld_mail_default_instance_;
class tbld_mail_attachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_mail_attachment> _instance;
} _tbld_mail_attachment_default_instance_;
class tbld_petDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_pet> _instance;
} _tbld_pet_default_instance_;
class tbld_playerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_player> _instance;
} _tbld_player_default_instance_;
class tbld_player_guildinfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_player_guildinfo> _instance;
} _tbld_player_guildinfo_default_instance_;
class tbld_skillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_skill> _instance;
} _tbld_skill_default_instance_;
class tbld_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_task> _instance;
} _tbld_task_default_instance_;
class tbld_achievementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_achievement> _instance;
} _tbld_achievement_default_instance_;
class tbld_statusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_status> _instance;
} _tbld_status_default_instance_;
class tbld_systemvarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<tbld_systemvar> _instance;
} _tbld_systemvar_default_instance_;
}  // namespace db
static void InitDefaultsscc_info_tbld_achievement_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_achievement_default_instance_;
    new (ptr) ::db::tbld_achievement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_achievement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_achievement_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_achievement_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_commondata_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_commondata_default_instance_;
    new (ptr) ::db::tbld_commondata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_commondata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_commondata_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_commondata_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_cooldown_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_cooldown_default_instance_;
    new (ptr) ::db::tbld_cooldown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_cooldown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_cooldown_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_cooldown_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_datacount_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_datacount_default_instance_;
    new (ptr) ::db::tbld_datacount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_datacount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_datacount_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_datacount_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_global_mail_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_global_mail_default_instance_;
    new (ptr) ::db::tbld_global_mail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_global_mail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_global_mail_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_global_mail_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_guild_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_guild_default_instance_;
    new (ptr) ::db::tbld_guild();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_guild::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_guild_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_guild_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_item_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_item_default_instance_;
    new (ptr) ::db::tbld_item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_item_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_item_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_mail_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_mail_default_instance_;
    new (ptr) ::db::tbld_mail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_mail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_mail_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_mail_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_mail_attachment_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_mail_attachment_default_instance_;
    new (ptr) ::db::tbld_mail_attachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_mail_attachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_mail_attachment_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_mail_attachment_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_pet_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_pet_default_instance_;
    new (ptr) ::db::tbld_pet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_pet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_pet_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_pet_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_player_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_player_default_instance_;
    new (ptr) ::db::tbld_player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_player::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_player_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_player_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_player_guildinfo_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_player_guildinfo_default_instance_;
    new (ptr) ::db::tbld_player_guildinfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_player_guildinfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_player_guildinfo_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_player_guildinfo_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_skill_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_skill_default_instance_;
    new (ptr) ::db::tbld_skill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_skill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_skill_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_skill_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_status_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_status_default_instance_;
    new (ptr) ::db::tbld_status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_status_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_status_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_systemvar_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_systemvar_default_instance_;
    new (ptr) ::db::tbld_systemvar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_systemvar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_systemvar_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_systemvar_db_5fproto_2fgamedb_2eproto}, {}};

static void InitDefaultsscc_info_tbld_task_db_5fproto_2fgamedb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_tbld_task_default_instance_;
    new (ptr) ::db::tbld_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::tbld_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_tbld_task_db_5fproto_2fgamedb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_tbld_task_db_5fproto_2fgamedb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_db_5fproto_2fgamedb_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_db_5fproto_2fgamedb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_db_5fproto_2fgamedb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_db_5fproto_2fgamedb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, playerid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, keytype_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, keyidx_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, data0_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, data1_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, data2_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_commondata, data3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_cooldown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_cooldown, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_cooldown, playerid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_cooldown, keytype_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_cooldown, keyidx_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_cooldown, expire_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_datacount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_datacount, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_datacount, playerid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_datacount, keytype_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_datacount, keyidx_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_datacount, data_num_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_datacount, next_reset_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, senderid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, sendername_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, create_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, flag_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, subject_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, content_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, filter_type_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, filter_data_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_global_mail, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, lev_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, leader_id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, leader_name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, creator_id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, creator_name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, create_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, del_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, slogan_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, info1_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, info2_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, info3_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_guild, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, owner_id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, itemtype_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, position_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, grid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, flag_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, pilenum_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, expire_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, dura_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, dura_limit_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, addition_lev_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_item, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, ownerid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, senderid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, sendername_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, create_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, flag_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, subject_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail_attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail_attachment, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail_attachment, mailid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail_attachment, attach_type_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_mail_attachment, attach_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_pet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_pet, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_pet, ownerid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_pet, pet_type_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_pet, hp_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_pet, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, worldid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, oriworldid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, openid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, prof_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, baselook_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, create_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, last_logintime_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, last_logouttime_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, del_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, lev_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, viplev_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, record_sceneid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, record_x_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, record_y_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, record_face_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, home_sceneid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, home_x_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, home_y_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, home_face_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, mate_id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, mate_name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, teamid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, guildid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, exp_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, money_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, money_bind_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, gold_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, gold_bind_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, hp_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, mp_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, fp_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, np_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, pkval_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, honor_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, achipoint_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, bag_size_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player, stroge_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_player_guildinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_player_guildinfo, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player_guildinfo, guildid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player_guildinfo, rank_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player_guildinfo, score_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player_guildinfo, total_score_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_player_guildinfo, join_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_skill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_skill, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_skill, userid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_skill, skilltype_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_skill, lev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, userid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, taskid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, num0_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, num1_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, num2_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, num3_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, accept_userlev_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, accept_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, finish_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, expire_time_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, daycount_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, daycount_max_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_task, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_achievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_achievement, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_achievement, userid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_achievement, achiid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_achievement, take_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, id_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, userid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, typeid__),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, lev_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, power_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, secs_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, times_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, laststamp_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, casterid_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, pause_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_status, statusid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, keyidx_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, name_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, data0_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, data1_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, data2_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, data3_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, str0_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, str1_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, str2_),
  PROTOBUF_FIELD_OFFSET(::db::tbld_systemvar, str3_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::db::tbld_commondata)},
  { 13, -1, sizeof(::db::tbld_cooldown)},
  { 23, -1, sizeof(::db::tbld_datacount)},
  { 34, -1, sizeof(::db::tbld_global_mail)},
  { 49, -1, sizeof(::db::tbld_guild)},
  { 68, -1, sizeof(::db::tbld_item)},
  { 85, -1, sizeof(::db::tbld_mail)},
  { 98, -1, sizeof(::db::tbld_mail_attachment)},
  { 107, -1, sizeof(::db::tbld_pet)},
  { 117, -1, sizeof(::db::tbld_player)},
  { 161, -1, sizeof(::db::tbld_player_guildinfo)},
  { 172, -1, sizeof(::db::tbld_skill)},
  { 181, -1, sizeof(::db::tbld_task)},
  { 200, -1, sizeof(::db::tbld_achievement)},
  { 209, -1, sizeof(::db::tbld_status)},
  { 225, -1, sizeof(::db::tbld_systemvar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_commondata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_cooldown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_datacount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_global_mail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_guild_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_mail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_mail_attachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_pet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_player_guildinfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_skill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_achievement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::db::_tbld_systemvar_default_instance_),
};

const char descriptor_table_protodef_db_5fproto_2fgamedb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025db_proto/gamedb.proto\022\002db\032\035sql_options"
  "/sql_options.proto\"\257\001\n\017tbld_commondata\022\034"
  "\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id\222\?\002\020\001\022!\n\010playerid"
  "\030\002 \001(\004B\017\222\?\014\"\nidx_player\022\017\n\007keytype\030\003 \001(\r"
  "\022\016\n\006keyidx\030\004 \001(\r\022\r\n\005data0\030\005 \001(\004\022\r\n\005data1"
  "\030\006 \001(\004\022\r\n\005data2\030\007 \001(\004\022\r\n\005data3\030\010 \001(\004\"\300\001\n"
  "\rtbld_cooldown\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id\222"
  "\?\002\020\001\0221\n\010playerid\030\002 \001(\004B\037\222\?\034\"\032idx_player,"
  " idx_player_idx\022$\n\007keytype\030\003 \001(\rB\023\222\?\020\"\016i"
  "dx_player_idx\022#\n\006keyidx\030\004 \001(\rB\023\222\?\020\"\016idx_"
  "player_idx\022\023\n\013expire_time\030\005 \001(\r\"\327\001\n\016tbld"
  "_datacount\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id\222\?\002\020\001"
  "\0221\n\010playerid\030\002 \001(\004B\037\222\?\034\"\032idx_player, idx"
  "_player_idx\022$\n\007keytype\030\003 \001(\rB\023\222\?\020\"\016idx_p"
  "layer_idx\022#\n\006keyidx\030\004 \001(\rB\023\222\?\020\"\016idx_play"
  "er_idx\022\020\n\010data_num\030\005 \001(\004\022\027\n\017next_reset_t"
  "ime\030\006 \001(\r\"\231\002\n\020tbld_global_mail\022\034\n\002id\030\001 \001"
  "(\004B\020\222\?\010\032\006idx_id\222\?\002\020\001\022!\n\010senderid\030\002 \001(\004B\017"
  "\222\?\014\"\nidx_sendid\022\032\n\nsendername\030\003 \001(\tB\006\222\?\003"
  "\010\377\001\022)\n\013create_time\030\004 \001(\rB\024\222\?\021\"\017idx_creat"
  "e_time\022\014\n\004flag\030\005 \001(\004\022\027\n\007subject\030\006 \001(\tB\006\222"
  "\?\003\010\377\001\022\027\n\007content\030\007 \001(\tB\006\222\?\003\010\200\010\022\023\n\013filter"
  "_type\030\010 \001(\004\022\023\n\013filter_data\030\t \001(\004\022\023\n\013atta"
  "ch_data\030\n \001(\014\"\306\002\n\ntbld_guild\022\034\n\002id\030\001 \001(\004"
  "B\020\222\?\010\032\006idx_id\222\?\002\020\001\022\013\n\003lev\030\002 \001(\004\022\024\n\004name\030"
  "\003 \001(\tB\006\222\?\003\010\377\001\022\021\n\tleader_id\030\004 \001(\004\022\032\n\013lead"
  "er_name\030\005 \001(\tB\005\222\?\002\010 \022\031\n\ncreator_id\030\006 \001(\004"
  "B\005\222\?\002\010 \022\033\n\014creator_name\030\007 \001(\tB\005\222\?\002\010 \022\023\n\013"
  "create_time\030\010 \001(\r\022\020\n\010del_time\030\t \001(\r\022\026\n\006s"
  "logan\030\n \001(\tB\006\222\?\003\010\377\001\022\025\n\005info1\030\013 \001(\tB\006\222\?\003\010"
  "\200\010\022\025\n\005info2\030\014 \001(\tB\006\222\?\003\010\200\010\022\025\n\005info3\030\r \001(\t"
  "B\006\222\?\003\010\200\010\022\014\n\004flag\030\016 \001(\004\"\257\002\n\ttbld_item\022\034\n\002"
  "id\030\001 \001(\004B\020\222\?\010\032\006idx_id\222\?\002\020\001\022/\n\010owner_id\030\002"
  " \001(\004B\035\222\?\032\"\030idx_owner,idx_owner_pack\022#\n\010i"
  "temtype\030\003 \001(\rB\021\222\?\016\"\014idx_itemtype\022%\n\010posi"
  "tion\030\004 \001(\rB\023\222\?\020\"\016idx_owner_pack\022\014\n\004grid\030"
  "\005 \001(\r\022\014\n\004flag\030\006 \001(\r\022\017\n\007pilenum\030\007 \001(\r\022\023\n\013"
  "expire_time\030\010 \001(\r\022\014\n\004dura\030\t \001(\r\022\022\n\ndura_"
  "limit\030\n \001(\r\022\024\n\014addition_lev\030\013 \001(\r\022\r\n\005ext"
  "ra\030\014 \001(\014\"\366\001\n\ttbld_mail\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032"
  "\006idx_id\222\?\002\020\001\022!\n\007ownerid\030\002 \001(\004B\020\222\?\r\"\013idx_"
  "ownerid\022!\n\010senderid\030\004 \001(\004B\017\222\?\014\"\nidx_send"
  "id\022\032\n\nsendername\030\005 \001(\tB\006\222\?\003\010\377\001\022)\n\013create"
  "_time\030\006 \001(\rB\024\222\?\021\"\017idx_create_time\022\014\n\004fla"
  "g\030\007 \001(\004\022\027\n\007subject\030\010 \001(\tB\006\222\?\003\010\377\001\022\027\n\007cont"
  "ent\030\t \001(\tB\006\222\?\003\010\200\010\"\177\n\024tbld_mail_attachmen"
  "t\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id\222\?\002\020\001\022\037\n\006maili"
  "d\030\002 \001(\004B\017\222\?\014\"\nidx_mailid\022\023\n\013attach_type\030"
  "\003 \001(\r\022\023\n\013attach_data\030\004 \001(\004\"\211\001\n\010tbld_pet\022"
  "\034\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id\222\?\002\020\001\022!\n\007ownerid"
  "\030\002 \001(\004B\020\222\?\r\"\013idx_ownerid\022#\n\010pet_type\030\003 \001"
  "(\rB\021\222\?\016\"\014idx_pet_type\022\n\n\002hp\030\004 \001(\r\022\013\n\003exp"
  "\030\005 \001(\004\"\204\007\n\013tbld_player\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032"
  "\006idx_id\222\?\002\020\001\022&\n\007worldid\030\002 \001(\rB\025\222\?\0028\020\222\?\r\""
  "\013idx_worldid\022\031\n\noriworldid\030\003 \001(\rB\005\222\?\0028\020\022"
  "%\n\006openid\030\004 \001(\tB\025\222\?\003\010\377\001\222\?\014\"\nidx_openid\022 "
  "\n\004name\030\005 \001(\tB\022\222\?\002\010 \222\?\n2\010idx_name\022\033\n\004prof"
  "\030\006 \001(\rB\r\222\?\n\"\010idx_prof\022\020\n\010baselook\030\007 \001(\r\022"
  ")\n\013create_time\030\010 \001(\rB\024\222\?\021\"\017idx_create_ti"
  "me\022/\n\016last_logintime\030\t \001(\rB\027\222\?\024\"\022idx_las"
  "t_logintime\0221\n\017last_logouttime\030\n \001(\rB\030\222\?"
  "\025\"\023idx_last_logouttime\022#\n\010del_time\030\013 \001(\r"
  "B\021\222\?\016\"\014idx_del_time\022\031\n\003lev\030\014 \001(\rB\014\222\?\t\"\007i"
  "dx_lev\022\016\n\006viplev\030\r \001(\r\022\026\n\016record_sceneid"
  "\030\016 \001(\004\022\020\n\010record_x\030\017 \001(\002\022\020\n\010record_y\030\020 \001"
  "(\002\022\023\n\013record_face\030\021 \001(\002\022\024\n\014home_sceneid\030"
  "\022 \001(\004\022\016\n\006home_x\030\023 \001(\002\022\016\n\006home_y\030\024 \001(\002\022\021\n"
  "\thome_face\030\025 \001(\002\022\017\n\007mate_id\030\026 \001(\004\022\030\n\tmat"
  "e_name\030\027 \001(\tB\005\222\?\002\010 \022\016\n\006teamid\030\030 \001(\004\022\017\n\007g"
  "uildid\030\031 \001(\004\022\013\n\003exp\030\032 \001(\004\022\r\n\005money\030\033 \001(\004"
  "\022\022\n\nmoney_bind\030\034 \001(\004\022\014\n\004gold\030\035 \001(\004\022\021\n\tgo"
  "ld_bind\030\036 \001(\004\022\n\n\002hp\030\037 \001(\r\022\n\n\002mp\030  \001(\r\022\n\n"
  "\002fp\030! \001(\r\022\n\n\002np\030\" \001(\r\022\r\n\005pkval\030# \001(\r\022\r\n\005"
  "honor\030$ \001(\r\022\021\n\tachipoint\030% \001(\r\022\020\n\010bag_si"
  "ze\030& \001(\r\022\023\n\013stroge_size\030\' \001(\r\"\213\001\n\025tbld_p"
  "layer_guildinfo\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id"
  "\222\?\002\020\001\022\017\n\007guildid\030\002 \001(\004\022\014\n\004rank\030\003 \001(\r\022\r\n\005"
  "score\030\004 \001(\r\022\023\n\013total_score\030\005 \001(\r\022\021\n\tjoin"
  "_time\030\006 \001(\r\"k\n\ntbld_skill\022\034\n\002id\030\001 \001(\004B\020\222"
  "\?\010\032\006idx_id\222\?\002\020\001\022\037\n\006userid\030\002 \001(\004B\017\222\?\014\"\nid"
  "x_userid\022\021\n\tskilltype\030\003 \001(\r\022\013\n\003lev\030\004 \001(\r"
  "\"\261\002\n\ttbld_task\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id\222"
  "\?\002\020\001\022\037\n\006userid\030\002 \001(\004B\017\222\?\014\"\nidx_userid\022\037\n"
  "\006taskid\030\003 \001(\rB\017\222\?\014\"\nidx_taskid\022\014\n\004num0\030\004"
  " \001(\r\022\014\n\004num1\030\005 \001(\r\022\014\n\004num2\030\006 \001(\r\022\014\n\004num3"
  "\030\007 \001(\r\022\026\n\016accept_userlev\030\010 \001(\r\022\023\n\013accept"
  "_time\030\t \001(\r\022\023\n\013finish_time\030\n \001(\r\022\023\n\013expi"
  "re_time\030\013 \001(\r\022\020\n\010daycount\030\014 \001(\r\022\024\n\014dayco"
  "unt_max\030\r \001(\r\022\r\n\005state\030\016 \001(\r\"\200\001\n\020tbld_ac"
  "hievement\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id\222\?\002\020\001\022"
  "\037\n\006userid\030\002 \001(\004B\017\222\?\014\"\nidx_userid\022\037\n\006achi"
  "id\030\003 \001(\rB\017\222\?\014\"\nidx_achiid\022\014\n\004take\030\004 \001(\r\""
  "\210\002\n\013tbld_status\022\034\n\002id\030\001 \001(\004B\020\222\?\010\032\006idx_id"
  "\222\?\002\020\001\022\037\n\006userid\030\002 \001(\004B\017\222\?\014\"\nidx_userid\022!"
  "\n\006typeid\030\003 \001(\rB\021\222\?\016\"\014idx_statusid\022\036\n\003lev"
  "\030\004 \001(\rB\021\222\?\016\"\014idx_statusid\022\r\n\005power\030\005 \001(\r"
  "\022\014\n\004secs\030\006 \001(\r\022\r\n\005times\030\007 \001(\r\022\021\n\tlaststa"
  "mp\030\010 \001(\r\022\020\n\010casterid\030\t \001(\004\022\024\n\005pause\030\n \001("
  "\rB\005\222\?\0028\010\022\020\n\010statusid\030\013 \001(\r\"\334\001\n\016tbld_syst"
  "emvar\022 \n\006keyidx\030\001 \001(\004B\020\222\?\010\032\006idx_id\222\?\002\020\001\022"
  "\024\n\004name\030\002 \001(\tB\006\222\?\003\010\377\001\022\r\n\005data0\030\003 \001(\004\022\r\n\005"
  "data1\030\004 \001(\004\022\r\n\005data2\030\005 \001(\004\022\r\n\005data3\030\006 \001("
  "\004\022\024\n\004str0\030\007 \001(\tB\006\222\?\003\010\377\001\022\024\n\004str1\030\010 \001(\tB\006\222"
  "\?\003\010\377\001\022\024\n\004str2\030\t \001(\tB\006\222\?\003\010\377\001\022\024\n\004str3\030\n \001("
  "\tB\006\222\?\003\010\377\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_db_5fproto_2fgamedb_2eproto_deps[1] = {
  &::descriptor_table_sql_5foptions_2fsql_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_db_5fproto_2fgamedb_2eproto_sccs[16] = {
  &scc_info_tbld_achievement_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_commondata_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_cooldown_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_datacount_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_global_mail_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_guild_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_item_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_mail_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_mail_attachment_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_pet_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_player_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_player_guildinfo_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_skill_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_status_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_systemvar_db_5fproto_2fgamedb_2eproto.base,
  &scc_info_tbld_task_db_5fproto_2fgamedb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_db_5fproto_2fgamedb_2eproto_once;
static bool descriptor_table_db_5fproto_2fgamedb_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_5fproto_2fgamedb_2eproto = {
  &descriptor_table_db_5fproto_2fgamedb_2eproto_initialized, descriptor_table_protodef_db_5fproto_2fgamedb_2eproto, "db_proto/gamedb.proto", 4177,
  &descriptor_table_db_5fproto_2fgamedb_2eproto_once, descriptor_table_db_5fproto_2fgamedb_2eproto_sccs, descriptor_table_db_5fproto_2fgamedb_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_db_5fproto_2fgamedb_2eproto::offsets,
  file_level_metadata_db_5fproto_2fgamedb_2eproto, 16, file_level_enum_descriptors_db_5fproto_2fgamedb_2eproto, file_level_service_descriptors_db_5fproto_2fgamedb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_db_5fproto_2fgamedb_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_db_5fproto_2fgamedb_2eproto), true);
namespace db {

// ===================================================================

void tbld_commondata::InitAsDefaultInstance() {
}
class tbld_commondata::_Internal {
 public:
};

tbld_commondata::tbld_commondata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_commondata)
}
tbld_commondata::tbld_commondata(const tbld_commondata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data3_) -
    reinterpret_cast<char*>(&id_)) + sizeof(data3_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_commondata)
}

void tbld_commondata::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data3_) -
      reinterpret_cast<char*>(&id_)) + sizeof(data3_));
}

tbld_commondata::~tbld_commondata() {
  // @@protoc_insertion_point(destructor:db.tbld_commondata)
  SharedDtor();
}

void tbld_commondata::SharedDtor() {
}

void tbld_commondata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_commondata& tbld_commondata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_commondata_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_commondata::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_commondata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data3_) -
      reinterpret_cast<char*>(&id_)) + sizeof(data3_));
  _internal_metadata_.Clear();
}

const char* tbld_commondata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 playerid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keytype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keyidx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          data2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          data3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_commondata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_commondata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 playerid = 2 [(.sql) = {
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_playerid(), target);
  }

  // uint32 keytype = 3;
  if (this->keytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keytype(), target);
  }

  // uint32 keyidx = 4;
  if (this->keyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_keyidx(), target);
  }

  // uint64 data0 = 5;
  if (this->data0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_data0(), target);
  }

  // uint64 data1 = 6;
  if (this->data1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_data1(), target);
  }

  // uint64 data2 = 7;
  if (this->data2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_data2(), target);
  }

  // uint64 data3 = 8;
  if (this->data3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_data3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_commondata)
  return target;
}

size_t tbld_commondata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_commondata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 playerid = 2 [(.sql) = {
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  // uint32 keytype = 3;
  if (this->keytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keytype());
  }

  // uint32 keyidx = 4;
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyidx());
  }

  // uint64 data0 = 5;
  if (this->data0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data0());
  }

  // uint64 data1 = 6;
  if (this->data1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data1());
  }

  // uint64 data2 = 7;
  if (this->data2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data2());
  }

  // uint64 data3 = 8;
  if (this->data3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_commondata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_commondata)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_commondata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_commondata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_commondata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_commondata)
    MergeFrom(*source);
  }
}

void tbld_commondata::MergeFrom(const tbld_commondata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_commondata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.keytype() != 0) {
    _internal_set_keytype(from._internal_keytype());
  }
  if (from.keyidx() != 0) {
    _internal_set_keyidx(from._internal_keyidx());
  }
  if (from.data0() != 0) {
    _internal_set_data0(from._internal_data0());
  }
  if (from.data1() != 0) {
    _internal_set_data1(from._internal_data1());
  }
  if (from.data2() != 0) {
    _internal_set_data2(from._internal_data2());
  }
  if (from.data3() != 0) {
    _internal_set_data3(from._internal_data3());
  }
}

void tbld_commondata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_commondata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_commondata::CopyFrom(const tbld_commondata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_commondata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_commondata::IsInitialized() const {
  return true;
}

void tbld_commondata::InternalSwap(tbld_commondata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(playerid_, other->playerid_);
  swap(keytype_, other->keytype_);
  swap(keyidx_, other->keyidx_);
  swap(data0_, other->data0_);
  swap(data1_, other->data1_);
  swap(data2_, other->data2_);
  swap(data3_, other->data3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_commondata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_cooldown::InitAsDefaultInstance() {
}
class tbld_cooldown::_Internal {
 public:
};

tbld_cooldown::tbld_cooldown()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_cooldown)
}
tbld_cooldown::tbld_cooldown(const tbld_cooldown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_cooldown)
}

void tbld_cooldown::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(expire_time_));
}

tbld_cooldown::~tbld_cooldown() {
  // @@protoc_insertion_point(destructor:db.tbld_cooldown)
  SharedDtor();
}

void tbld_cooldown::SharedDtor() {
}

void tbld_cooldown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_cooldown& tbld_cooldown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_cooldown_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_cooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_cooldown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(expire_time_));
  _internal_metadata_.Clear();
}

const char* tbld_cooldown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 playerid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keytype = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keyidx = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expire_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_cooldown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_cooldown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 playerid = 2 [(.sql) = {
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_playerid(), target);
  }

  // uint32 keytype = 3 [(.sql) = {
  if (this->keytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keytype(), target);
  }

  // uint32 keyidx = 4 [(.sql) = {
  if (this->keyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_keyidx(), target);
  }

  // uint32 expire_time = 5;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expire_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_cooldown)
  return target;
}

size_t tbld_cooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_cooldown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 playerid = 2 [(.sql) = {
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  // uint32 keytype = 3 [(.sql) = {
  if (this->keytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keytype());
  }

  // uint32 keyidx = 4 [(.sql) = {
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyidx());
  }

  // uint32 expire_time = 5;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expire_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_cooldown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_cooldown)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_cooldown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_cooldown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_cooldown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_cooldown)
    MergeFrom(*source);
  }
}

void tbld_cooldown::MergeFrom(const tbld_cooldown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_cooldown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.keytype() != 0) {
    _internal_set_keytype(from._internal_keytype());
  }
  if (from.keyidx() != 0) {
    _internal_set_keyidx(from._internal_keyidx());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
}

void tbld_cooldown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_cooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_cooldown::CopyFrom(const tbld_cooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_cooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_cooldown::IsInitialized() const {
  return true;
}

void tbld_cooldown::InternalSwap(tbld_cooldown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(playerid_, other->playerid_);
  swap(keytype_, other->keytype_);
  swap(keyidx_, other->keyidx_);
  swap(expire_time_, other->expire_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_cooldown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_datacount::InitAsDefaultInstance() {
}
class tbld_datacount::_Internal {
 public:
};

tbld_datacount::tbld_datacount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_datacount)
}
tbld_datacount::tbld_datacount(const tbld_datacount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_reset_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(next_reset_time_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_datacount)
}

void tbld_datacount::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_reset_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(next_reset_time_));
}

tbld_datacount::~tbld_datacount() {
  // @@protoc_insertion_point(destructor:db.tbld_datacount)
  SharedDtor();
}

void tbld_datacount::SharedDtor() {
}

void tbld_datacount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_datacount& tbld_datacount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_datacount_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_datacount::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_datacount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_reset_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(next_reset_time_));
  _internal_metadata_.Clear();
}

const char* tbld_datacount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 playerid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keytype = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keyidx = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 next_reset_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          next_reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_datacount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_datacount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 playerid = 2 [(.sql) = {
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_playerid(), target);
  }

  // uint32 keytype = 3 [(.sql) = {
  if (this->keytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keytype(), target);
  }

  // uint32 keyidx = 4 [(.sql) = {
  if (this->keyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_keyidx(), target);
  }

  // uint64 data_num = 5;
  if (this->data_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_data_num(), target);
  }

  // uint32 next_reset_time = 6;
  if (this->next_reset_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_next_reset_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_datacount)
  return target;
}

size_t tbld_datacount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_datacount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 playerid = 2 [(.sql) = {
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  // uint32 keytype = 3 [(.sql) = {
  if (this->keytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keytype());
  }

  // uint32 keyidx = 4 [(.sql) = {
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyidx());
  }

  // uint64 data_num = 5;
  if (this->data_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_num());
  }

  // uint32 next_reset_time = 6;
  if (this->next_reset_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_reset_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_datacount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_datacount)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_datacount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_datacount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_datacount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_datacount)
    MergeFrom(*source);
  }
}

void tbld_datacount::MergeFrom(const tbld_datacount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_datacount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.keytype() != 0) {
    _internal_set_keytype(from._internal_keytype());
  }
  if (from.keyidx() != 0) {
    _internal_set_keyidx(from._internal_keyidx());
  }
  if (from.data_num() != 0) {
    _internal_set_data_num(from._internal_data_num());
  }
  if (from.next_reset_time() != 0) {
    _internal_set_next_reset_time(from._internal_next_reset_time());
  }
}

void tbld_datacount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_datacount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_datacount::CopyFrom(const tbld_datacount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_datacount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_datacount::IsInitialized() const {
  return true;
}

void tbld_datacount::InternalSwap(tbld_datacount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(playerid_, other->playerid_);
  swap(keytype_, other->keytype_);
  swap(keyidx_, other->keyidx_);
  swap(data_num_, other->data_num_);
  swap(next_reset_time_, other->next_reset_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_datacount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_global_mail::InitAsDefaultInstance() {
}
class tbld_global_mail::_Internal {
 public:
};

tbld_global_mail::tbld_global_mail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_global_mail)
}
tbld_global_mail::tbld_global_mail(const tbld_global_mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sendername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendername().empty()) {
    sendername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendername_);
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_global_mail)
}

void tbld_global_mail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_global_mail_db_5fproto_2fgamedb_2eproto.base);
  sendername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
}

tbld_global_mail::~tbld_global_mail() {
  // @@protoc_insertion_point(destructor:db.tbld_global_mail)
  SharedDtor();
}

void tbld_global_mail::SharedDtor() {
  sendername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_global_mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_global_mail& tbld_global_mail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_global_mail_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_global_mail::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_global_mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sendername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  _internal_metadata_.Clear();
}

const char* tbld_global_mail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 senderid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          senderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sendername = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sendername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_global_mail.sendername"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 create_time = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject = 6 [(.sql) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_global_mail.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 7 [(.sql) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_global_mail.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 filter_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          filter_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 filter_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          filter_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_global_mail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_global_mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 senderid = 2 [(.sql) = {
  if (this->senderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_senderid(), target);
  }

  // string sendername = 3 [(.sql) = {
  if (this->sendername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendername().data(), static_cast<int>(this->_internal_sendername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_global_mail.sendername");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sendername(), target);
  }

  // uint32 create_time = 4 [(.sql) = {
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_create_time(), target);
  }

  // uint64 flag = 5;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_flag(), target);
  }

  // string subject = 6 [(.sql) = {
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_global_mail.subject");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_subject(), target);
  }

  // string content = 7 [(.sql) = {
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_global_mail.content");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_content(), target);
  }

  // uint64 filter_type = 8;
  if (this->filter_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_filter_type(), target);
  }

  // uint64 filter_data = 9;
  if (this->filter_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_filter_data(), target);
  }

  // bytes attach_data = 10;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_global_mail)
  return target;
}

size_t tbld_global_mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_global_mail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sendername = 3 [(.sql) = {
  if (this->sendername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendername());
  }

  // string subject = 6 [(.sql) = {
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string content = 7 [(.sql) = {
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // bytes attach_data = 10;
  if (this->attach_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 senderid = 2 [(.sql) = {
  if (this->senderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_senderid());
  }

  // uint64 flag = 5;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flag());
  }

  // uint64 filter_type = 8;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_filter_type());
  }

  // uint64 filter_data = 9;
  if (this->filter_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_filter_data());
  }

  // uint32 create_time = 4 [(.sql) = {
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_create_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_global_mail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_global_mail)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_global_mail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_global_mail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_global_mail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_global_mail)
    MergeFrom(*source);
  }
}

void tbld_global_mail::MergeFrom(const tbld_global_mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_global_mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendername().size() > 0) {

    sendername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendername_);
  }
  if (from.subject().size() > 0) {

    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.senderid() != 0) {
    _internal_set_senderid(from._internal_senderid());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.filter_type() != 0) {
    _internal_set_filter_type(from._internal_filter_type());
  }
  if (from.filter_data() != 0) {
    _internal_set_filter_data(from._internal_filter_data());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
}

void tbld_global_mail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_global_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_global_mail::CopyFrom(const tbld_global_mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_global_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_global_mail::IsInitialized() const {
  return true;
}

void tbld_global_mail::InternalSwap(tbld_global_mail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sendername_.Swap(&other->sendername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(senderid_, other->senderid_);
  swap(flag_, other->flag_);
  swap(filter_type_, other->filter_type_);
  swap(filter_data_, other->filter_data_);
  swap(create_time_, other->create_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_global_mail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_guild::InitAsDefaultInstance() {
}
class tbld_guild::_Internal {
 public:
};

tbld_guild::tbld_guild()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_guild)
}
tbld_guild::tbld_guild(const tbld_guild& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_name().empty()) {
    leader_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
  }
  creator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_name().empty()) {
    creator_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creator_name_);
  }
  slogan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slogan().empty()) {
    slogan_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.slogan_);
  }
  info1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info1().empty()) {
    info1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info1_);
  }
  info2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info2().empty()) {
    info2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info2_);
  }
  info3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info3().empty()) {
    info3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info3_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&id_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_guild)
}

void tbld_guild::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_guild_db_5fproto_2fgamedb_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slogan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(flag_));
}

tbld_guild::~tbld_guild() {
  // @@protoc_insertion_point(destructor:db.tbld_guild)
  SharedDtor();
}

void tbld_guild::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slogan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_guild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_guild& tbld_guild::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_guild_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_guild::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_guild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slogan_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(flag_));
  _internal_metadata_.Clear();
}

const char* tbld_guild::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_guild.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 leader_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leader_name = 5 [(.sql) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_leader_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_guild.leader_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 creator_id = 6 [(.sql) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          creator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string creator_name = 7 [(.sql) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_creator_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_guild.creator_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 create_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 del_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          del_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string slogan = 10 [(.sql) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_slogan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_guild.slogan"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info1 = 11 [(.sql) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_info1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_guild.info1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info2 = 12 [(.sql) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_info2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_guild.info2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info3 = 13 [(.sql) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_info3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_guild.info3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_guild::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_guild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 lev = 2;
  if (this->lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lev(), target);
  }

  // string name = 3 [(.sql) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_guild.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint64 leader_id = 4;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_leader_id(), target);
  }

  // string leader_name = 5 [(.sql) = {
  if (this->leader_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_name().data(), static_cast<int>(this->_internal_leader_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_guild.leader_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_leader_name(), target);
  }

  // uint64 creator_id = 6 [(.sql) = {
  if (this->creator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_creator_id(), target);
  }

  // string creator_name = 7 [(.sql) = {
  if (this->creator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_name().data(), static_cast<int>(this->_internal_creator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_guild.creator_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_creator_name(), target);
  }

  // uint32 create_time = 8;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_create_time(), target);
  }

  // uint32 del_time = 9;
  if (this->del_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_del_time(), target);
  }

  // string slogan = 10 [(.sql) = {
  if (this->slogan().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slogan().data(), static_cast<int>(this->_internal_slogan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_guild.slogan");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_slogan(), target);
  }

  // string info1 = 11 [(.sql) = {
  if (this->info1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info1().data(), static_cast<int>(this->_internal_info1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_guild.info1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_info1(), target);
  }

  // string info2 = 12 [(.sql) = {
  if (this->info2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info2().data(), static_cast<int>(this->_internal_info2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_guild.info2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_info2(), target);
  }

  // string info3 = 13 [(.sql) = {
  if (this->info3().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info3().data(), static_cast<int>(this->_internal_info3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_guild.info3");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_info3(), target);
  }

  // uint64 flag = 14;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_guild)
  return target;
}

size_t tbld_guild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_guild)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3 [(.sql) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string leader_name = 5 [(.sql) = {
  if (this->leader_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_name());
  }

  // string creator_name = 7 [(.sql) = {
  if (this->creator_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_name());
  }

  // string slogan = 10 [(.sql) = {
  if (this->slogan().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slogan());
  }

  // string info1 = 11 [(.sql) = {
  if (this->info1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info1());
  }

  // string info2 = 12 [(.sql) = {
  if (this->info2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info2());
  }

  // string info3 = 13 [(.sql) = {
  if (this->info3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info3());
  }

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 lev = 2;
  if (this->lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lev());
  }

  // uint64 leader_id = 4;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_leader_id());
  }

  // uint64 creator_id = 6 [(.sql) = {
  if (this->creator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_creator_id());
  }

  // uint32 create_time = 8;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_create_time());
  }

  // uint32 del_time = 9;
  if (this->del_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_del_time());
  }

  // uint64 flag = 14;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_guild::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_guild)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_guild* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_guild>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_guild)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_guild)
    MergeFrom(*source);
  }
}

void tbld_guild::MergeFrom(const tbld_guild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_guild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.leader_name().size() > 0) {

    leader_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
  }
  if (from.creator_name().size() > 0) {

    creator_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creator_name_);
  }
  if (from.slogan().size() > 0) {

    slogan_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.slogan_);
  }
  if (from.info1().size() > 0) {

    info1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info1_);
  }
  if (from.info2().size() > 0) {

    info2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info2_);
  }
  if (from.info3().size() > 0) {

    info3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info3_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.lev() != 0) {
    _internal_set_lev(from._internal_lev());
  }
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.creator_id() != 0) {
    _internal_set_creator_id(from._internal_creator_id());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.del_time() != 0) {
    _internal_set_del_time(from._internal_del_time());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void tbld_guild::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_guild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_guild::CopyFrom(const tbld_guild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_guild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_guild::IsInitialized() const {
  return true;
}

void tbld_guild::InternalSwap(tbld_guild* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leader_name_.Swap(&other->leader_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  creator_name_.Swap(&other->creator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  slogan_.Swap(&other->slogan_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info1_.Swap(&other->info1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info2_.Swap(&other->info2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info3_.Swap(&other->info3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(lev_, other->lev_);
  swap(leader_id_, other->leader_id_);
  swap(creator_id_, other->creator_id_);
  swap(create_time_, other->create_time_);
  swap(del_time_, other->del_time_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_guild::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_item::InitAsDefaultInstance() {
}
class tbld_item::_Internal {
 public:
};

tbld_item::tbld_item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_item)
}
tbld_item::tbld_item(const tbld_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra().empty()) {
    extra_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&addition_lev_) -
    reinterpret_cast<char*>(&id_)) + sizeof(addition_lev_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_item)
}

void tbld_item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_item_db_5fproto_2fgamedb_2eproto.base);
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addition_lev_) -
      reinterpret_cast<char*>(&id_)) + sizeof(addition_lev_));
}

tbld_item::~tbld_item() {
  // @@protoc_insertion_point(destructor:db.tbld_item)
  SharedDtor();
}

void tbld_item::SharedDtor() {
  extra_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_item& tbld_item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_item_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_item::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addition_lev_) -
      reinterpret_cast<char*>(&id_)) + sizeof(addition_lev_));
  _internal_metadata_.Clear();
}

const char* tbld_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 owner_id = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 itemtype = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          itemtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 position = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pilenum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pilenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expire_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dura = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dura_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dura_limit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          dura_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 addition_lev = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          addition_lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_extra();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 owner_id = 2 [(.sql) = {
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_owner_id(), target);
  }

  // uint32 itemtype = 3 [(.sql) = {
  if (this->itemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_itemtype(), target);
  }

  // uint32 position = 4 [(.sql) = {
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_position(), target);
  }

  // uint32 grid = 5;
  if (this->grid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_grid(), target);
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  // uint32 pilenum = 7;
  if (this->pilenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pilenum(), target);
  }

  // uint32 expire_time = 8;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_expire_time(), target);
  }

  // uint32 dura = 9;
  if (this->dura() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_dura(), target);
  }

  // uint32 dura_limit = 10;
  if (this->dura_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dura_limit(), target);
  }

  // uint32 addition_lev = 11;
  if (this->addition_lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_addition_lev(), target);
  }

  // bytes extra = 12;
  if (this->extra().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_item)
  return target;
}

size_t tbld_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes extra = 12;
  if (this->extra().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra());
  }

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 owner_id = 2 [(.sql) = {
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_owner_id());
  }

  // uint32 itemtype = 3 [(.sql) = {
  if (this->itemtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_itemtype());
  }

  // uint32 position = 4 [(.sql) = {
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  // uint32 grid = 5;
  if (this->grid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grid());
  }

  // uint32 flag = 6;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  // uint32 pilenum = 7;
  if (this->pilenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pilenum());
  }

  // uint32 expire_time = 8;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expire_time());
  }

  // uint32 dura = 9;
  if (this->dura() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dura());
  }

  // uint32 dura_limit = 10;
  if (this->dura_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dura_limit());
  }

  // uint32 addition_lev = 11;
  if (this->addition_lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addition_lev());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_item)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_item)
    MergeFrom(*source);
  }
}

void tbld_item::MergeFrom(const tbld_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.extra().size() > 0) {

    extra_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (from.itemtype() != 0) {
    _internal_set_itemtype(from._internal_itemtype());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.grid() != 0) {
    _internal_set_grid(from._internal_grid());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.pilenum() != 0) {
    _internal_set_pilenum(from._internal_pilenum());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  if (from.dura() != 0) {
    _internal_set_dura(from._internal_dura());
  }
  if (from.dura_limit() != 0) {
    _internal_set_dura_limit(from._internal_dura_limit());
  }
  if (from.addition_lev() != 0) {
    _internal_set_addition_lev(from._internal_addition_lev());
  }
}

void tbld_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_item::CopyFrom(const tbld_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_item::IsInitialized() const {
  return true;
}

void tbld_item::InternalSwap(tbld_item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extra_.Swap(&other->extra_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(owner_id_, other->owner_id_);
  swap(itemtype_, other->itemtype_);
  swap(position_, other->position_);
  swap(grid_, other->grid_);
  swap(flag_, other->flag_);
  swap(pilenum_, other->pilenum_);
  swap(expire_time_, other->expire_time_);
  swap(dura_, other->dura_);
  swap(dura_limit_, other->dura_limit_);
  swap(addition_lev_, other->addition_lev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_mail::InitAsDefaultInstance() {
}
class tbld_mail::_Internal {
 public:
};

tbld_mail::tbld_mail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_mail)
}
tbld_mail::tbld_mail(const tbld_mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sendername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendername().empty()) {
    sendername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendername_);
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_mail)
}

void tbld_mail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_mail_db_5fproto_2fgamedb_2eproto.base);
  sendername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
}

tbld_mail::~tbld_mail() {
  // @@protoc_insertion_point(destructor:db.tbld_mail)
  SharedDtor();
}

void tbld_mail::SharedDtor() {
  sendername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_mail& tbld_mail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_mail_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_mail::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sendername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  _internal_metadata_.Clear();
}

const char* tbld_mail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ownerid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 senderid = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          senderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sendername = 5 [(.sql) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sendername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_mail.sendername"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 create_time = 6 [(.sql) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject = 8 [(.sql) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_mail.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 9 [(.sql) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_mail.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_mail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 ownerid = 2 [(.sql) = {
  if (this->ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ownerid(), target);
  }

  // uint64 senderid = 4 [(.sql) = {
  if (this->senderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_senderid(), target);
  }

  // string sendername = 5 [(.sql) = {
  if (this->sendername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sendername().data(), static_cast<int>(this->_internal_sendername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_mail.sendername");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sendername(), target);
  }

  // uint32 create_time = 6 [(.sql) = {
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_create_time(), target);
  }

  // uint64 flag = 7;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_flag(), target);
  }

  // string subject = 8 [(.sql) = {
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_mail.subject");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_subject(), target);
  }

  // string content = 9 [(.sql) = {
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_mail.content");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_mail)
  return target;
}

size_t tbld_mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_mail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sendername = 5 [(.sql) = {
  if (this->sendername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sendername());
  }

  // string subject = 8 [(.sql) = {
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string content = 9 [(.sql) = {
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 ownerid = 2 [(.sql) = {
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ownerid());
  }

  // uint64 senderid = 4 [(.sql) = {
  if (this->senderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_senderid());
  }

  // uint64 flag = 7;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flag());
  }

  // uint32 create_time = 6 [(.sql) = {
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_create_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_mail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_mail)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_mail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_mail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_mail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_mail)
    MergeFrom(*source);
  }
}

void tbld_mail::MergeFrom(const tbld_mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendername().size() > 0) {

    sendername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendername_);
  }
  if (from.subject().size() > 0) {

    subject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
  if (from.senderid() != 0) {
    _internal_set_senderid(from._internal_senderid());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
}

void tbld_mail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_mail::CopyFrom(const tbld_mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_mail::IsInitialized() const {
  return true;
}

void tbld_mail::InternalSwap(tbld_mail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sendername_.Swap(&other->sendername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(ownerid_, other->ownerid_);
  swap(senderid_, other->senderid_);
  swap(flag_, other->flag_);
  swap(create_time_, other->create_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_mail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_mail_attachment::InitAsDefaultInstance() {
}
class tbld_mail_attachment::_Internal {
 public:
};

tbld_mail_attachment::tbld_mail_attachment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_mail_attachment)
}
tbld_mail_attachment::tbld_mail_attachment(const tbld_mail_attachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attach_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(attach_type_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_mail_attachment)
}

void tbld_mail_attachment::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attach_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(attach_type_));
}

tbld_mail_attachment::~tbld_mail_attachment() {
  // @@protoc_insertion_point(destructor:db.tbld_mail_attachment)
  SharedDtor();
}

void tbld_mail_attachment::SharedDtor() {
}

void tbld_mail_attachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_mail_attachment& tbld_mail_attachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_mail_attachment_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_mail_attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_mail_attachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attach_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(attach_type_));
  _internal_metadata_.Clear();
}

const char* tbld_mail_attachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 mailid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 attach_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attach_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 attach_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attach_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_mail_attachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_mail_attachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 mailid = 2 [(.sql) = {
  if (this->mailid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_mailid(), target);
  }

  // uint32 attach_type = 3;
  if (this->attach_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_attach_type(), target);
  }

  // uint64 attach_data = 4;
  if (this->attach_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_mail_attachment)
  return target;
}

size_t tbld_mail_attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_mail_attachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 mailid = 2 [(.sql) = {
  if (this->mailid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mailid());
  }

  // uint64 attach_data = 4;
  if (this->attach_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_attach_data());
  }

  // uint32 attach_type = 3;
  if (this->attach_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attach_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_mail_attachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_mail_attachment)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_mail_attachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_mail_attachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_mail_attachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_mail_attachment)
    MergeFrom(*source);
  }
}

void tbld_mail_attachment::MergeFrom(const tbld_mail_attachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_mail_attachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.mailid() != 0) {
    _internal_set_mailid(from._internal_mailid());
  }
  if (from.attach_data() != 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.attach_type() != 0) {
    _internal_set_attach_type(from._internal_attach_type());
  }
}

void tbld_mail_attachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_mail_attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_mail_attachment::CopyFrom(const tbld_mail_attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_mail_attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_mail_attachment::IsInitialized() const {
  return true;
}

void tbld_mail_attachment::InternalSwap(tbld_mail_attachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(mailid_, other->mailid_);
  swap(attach_data_, other->attach_data_);
  swap(attach_type_, other->attach_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_mail_attachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_pet::InitAsDefaultInstance() {
}
class tbld_pet::_Internal {
 public:
};

tbld_pet::tbld_pet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_pet)
}
tbld_pet::tbld_pet(const tbld_pet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_pet)
}

void tbld_pet::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exp_));
}

tbld_pet::~tbld_pet() {
  // @@protoc_insertion_point(destructor:db.tbld_pet)
  SharedDtor();
}

void tbld_pet::SharedDtor() {
}

void tbld_pet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_pet& tbld_pet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_pet_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_pet::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_pet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exp_));
  _internal_metadata_.Clear();
}

const char* tbld_pet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ownerid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pet_type = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_pet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_pet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 ownerid = 2 [(.sql) = {
  if (this->ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ownerid(), target);
  }

  // uint32 pet_type = 3 [(.sql) = {
  if (this->pet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pet_type(), target);
  }

  // uint32 hp = 4;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hp(), target);
  }

  // uint64 exp = 5;
  if (this->exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_pet)
  return target;
}

size_t tbld_pet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_pet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 ownerid = 2 [(.sql) = {
  if (this->ownerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ownerid());
  }

  // uint32 pet_type = 3 [(.sql) = {
  if (this->pet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pet_type());
  }

  // uint32 hp = 4;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hp());
  }

  // uint64 exp = 5;
  if (this->exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_pet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_pet)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_pet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_pet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_pet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_pet)
    MergeFrom(*source);
  }
}

void tbld_pet::MergeFrom(const tbld_pet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_pet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ownerid() != 0) {
    _internal_set_ownerid(from._internal_ownerid());
  }
  if (from.pet_type() != 0) {
    _internal_set_pet_type(from._internal_pet_type());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
}

void tbld_pet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_pet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_pet::CopyFrom(const tbld_pet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_pet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_pet::IsInitialized() const {
  return true;
}

void tbld_pet::InternalSwap(tbld_pet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(ownerid_, other->ownerid_);
  swap(pet_type_, other->pet_type_);
  swap(hp_, other->hp_);
  swap(exp_, other->exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_pet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_player::InitAsDefaultInstance() {
}
class tbld_player::_Internal {
 public:
};

tbld_player::tbld_player()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_player)
}
tbld_player::tbld_player(const tbld_player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openid().empty()) {
    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  mate_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mate_name().empty()) {
    mate_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mate_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stroge_size_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stroge_size_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_player)
}

void tbld_player::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_player_db_5fproto_2fgamedb_2eproto.base);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mate_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stroge_size_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stroge_size_));
}

tbld_player::~tbld_player() {
  // @@protoc_insertion_point(destructor:db.tbld_player)
  SharedDtor();
}

void tbld_player::SharedDtor() {
  openid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mate_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_player& tbld_player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_player_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_player::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mate_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stroge_size_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stroge_size_));
  _internal_metadata_.Clear();
}

const char* tbld_player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 worldid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 oriworldid = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oriworldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string openid = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_openid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_player.openid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5 [(.sql) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_player.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prof = 6 [(.sql) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 baselook = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          baselook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 create_time = 8 [(.sql) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_logintime = 9 [(.sql) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          last_logintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_logouttime = 10 [(.sql) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          last_logouttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 del_time = 11 [(.sql) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          del_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lev = 12 [(.sql) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 viplev = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          viplev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 record_sceneid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          record_sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float record_x = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          record_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float record_y = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          record_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float record_face = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          record_face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 home_sceneid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          home_sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float home_x = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          home_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float home_y = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          home_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float home_face = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          home_face_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 mate_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          mate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mate_name = 23 [(.sql) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_mate_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_player.mate_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 teamid = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guildid = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exp = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 money = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 money_bind = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          money_bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gold = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gold_bind = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          gold_bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mp = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fp = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 np = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          np_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pkval = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pkval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 honor = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          honor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 achipoint = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          achipoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bag_size = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bag_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stroge_size = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          stroge_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 worldid = 2 [(.sql) = {
  if (this->worldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_worldid(), target);
  }

  // uint32 oriworldid = 3 [(.sql) = {
  if (this->oriworldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oriworldid(), target);
  }

  // string openid = 4 [(.sql) = {
  if (this->openid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_player.openid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_openid(), target);
  }

  // string name = 5 [(.sql) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_player.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // uint32 prof = 6 [(.sql) = {
  if (this->prof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prof(), target);
  }

  // uint32 baselook = 7;
  if (this->baselook() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_baselook(), target);
  }

  // uint32 create_time = 8 [(.sql) = {
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_create_time(), target);
  }

  // uint32 last_logintime = 9 [(.sql) = {
  if (this->last_logintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_last_logintime(), target);
  }

  // uint32 last_logouttime = 10 [(.sql) = {
  if (this->last_logouttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_last_logouttime(), target);
  }

  // uint32 del_time = 11 [(.sql) = {
  if (this->del_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_del_time(), target);
  }

  // uint32 lev = 12 [(.sql) = {
  if (this->lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_lev(), target);
  }

  // uint32 viplev = 13;
  if (this->viplev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_viplev(), target);
  }

  // uint64 record_sceneid = 14;
  if (this->record_sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_record_sceneid(), target);
  }

  // float record_x = 15;
  if (!(this->record_x() <= 0 && this->record_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_record_x(), target);
  }

  // float record_y = 16;
  if (!(this->record_y() <= 0 && this->record_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_record_y(), target);
  }

  // float record_face = 17;
  if (!(this->record_face() <= 0 && this->record_face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_record_face(), target);
  }

  // uint64 home_sceneid = 18;
  if (this->home_sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_home_sceneid(), target);
  }

  // float home_x = 19;
  if (!(this->home_x() <= 0 && this->home_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_home_x(), target);
  }

  // float home_y = 20;
  if (!(this->home_y() <= 0 && this->home_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_home_y(), target);
  }

  // float home_face = 21;
  if (!(this->home_face() <= 0 && this->home_face() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_home_face(), target);
  }

  // uint64 mate_id = 22;
  if (this->mate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(22, this->_internal_mate_id(), target);
  }

  // string mate_name = 23 [(.sql) = {
  if (this->mate_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mate_name().data(), static_cast<int>(this->_internal_mate_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_player.mate_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_mate_name(), target);
  }

  // uint64 teamid = 24;
  if (this->teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_teamid(), target);
  }

  // uint64 guildid = 25;
  if (this->guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(25, this->_internal_guildid(), target);
  }

  // uint64 exp = 26;
  if (this->exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(26, this->_internal_exp(), target);
  }

  // uint64 money = 27;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(27, this->_internal_money(), target);
  }

  // uint64 money_bind = 28;
  if (this->money_bind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(28, this->_internal_money_bind(), target);
  }

  // uint64 gold = 29;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(29, this->_internal_gold(), target);
  }

  // uint64 gold_bind = 30;
  if (this->gold_bind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_gold_bind(), target);
  }

  // uint32 hp = 31;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_hp(), target);
  }

  // uint32 mp = 32;
  if (this->mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_mp(), target);
  }

  // uint32 fp = 33;
  if (this->fp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_fp(), target);
  }

  // uint32 np = 34;
  if (this->np() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_np(), target);
  }

  // uint32 pkval = 35;
  if (this->pkval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_pkval(), target);
  }

  // uint32 honor = 36;
  if (this->honor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_honor(), target);
  }

  // uint32 achipoint = 37;
  if (this->achipoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_achipoint(), target);
  }

  // uint32 bag_size = 38;
  if (this->bag_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_bag_size(), target);
  }

  // uint32 stroge_size = 39;
  if (this->stroge_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_stroge_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_player)
  return target;
}

size_t tbld_player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openid = 4 [(.sql) = {
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // string name = 5 [(.sql) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mate_name = 23 [(.sql) = {
  if (this->mate_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mate_name());
  }

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 worldid = 2 [(.sql) = {
  if (this->worldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_worldid());
  }

  // uint32 oriworldid = 3 [(.sql) = {
  if (this->oriworldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oriworldid());
  }

  // uint32 prof = 6 [(.sql) = {
  if (this->prof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prof());
  }

  // uint32 baselook = 7;
  if (this->baselook() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baselook());
  }

  // uint32 create_time = 8 [(.sql) = {
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_create_time());
  }

  // uint32 last_logintime = 9 [(.sql) = {
  if (this->last_logintime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_logintime());
  }

  // uint32 last_logouttime = 10 [(.sql) = {
  if (this->last_logouttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_logouttime());
  }

  // uint32 del_time = 11 [(.sql) = {
  if (this->del_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_del_time());
  }

  // uint32 lev = 12 [(.sql) = {
  if (this->lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lev());
  }

  // uint32 viplev = 13;
  if (this->viplev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_viplev());
  }

  // uint64 record_sceneid = 14;
  if (this->record_sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_record_sceneid());
  }

  // float record_x = 15;
  if (!(this->record_x() <= 0 && this->record_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float record_y = 16;
  if (!(this->record_y() <= 0 && this->record_y() >= 0)) {
    total_size += 2 + 4;
  }

  // uint64 home_sceneid = 18;
  if (this->home_sceneid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_home_sceneid());
  }

  // float record_face = 17;
  if (!(this->record_face() <= 0 && this->record_face() >= 0)) {
    total_size += 2 + 4;
  }

  // float home_x = 19;
  if (!(this->home_x() <= 0 && this->home_x() >= 0)) {
    total_size += 2 + 4;
  }

  // float home_y = 20;
  if (!(this->home_y() <= 0 && this->home_y() >= 0)) {
    total_size += 2 + 4;
  }

  // float home_face = 21;
  if (!(this->home_face() <= 0 && this->home_face() >= 0)) {
    total_size += 2 + 4;
  }

  // uint64 mate_id = 22;
  if (this->mate_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mate_id());
  }

  // uint64 teamid = 24;
  if (this->teamid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_teamid());
  }

  // uint64 guildid = 25;
  if (this->guildid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guildid());
  }

  // uint64 exp = 26;
  if (this->exp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exp());
  }

  // uint64 money = 27;
  if (this->money() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_money());
  }

  // uint64 money_bind = 28;
  if (this->money_bind() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_money_bind());
  }

  // uint64 gold = 29;
  if (this->gold() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gold());
  }

  // uint64 gold_bind = 30;
  if (this->gold_bind() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gold_bind());
  }

  // uint32 hp = 31;
  if (this->hp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hp());
  }

  // uint32 mp = 32;
  if (this->mp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mp());
  }

  // uint32 fp = 33;
  if (this->fp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fp());
  }

  // uint32 np = 34;
  if (this->np() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_np());
  }

  // uint32 pkval = 35;
  if (this->pkval() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pkval());
  }

  // uint32 honor = 36;
  if (this->honor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_honor());
  }

  // uint32 achipoint = 37;
  if (this->achipoint() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_achipoint());
  }

  // uint32 bag_size = 38;
  if (this->bag_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bag_size());
  }

  // uint32 stroge_size = 39;
  if (this->stroge_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stroge_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_player)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_player)
    MergeFrom(*source);
  }
}

void tbld_player::MergeFrom(const tbld_player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.mate_name().size() > 0) {

    mate_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mate_name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.worldid() != 0) {
    _internal_set_worldid(from._internal_worldid());
  }
  if (from.oriworldid() != 0) {
    _internal_set_oriworldid(from._internal_oriworldid());
  }
  if (from.prof() != 0) {
    _internal_set_prof(from._internal_prof());
  }
  if (from.baselook() != 0) {
    _internal_set_baselook(from._internal_baselook());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.last_logintime() != 0) {
    _internal_set_last_logintime(from._internal_last_logintime());
  }
  if (from.last_logouttime() != 0) {
    _internal_set_last_logouttime(from._internal_last_logouttime());
  }
  if (from.del_time() != 0) {
    _internal_set_del_time(from._internal_del_time());
  }
  if (from.lev() != 0) {
    _internal_set_lev(from._internal_lev());
  }
  if (from.viplev() != 0) {
    _internal_set_viplev(from._internal_viplev());
  }
  if (from.record_sceneid() != 0) {
    _internal_set_record_sceneid(from._internal_record_sceneid());
  }
  if (!(from.record_x() <= 0 && from.record_x() >= 0)) {
    _internal_set_record_x(from._internal_record_x());
  }
  if (!(from.record_y() <= 0 && from.record_y() >= 0)) {
    _internal_set_record_y(from._internal_record_y());
  }
  if (from.home_sceneid() != 0) {
    _internal_set_home_sceneid(from._internal_home_sceneid());
  }
  if (!(from.record_face() <= 0 && from.record_face() >= 0)) {
    _internal_set_record_face(from._internal_record_face());
  }
  if (!(from.home_x() <= 0 && from.home_x() >= 0)) {
    _internal_set_home_x(from._internal_home_x());
  }
  if (!(from.home_y() <= 0 && from.home_y() >= 0)) {
    _internal_set_home_y(from._internal_home_y());
  }
  if (!(from.home_face() <= 0 && from.home_face() >= 0)) {
    _internal_set_home_face(from._internal_home_face());
  }
  if (from.mate_id() != 0) {
    _internal_set_mate_id(from._internal_mate_id());
  }
  if (from.teamid() != 0) {
    _internal_set_teamid(from._internal_teamid());
  }
  if (from.guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from.exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.money_bind() != 0) {
    _internal_set_money_bind(from._internal_money_bind());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.gold_bind() != 0) {
    _internal_set_gold_bind(from._internal_gold_bind());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from.fp() != 0) {
    _internal_set_fp(from._internal_fp());
  }
  if (from.np() != 0) {
    _internal_set_np(from._internal_np());
  }
  if (from.pkval() != 0) {
    _internal_set_pkval(from._internal_pkval());
  }
  if (from.honor() != 0) {
    _internal_set_honor(from._internal_honor());
  }
  if (from.achipoint() != 0) {
    _internal_set_achipoint(from._internal_achipoint());
  }
  if (from.bag_size() != 0) {
    _internal_set_bag_size(from._internal_bag_size());
  }
  if (from.stroge_size() != 0) {
    _internal_set_stroge_size(from._internal_stroge_size());
  }
}

void tbld_player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_player::CopyFrom(const tbld_player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_player::IsInitialized() const {
  return true;
}

void tbld_player::InternalSwap(tbld_player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  openid_.Swap(&other->openid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mate_name_.Swap(&other->mate_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(worldid_, other->worldid_);
  swap(oriworldid_, other->oriworldid_);
  swap(prof_, other->prof_);
  swap(baselook_, other->baselook_);
  swap(create_time_, other->create_time_);
  swap(last_logintime_, other->last_logintime_);
  swap(last_logouttime_, other->last_logouttime_);
  swap(del_time_, other->del_time_);
  swap(lev_, other->lev_);
  swap(viplev_, other->viplev_);
  swap(record_sceneid_, other->record_sceneid_);
  swap(record_x_, other->record_x_);
  swap(record_y_, other->record_y_);
  swap(home_sceneid_, other->home_sceneid_);
  swap(record_face_, other->record_face_);
  swap(home_x_, other->home_x_);
  swap(home_y_, other->home_y_);
  swap(home_face_, other->home_face_);
  swap(mate_id_, other->mate_id_);
  swap(teamid_, other->teamid_);
  swap(guildid_, other->guildid_);
  swap(exp_, other->exp_);
  swap(money_, other->money_);
  swap(money_bind_, other->money_bind_);
  swap(gold_, other->gold_);
  swap(gold_bind_, other->gold_bind_);
  swap(hp_, other->hp_);
  swap(mp_, other->mp_);
  swap(fp_, other->fp_);
  swap(np_, other->np_);
  swap(pkval_, other->pkval_);
  swap(honor_, other->honor_);
  swap(achipoint_, other->achipoint_);
  swap(bag_size_, other->bag_size_);
  swap(stroge_size_, other->stroge_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_player_guildinfo::InitAsDefaultInstance() {
}
class tbld_player_guildinfo::_Internal {
 public:
};

tbld_player_guildinfo::tbld_player_guildinfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_player_guildinfo)
}
tbld_player_guildinfo::tbld_player_guildinfo(const tbld_player_guildinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(join_time_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_player_guildinfo)
}

void tbld_player_guildinfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(join_time_));
}

tbld_player_guildinfo::~tbld_player_guildinfo() {
  // @@protoc_insertion_point(destructor:db.tbld_player_guildinfo)
  SharedDtor();
}

void tbld_player_guildinfo::SharedDtor() {
}

void tbld_player_guildinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_player_guildinfo& tbld_player_guildinfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_player_guildinfo_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_player_guildinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_player_guildinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(join_time_));
  _internal_metadata_.Clear();
}

const char* tbld_player_guildinfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guildid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 join_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          join_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_player_guildinfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_player_guildinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 guildid = 2;
  if (this->guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guildid(), target);
  }

  // uint32 rank = 3;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rank(), target);
  }

  // uint32 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_score(), target);
  }

  // uint32 total_score = 5;
  if (this->total_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_score(), target);
  }

  // uint32 join_time = 6;
  if (this->join_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_join_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_player_guildinfo)
  return target;
}

size_t tbld_player_guildinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_player_guildinfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 guildid = 2;
  if (this->guildid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guildid());
  }

  // uint32 rank = 3;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rank());
  }

  // uint32 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_score());
  }

  // uint32 total_score = 5;
  if (this->total_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_score());
  }

  // uint32 join_time = 6;
  if (this->join_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_join_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_player_guildinfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_player_guildinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_player_guildinfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_player_guildinfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_player_guildinfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_player_guildinfo)
    MergeFrom(*source);
  }
}

void tbld_player_guildinfo::MergeFrom(const tbld_player_guildinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_player_guildinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.total_score() != 0) {
    _internal_set_total_score(from._internal_total_score());
  }
  if (from.join_time() != 0) {
    _internal_set_join_time(from._internal_join_time());
  }
}

void tbld_player_guildinfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_player_guildinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_player_guildinfo::CopyFrom(const tbld_player_guildinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_player_guildinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_player_guildinfo::IsInitialized() const {
  return true;
}

void tbld_player_guildinfo::InternalSwap(tbld_player_guildinfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(guildid_, other->guildid_);
  swap(rank_, other->rank_);
  swap(score_, other->score_);
  swap(total_score_, other->total_score_);
  swap(join_time_, other->join_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_player_guildinfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_skill::InitAsDefaultInstance() {
}
class tbld_skill::_Internal {
 public:
};

tbld_skill::tbld_skill()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_skill)
}
tbld_skill::tbld_skill(const tbld_skill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lev_) -
    reinterpret_cast<char*>(&id_)) + sizeof(lev_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_skill)
}

void tbld_skill::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lev_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lev_));
}

tbld_skill::~tbld_skill() {
  // @@protoc_insertion_point(destructor:db.tbld_skill)
  SharedDtor();
}

void tbld_skill::SharedDtor() {
}

void tbld_skill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_skill& tbld_skill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_skill_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_skill::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_skill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lev_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lev_));
  _internal_metadata_.Clear();
}

const char* tbld_skill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skilltype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skilltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_skill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_skill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 userid = 2 [(.sql) = {
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // uint32 skilltype = 3;
  if (this->skilltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skilltype(), target);
  }

  // uint32 lev = 4;
  if (this->lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_skill)
  return target;
}

size_t tbld_skill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_skill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 userid = 2 [(.sql) = {
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint32 skilltype = 3;
  if (this->skilltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skilltype());
  }

  // uint32 lev = 4;
  if (this->lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lev());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_skill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_skill)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_skill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_skill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_skill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_skill)
    MergeFrom(*source);
  }
}

void tbld_skill::MergeFrom(const tbld_skill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_skill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.skilltype() != 0) {
    _internal_set_skilltype(from._internal_skilltype());
  }
  if (from.lev() != 0) {
    _internal_set_lev(from._internal_lev());
  }
}

void tbld_skill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_skill::CopyFrom(const tbld_skill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_skill::IsInitialized() const {
  return true;
}

void tbld_skill::InternalSwap(tbld_skill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(userid_, other->userid_);
  swap(skilltype_, other->skilltype_);
  swap(lev_, other->lev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_skill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_task::InitAsDefaultInstance() {
}
class tbld_task::_Internal {
 public:
};

tbld_task::tbld_task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_task)
}
tbld_task::tbld_task(const tbld_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_task)
}

void tbld_task::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

tbld_task::~tbld_task() {
  // @@protoc_insertion_point(destructor:db.tbld_task)
  SharedDtor();
}

void tbld_task::SharedDtor() {
}

void tbld_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_task& tbld_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_task_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_task::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* tbld_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 taskid = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 accept_userlev = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          accept_userlev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 accept_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          accept_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 finish_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          finish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expire_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 daycount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          daycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 daycount_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          daycount_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 userid = 2 [(.sql) = {
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // uint32 taskid = 3 [(.sql) = {
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_taskid(), target);
  }

  // uint32 num0 = 4;
  if (this->num0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num0(), target);
  }

  // uint32 num1 = 5;
  if (this->num1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num1(), target);
  }

  // uint32 num2 = 6;
  if (this->num2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num2(), target);
  }

  // uint32 num3 = 7;
  if (this->num3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num3(), target);
  }

  // uint32 accept_userlev = 8;
  if (this->accept_userlev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_accept_userlev(), target);
  }

  // uint32 accept_time = 9;
  if (this->accept_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_accept_time(), target);
  }

  // uint32 finish_time = 10;
  if (this->finish_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_finish_time(), target);
  }

  // uint32 expire_time = 11;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_expire_time(), target);
  }

  // uint32 daycount = 12;
  if (this->daycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_daycount(), target);
  }

  // uint32 daycount_max = 13;
  if (this->daycount_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_daycount_max(), target);
  }

  // uint32 state = 14;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_task)
  return target;
}

size_t tbld_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 userid = 2 [(.sql) = {
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint32 taskid = 3 [(.sql) = {
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_taskid());
  }

  // uint32 num0 = 4;
  if (this->num0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num0());
  }

  // uint32 num1 = 5;
  if (this->num1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num1());
  }

  // uint32 num2 = 6;
  if (this->num2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num2());
  }

  // uint32 num3 = 7;
  if (this->num3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num3());
  }

  // uint32 accept_userlev = 8;
  if (this->accept_userlev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accept_userlev());
  }

  // uint32 accept_time = 9;
  if (this->accept_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accept_time());
  }

  // uint32 finish_time = 10;
  if (this->finish_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_finish_time());
  }

  // uint32 expire_time = 11;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expire_time());
  }

  // uint32 daycount = 12;
  if (this->daycount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_daycount());
  }

  // uint32 daycount_max = 13;
  if (this->daycount_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_daycount_max());
  }

  // uint32 state = 14;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_task)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_task)
    MergeFrom(*source);
  }
}

void tbld_task::MergeFrom(const tbld_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.num0() != 0) {
    _internal_set_num0(from._internal_num0());
  }
  if (from.num1() != 0) {
    _internal_set_num1(from._internal_num1());
  }
  if (from.num2() != 0) {
    _internal_set_num2(from._internal_num2());
  }
  if (from.num3() != 0) {
    _internal_set_num3(from._internal_num3());
  }
  if (from.accept_userlev() != 0) {
    _internal_set_accept_userlev(from._internal_accept_userlev());
  }
  if (from.accept_time() != 0) {
    _internal_set_accept_time(from._internal_accept_time());
  }
  if (from.finish_time() != 0) {
    _internal_set_finish_time(from._internal_finish_time());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  if (from.daycount() != 0) {
    _internal_set_daycount(from._internal_daycount());
  }
  if (from.daycount_max() != 0) {
    _internal_set_daycount_max(from._internal_daycount_max());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void tbld_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_task::CopyFrom(const tbld_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_task::IsInitialized() const {
  return true;
}

void tbld_task::InternalSwap(tbld_task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(userid_, other->userid_);
  swap(taskid_, other->taskid_);
  swap(num0_, other->num0_);
  swap(num1_, other->num1_);
  swap(num2_, other->num2_);
  swap(num3_, other->num3_);
  swap(accept_userlev_, other->accept_userlev_);
  swap(accept_time_, other->accept_time_);
  swap(finish_time_, other->finish_time_);
  swap(expire_time_, other->expire_time_);
  swap(daycount_, other->daycount_);
  swap(daycount_max_, other->daycount_max_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_achievement::InitAsDefaultInstance() {
}
class tbld_achievement::_Internal {
 public:
};

tbld_achievement::tbld_achievement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_achievement)
}
tbld_achievement::tbld_achievement(const tbld_achievement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&take_) -
    reinterpret_cast<char*>(&id_)) + sizeof(take_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_achievement)
}

void tbld_achievement::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&take_) -
      reinterpret_cast<char*>(&id_)) + sizeof(take_));
}

tbld_achievement::~tbld_achievement() {
  // @@protoc_insertion_point(destructor:db.tbld_achievement)
  SharedDtor();
}

void tbld_achievement::SharedDtor() {
}

void tbld_achievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_achievement& tbld_achievement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_achievement_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_achievement::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_achievement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&take_) -
      reinterpret_cast<char*>(&id_)) + sizeof(take_));
  _internal_metadata_.Clear();
}

const char* tbld_achievement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 achiid = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          achiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 take = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          take_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_achievement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_achievement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 userid = 2 [(.sql) = {
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // uint32 achiid = 3 [(.sql) = {
  if (this->achiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_achiid(), target);
  }

  // uint32 take = 4;
  if (this->take() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_take(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_achievement)
  return target;
}

size_t tbld_achievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_achievement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 userid = 2 [(.sql) = {
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint32 achiid = 3 [(.sql) = {
  if (this->achiid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_achiid());
  }

  // uint32 take = 4;
  if (this->take() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_take());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_achievement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_achievement)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_achievement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_achievement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_achievement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_achievement)
    MergeFrom(*source);
  }
}

void tbld_achievement::MergeFrom(const tbld_achievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_achievement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.achiid() != 0) {
    _internal_set_achiid(from._internal_achiid());
  }
  if (from.take() != 0) {
    _internal_set_take(from._internal_take());
  }
}

void tbld_achievement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_achievement::CopyFrom(const tbld_achievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_achievement::IsInitialized() const {
  return true;
}

void tbld_achievement::InternalSwap(tbld_achievement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(userid_, other->userid_);
  swap(achiid_, other->achiid_);
  swap(take_, other->take_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_achievement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_status::InitAsDefaultInstance() {
}
class tbld_status::_Internal {
 public:
};

tbld_status::tbld_status()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_status)
}
tbld_status::tbld_status(const tbld_status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&statusid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(statusid_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_status)
}

void tbld_status::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(statusid_));
}

tbld_status::~tbld_status() {
  // @@protoc_insertion_point(destructor:db.tbld_status)
  SharedDtor();
}

void tbld_status::SharedDtor() {
}

void tbld_status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_status& tbld_status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_status_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_status::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statusid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(statusid_));
  _internal_metadata_.Clear();
}

const char* tbld_status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 userid = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 typeid = 3 [(.sql) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          typeid__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lev = 4 [(.sql) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 secs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 times = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 laststamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          laststamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 casterid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          casterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pause = 10 [(.sql) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 statusid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          statusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 userid = 2 [(.sql) = {
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // uint32 typeid = 3 [(.sql) = {
  if (this->typeid_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_typeid_(), target);
  }

  // uint32 lev = 4 [(.sql) = {
  if (this->lev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lev(), target);
  }

  // uint32 power = 5;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_power(), target);
  }

  // uint32 secs = 6;
  if (this->secs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_secs(), target);
  }

  // uint32 times = 7;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_times(), target);
  }

  // uint32 laststamp = 8;
  if (this->laststamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_laststamp(), target);
  }

  // uint64 casterid = 9;
  if (this->casterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_casterid(), target);
  }

  // uint32 pause = 10 [(.sql) = {
  if (this->pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pause(), target);
  }

  // uint32 statusid = 11;
  if (this->statusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_statusid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_status)
  return target;
}

size_t tbld_status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [(.sql) = {
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 userid = 2 [(.sql) = {
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  // uint32 typeid = 3 [(.sql) = {
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_typeid_());
  }

  // uint32 lev = 4 [(.sql) = {
  if (this->lev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lev());
  }

  // uint32 power = 5;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_power());
  }

  // uint32 secs = 6;
  if (this->secs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secs());
  }

  // uint32 times = 7;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_times());
  }

  // uint32 laststamp = 8;
  if (this->laststamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_laststamp());
  }

  // uint64 casterid = 9;
  if (this->casterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_casterid());
  }

  // uint32 pause = 10 [(.sql) = {
  if (this->pause() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pause());
  }

  // uint32 statusid = 11;
  if (this->statusid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_statusid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_status)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_status)
    MergeFrom(*source);
  }
}

void tbld_status::MergeFrom(const tbld_status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.typeid_() != 0) {
    _internal_set_typeid_(from._internal_typeid_());
  }
  if (from.lev() != 0) {
    _internal_set_lev(from._internal_lev());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.secs() != 0) {
    _internal_set_secs(from._internal_secs());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.laststamp() != 0) {
    _internal_set_laststamp(from._internal_laststamp());
  }
  if (from.casterid() != 0) {
    _internal_set_casterid(from._internal_casterid());
  }
  if (from.pause() != 0) {
    _internal_set_pause(from._internal_pause());
  }
  if (from.statusid() != 0) {
    _internal_set_statusid(from._internal_statusid());
  }
}

void tbld_status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_status::CopyFrom(const tbld_status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_status::IsInitialized() const {
  return true;
}

void tbld_status::InternalSwap(tbld_status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(userid_, other->userid_);
  swap(typeid__, other->typeid__);
  swap(lev_, other->lev_);
  swap(power_, other->power_);
  swap(secs_, other->secs_);
  swap(times_, other->times_);
  swap(laststamp_, other->laststamp_);
  swap(casterid_, other->casterid_);
  swap(pause_, other->pause_);
  swap(statusid_, other->statusid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void tbld_systemvar::InitAsDefaultInstance() {
}
class tbld_systemvar::_Internal {
 public:
};

tbld_systemvar::tbld_systemvar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.tbld_systemvar)
}
tbld_systemvar::tbld_systemvar(const tbld_systemvar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  str0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str0().empty()) {
    str0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str0_);
  }
  str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str1().empty()) {
    str1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str1_);
  }
  str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str2().empty()) {
    str2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str2_);
  }
  str3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str3().empty()) {
    str3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str3_);
  }
  ::memcpy(&keyidx_, &from.keyidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&data3_) -
    reinterpret_cast<char*>(&keyidx_)) + sizeof(data3_));
  // @@protoc_insertion_point(copy_constructor:db.tbld_systemvar)
}

void tbld_systemvar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_tbld_systemvar_db_5fproto_2fgamedb_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&keyidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data3_) -
      reinterpret_cast<char*>(&keyidx_)) + sizeof(data3_));
}

tbld_systemvar::~tbld_systemvar() {
  // @@protoc_insertion_point(destructor:db.tbld_systemvar)
  SharedDtor();
}

void tbld_systemvar::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void tbld_systemvar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const tbld_systemvar& tbld_systemvar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_tbld_systemvar_db_5fproto_2fgamedb_2eproto.base);
  return *internal_default_instance();
}


void tbld_systemvar::Clear() {
// @@protoc_insertion_point(message_clear_start:db.tbld_systemvar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&keyidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data3_) -
      reinterpret_cast<char*>(&keyidx_)) + sizeof(data3_));
  _internal_metadata_.Clear();
}

const char* tbld_systemvar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 keyidx = 1 [(.sql) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [(.sql) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_systemvar.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str0 = 7 [(.sql) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_str0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_systemvar.str0"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str1 = 8 [(.sql) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_str1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_systemvar.str1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str2 = 9 [(.sql) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_str2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_systemvar.str2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str3 = 10 [(.sql) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_str3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "db.tbld_systemvar.str3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tbld_systemvar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:db.tbld_systemvar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 keyidx = 1 [(.sql) = {
  if (this->keyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_keyidx(), target);
  }

  // string name = 2 [(.sql) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_systemvar.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 data0 = 3;
  if (this->data0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_data0(), target);
  }

  // uint64 data1 = 4;
  if (this->data1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_data1(), target);
  }

  // uint64 data2 = 5;
  if (this->data2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_data2(), target);
  }

  // uint64 data3 = 6;
  if (this->data3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_data3(), target);
  }

  // string str0 = 7 [(.sql) = {
  if (this->str0().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str0().data(), static_cast<int>(this->_internal_str0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_systemvar.str0");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_str0(), target);
  }

  // string str1 = 8 [(.sql) = {
  if (this->str1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str1().data(), static_cast<int>(this->_internal_str1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_systemvar.str1");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_str1(), target);
  }

  // string str2 = 9 [(.sql) = {
  if (this->str2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str2().data(), static_cast<int>(this->_internal_str2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_systemvar.str2");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_str2(), target);
  }

  // string str3 = 10 [(.sql) = {
  if (this->str3().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str3().data(), static_cast<int>(this->_internal_str3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db.tbld_systemvar.str3");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_str3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.tbld_systemvar)
  return target;
}

size_t tbld_systemvar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.tbld_systemvar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [(.sql) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string str0 = 7 [(.sql) = {
  if (this->str0().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str0());
  }

  // string str1 = 8 [(.sql) = {
  if (this->str1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str1());
  }

  // string str2 = 9 [(.sql) = {
  if (this->str2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str2());
  }

  // string str3 = 10 [(.sql) = {
  if (this->str3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str3());
  }

  // uint64 keyidx = 1 [(.sql) = {
  if (this->keyidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_keyidx());
  }

  // uint64 data0 = 3;
  if (this->data0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data0());
  }

  // uint64 data1 = 4;
  if (this->data1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data1());
  }

  // uint64 data2 = 5;
  if (this->data2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data2());
  }

  // uint64 data3 = 6;
  if (this->data3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tbld_systemvar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.tbld_systemvar)
  GOOGLE_DCHECK_NE(&from, this);
  const tbld_systemvar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<tbld_systemvar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.tbld_systemvar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.tbld_systemvar)
    MergeFrom(*source);
  }
}

void tbld_systemvar::MergeFrom(const tbld_systemvar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.tbld_systemvar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.str0().size() > 0) {

    str0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str0_);
  }
  if (from.str1().size() > 0) {

    str1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str1_);
  }
  if (from.str2().size() > 0) {

    str2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str2_);
  }
  if (from.str3().size() > 0) {

    str3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str3_);
  }
  if (from.keyidx() != 0) {
    _internal_set_keyidx(from._internal_keyidx());
  }
  if (from.data0() != 0) {
    _internal_set_data0(from._internal_data0());
  }
  if (from.data1() != 0) {
    _internal_set_data1(from._internal_data1());
  }
  if (from.data2() != 0) {
    _internal_set_data2(from._internal_data2());
  }
  if (from.data3() != 0) {
    _internal_set_data3(from._internal_data3());
  }
}

void tbld_systemvar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.tbld_systemvar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbld_systemvar::CopyFrom(const tbld_systemvar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.tbld_systemvar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbld_systemvar::IsInitialized() const {
  return true;
}

void tbld_systemvar::InternalSwap(tbld_systemvar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str0_.Swap(&other->str0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str1_.Swap(&other->str1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str2_.Swap(&other->str2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str3_.Swap(&other->str3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(keyidx_, other->keyidx_);
  swap(data0_, other->data0_);
  swap(data1_, other->data1_);
  swap(data2_, other->data2_);
  swap(data3_, other->data3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tbld_systemvar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::db::tbld_commondata* Arena::CreateMaybeMessage< ::db::tbld_commondata >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_commondata >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_cooldown* Arena::CreateMaybeMessage< ::db::tbld_cooldown >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_cooldown >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_datacount* Arena::CreateMaybeMessage< ::db::tbld_datacount >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_datacount >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_global_mail* Arena::CreateMaybeMessage< ::db::tbld_global_mail >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_global_mail >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_guild* Arena::CreateMaybeMessage< ::db::tbld_guild >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_guild >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_item* Arena::CreateMaybeMessage< ::db::tbld_item >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_item >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_mail* Arena::CreateMaybeMessage< ::db::tbld_mail >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_mail >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_mail_attachment* Arena::CreateMaybeMessage< ::db::tbld_mail_attachment >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_mail_attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_pet* Arena::CreateMaybeMessage< ::db::tbld_pet >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_pet >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_player* Arena::CreateMaybeMessage< ::db::tbld_player >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_player >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_player_guildinfo* Arena::CreateMaybeMessage< ::db::tbld_player_guildinfo >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_player_guildinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_skill* Arena::CreateMaybeMessage< ::db::tbld_skill >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_skill >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_task* Arena::CreateMaybeMessage< ::db::tbld_task >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_task >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_achievement* Arena::CreateMaybeMessage< ::db::tbld_achievement >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_achievement >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_status* Arena::CreateMaybeMessage< ::db::tbld_status >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_status >(arena);
}
template<> PROTOBUF_NOINLINE ::db::tbld_systemvar* Arena::CreateMaybeMessage< ::db::tbld_systemvar >(Arena* arena) {
  return Arena::CreateInternal< ::db::tbld_systemvar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
