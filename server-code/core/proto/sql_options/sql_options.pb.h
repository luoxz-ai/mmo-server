// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql_options/sql_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sql_5foptions_2fsql_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sql_5foptions_2fsql_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sql_5foptions_2fsql_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sql_5foptions_2fsql_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sql_5foptions_2fsql_5foptions_2eproto;
class SqlOptions;
class SqlOptionsDefaultTypeInternal;
extern SqlOptionsDefaultTypeInternal _SqlOptions_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SqlOptions* Arena::CreateMaybeMessage<::SqlOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SqlOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SqlOptions) */ {
 public:
  SqlOptions();
  virtual ~SqlOptions();

  SqlOptions(const SqlOptions& from);
  SqlOptions(SqlOptions&& from) noexcept
    : SqlOptions() {
    *this = ::std::move(from);
  }

  inline SqlOptions& operator=(const SqlOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SqlOptions& operator=(SqlOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SqlOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SqlOptions* internal_default_instance() {
    return reinterpret_cast<const SqlOptions*>(
               &_SqlOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SqlOptions& a, SqlOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SqlOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SqlOptions* New() const final {
    return CreateMaybeMessage<SqlOptions>(nullptr);
  }

  SqlOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SqlOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SqlOptions& from);
  void MergeFrom(const SqlOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SqlOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sql_5foptions_2fsql_5foptions_2eproto);
    return ::descriptor_table_sql_5foptions_2fsql_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryKeyFieldNumber = 3,
    kKeysFieldNumber = 4,
    kDefaultValFieldNumber = 5,
    kUniqueFieldNumber = 6,
    kSizeFieldNumber = 1,
    kAutoIncrementFieldNumber = 2,
    kIntSizeFieldNumber = 7,
  };
  // string primary_key = 3;
  void clear_primary_key();
  const std::string& primary_key() const;
  void set_primary_key(const std::string& value);
  void set_primary_key(std::string&& value);
  void set_primary_key(const char* value);
  void set_primary_key(const char* value, size_t size);
  std::string* mutable_primary_key();
  std::string* release_primary_key();
  void set_allocated_primary_key(std::string* primary_key);
  private:
  const std::string& _internal_primary_key() const;
  void _internal_set_primary_key(const std::string& value);
  std::string* _internal_mutable_primary_key();
  public:

  // string keys = 4;
  void clear_keys();
  const std::string& keys() const;
  void set_keys(const std::string& value);
  void set_keys(std::string&& value);
  void set_keys(const char* value);
  void set_keys(const char* value, size_t size);
  std::string* mutable_keys();
  std::string* release_keys();
  void set_allocated_keys(std::string* keys);
  private:
  const std::string& _internal_keys() const;
  void _internal_set_keys(const std::string& value);
  std::string* _internal_mutable_keys();
  public:

  // string default_val = 5;
  void clear_default_val();
  const std::string& default_val() const;
  void set_default_val(const std::string& value);
  void set_default_val(std::string&& value);
  void set_default_val(const char* value);
  void set_default_val(const char* value, size_t size);
  std::string* mutable_default_val();
  std::string* release_default_val();
  void set_allocated_default_val(std::string* default_val);
  private:
  const std::string& _internal_default_val() const;
  void _internal_set_default_val(const std::string& value);
  std::string* _internal_mutable_default_val();
  public:

  // string unique = 6;
  void clear_unique();
  const std::string& unique() const;
  void set_unique(const std::string& value);
  void set_unique(std::string&& value);
  void set_unique(const char* value);
  void set_unique(const char* value, size_t size);
  std::string* mutable_unique();
  std::string* release_unique();
  void set_allocated_unique(std::string* unique);
  private:
  const std::string& _internal_unique() const;
  void _internal_set_unique(const std::string& value);
  std::string* _internal_mutable_unique();
  public:

  // uint32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool auto_increment = 2;
  void clear_auto_increment();
  bool auto_increment() const;
  void set_auto_increment(bool value);
  private:
  bool _internal_auto_increment() const;
  void _internal_set_auto_increment(bool value);
  public:

  // uint32 int_size = 7;
  void clear_int_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 int_size() const;
  void set_int_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_int_size() const;
  void _internal_set_int_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SqlOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  bool auto_increment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 int_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sql_5foptions_2fsql_5foptions_2eproto;
};
// ===================================================================

static const int kSqlFieldNumber = 1010;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::SqlOptions >, 11, false >
  sql;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SqlOptions

// uint32 size = 1;
inline void SqlOptions::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SqlOptions::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SqlOptions::size() const {
  // @@protoc_insertion_point(field_get:SqlOptions.size)
  return _internal_size();
}
inline void SqlOptions::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void SqlOptions::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:SqlOptions.size)
}

// bool auto_increment = 2;
inline void SqlOptions::clear_auto_increment() {
  auto_increment_ = false;
}
inline bool SqlOptions::_internal_auto_increment() const {
  return auto_increment_;
}
inline bool SqlOptions::auto_increment() const {
  // @@protoc_insertion_point(field_get:SqlOptions.auto_increment)
  return _internal_auto_increment();
}
inline void SqlOptions::_internal_set_auto_increment(bool value) {
  
  auto_increment_ = value;
}
inline void SqlOptions::set_auto_increment(bool value) {
  _internal_set_auto_increment(value);
  // @@protoc_insertion_point(field_set:SqlOptions.auto_increment)
}

// string primary_key = 3;
inline void SqlOptions::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SqlOptions::primary_key() const {
  // @@protoc_insertion_point(field_get:SqlOptions.primary_key)
  return _internal_primary_key();
}
inline void SqlOptions::set_primary_key(const std::string& value) {
  _internal_set_primary_key(value);
  // @@protoc_insertion_point(field_set:SqlOptions.primary_key)
}
inline std::string* SqlOptions::mutable_primary_key() {
  // @@protoc_insertion_point(field_mutable:SqlOptions.primary_key)
  return _internal_mutable_primary_key();
}
inline const std::string& SqlOptions::_internal_primary_key() const {
  return primary_key_.GetNoArena();
}
inline void SqlOptions::_internal_set_primary_key(const std::string& value) {
  
  primary_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SqlOptions::set_primary_key(std::string&& value) {
  
  primary_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SqlOptions.primary_key)
}
inline void SqlOptions::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SqlOptions.primary_key)
}
inline void SqlOptions::set_primary_key(const char* value, size_t size) {
  
  primary_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SqlOptions.primary_key)
}
inline std::string* SqlOptions::_internal_mutable_primary_key() {
  
  return primary_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SqlOptions::release_primary_key() {
  // @@protoc_insertion_point(field_release:SqlOptions.primary_key)
  
  return primary_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SqlOptions::set_allocated_primary_key(std::string* primary_key) {
  if (primary_key != nullptr) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:SqlOptions.primary_key)
}

// string keys = 4;
inline void SqlOptions::clear_keys() {
  keys_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SqlOptions::keys() const {
  // @@protoc_insertion_point(field_get:SqlOptions.keys)
  return _internal_keys();
}
inline void SqlOptions::set_keys(const std::string& value) {
  _internal_set_keys(value);
  // @@protoc_insertion_point(field_set:SqlOptions.keys)
}
inline std::string* SqlOptions::mutable_keys() {
  // @@protoc_insertion_point(field_mutable:SqlOptions.keys)
  return _internal_mutable_keys();
}
inline const std::string& SqlOptions::_internal_keys() const {
  return keys_.GetNoArena();
}
inline void SqlOptions::_internal_set_keys(const std::string& value) {
  
  keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SqlOptions::set_keys(std::string&& value) {
  
  keys_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SqlOptions.keys)
}
inline void SqlOptions::set_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SqlOptions.keys)
}
inline void SqlOptions::set_keys(const char* value, size_t size) {
  
  keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SqlOptions.keys)
}
inline std::string* SqlOptions::_internal_mutable_keys() {
  
  return keys_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SqlOptions::release_keys() {
  // @@protoc_insertion_point(field_release:SqlOptions.keys)
  
  return keys_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SqlOptions::set_allocated_keys(std::string* keys) {
  if (keys != nullptr) {
    
  } else {
    
  }
  keys_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keys);
  // @@protoc_insertion_point(field_set_allocated:SqlOptions.keys)
}

// string default_val = 5;
inline void SqlOptions::clear_default_val() {
  default_val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SqlOptions::default_val() const {
  // @@protoc_insertion_point(field_get:SqlOptions.default_val)
  return _internal_default_val();
}
inline void SqlOptions::set_default_val(const std::string& value) {
  _internal_set_default_val(value);
  // @@protoc_insertion_point(field_set:SqlOptions.default_val)
}
inline std::string* SqlOptions::mutable_default_val() {
  // @@protoc_insertion_point(field_mutable:SqlOptions.default_val)
  return _internal_mutable_default_val();
}
inline const std::string& SqlOptions::_internal_default_val() const {
  return default_val_.GetNoArena();
}
inline void SqlOptions::_internal_set_default_val(const std::string& value) {
  
  default_val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SqlOptions::set_default_val(std::string&& value) {
  
  default_val_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SqlOptions.default_val)
}
inline void SqlOptions::set_default_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SqlOptions.default_val)
}
inline void SqlOptions::set_default_val(const char* value, size_t size) {
  
  default_val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SqlOptions.default_val)
}
inline std::string* SqlOptions::_internal_mutable_default_val() {
  
  return default_val_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SqlOptions::release_default_val() {
  // @@protoc_insertion_point(field_release:SqlOptions.default_val)
  
  return default_val_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SqlOptions::set_allocated_default_val(std::string* default_val) {
  if (default_val != nullptr) {
    
  } else {
    
  }
  default_val_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_val);
  // @@protoc_insertion_point(field_set_allocated:SqlOptions.default_val)
}

// string unique = 6;
inline void SqlOptions::clear_unique() {
  unique_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SqlOptions::unique() const {
  // @@protoc_insertion_point(field_get:SqlOptions.unique)
  return _internal_unique();
}
inline void SqlOptions::set_unique(const std::string& value) {
  _internal_set_unique(value);
  // @@protoc_insertion_point(field_set:SqlOptions.unique)
}
inline std::string* SqlOptions::mutable_unique() {
  // @@protoc_insertion_point(field_mutable:SqlOptions.unique)
  return _internal_mutable_unique();
}
inline const std::string& SqlOptions::_internal_unique() const {
  return unique_.GetNoArena();
}
inline void SqlOptions::_internal_set_unique(const std::string& value) {
  
  unique_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SqlOptions::set_unique(std::string&& value) {
  
  unique_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SqlOptions.unique)
}
inline void SqlOptions::set_unique(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unique_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SqlOptions.unique)
}
inline void SqlOptions::set_unique(const char* value, size_t size) {
  
  unique_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SqlOptions.unique)
}
inline std::string* SqlOptions::_internal_mutable_unique() {
  
  return unique_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SqlOptions::release_unique() {
  // @@protoc_insertion_point(field_release:SqlOptions.unique)
  
  return unique_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SqlOptions::set_allocated_unique(std::string* unique) {
  if (unique != nullptr) {
    
  } else {
    
  }
  unique_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique);
  // @@protoc_insertion_point(field_set_allocated:SqlOptions.unique)
}

// uint32 int_size = 7;
inline void SqlOptions::clear_int_size() {
  int_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SqlOptions::_internal_int_size() const {
  return int_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SqlOptions::int_size() const {
  // @@protoc_insertion_point(field_get:SqlOptions.int_size)
  return _internal_int_size();
}
inline void SqlOptions::_internal_set_int_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  int_size_ = value;
}
inline void SqlOptions::set_int_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_int_size(value);
  // @@protoc_insertion_point(field_set:SqlOptions.int_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sql_5foptions_2fsql_5foptions_2eproto
